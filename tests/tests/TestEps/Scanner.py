"""This is a scanner."""
__copyright__ = """
If not otherwise stated, any source code generated by Coco/R (other than Coco/R itself) does not fall under the GNU General Public License.
"""
import typing
import array
from enum import IntEnum
from functools import wraps
from CoCoRuntime.scanner import Buffer, Scanner, prepareLiteralsTable


class ScannerEnum(IntEnum):
	eofSym = 0
	noSym = 7
	maxT = 7
	_EOF = 0
	EOF_SYM = 0
	_a = 1
	a_Sym = 1
	_b = 2
	b_Sym = 2
	_c = 3
	c_Sym = 3
	_d = 4
	d_Sym = 4
	_e = 5
	e_Sym = 5
	_f = 6
	f_Sym = 6
	NOT_SYM = 7


class MyScanner(Scanner):
	__slots__ = ()

	@wraps(Scanner.__init__)
	def __init__(self, *args, **kwargs):
		"""This ctor is mandatory, don't delete it: otherwise self.__class__.ENUM will be None"""
		super().__init__(*args, **kwargs)

	ENUM = ScannerEnum
	charSetSize = 256
	maxT = 7
	start = array.array("b", (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1))

	def initialization(self) -> None:
		pass

	ignores = frozenset((32,))

	def casing(self) -> None:
		pass

	literalsTable = prepareLiteralsTable({})

	def CheckLiteral(self) -> ScannerEnum:
		return self.__class__.literalsTable.get(self.t.val, self.t.kind)

	def scan1(self) -> bool:
		pass

	def scan2(self, buf: str) -> str:
		buf += str(self.ch)
		self.NextCh()
		return buf

	def scan3(self, state: int, apx: int, buf: str) -> typing.Tuple[typing.Optional[int], ScannerEnum, int, str]:
		return state, self.t.kind, apx, buf

	finalStates = array.array("B", (ScannerEnum.noSym, ScannerEnum.a_Sym, ScannerEnum.b_Sym, ScannerEnum.c_Sym, ScannerEnum.d_Sym, ScannerEnum.e_Sym, ScannerEnum.f_Sym))
