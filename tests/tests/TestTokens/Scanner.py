"""This is a scanner."""
__copyright__ = """
If not otherwise stated, any source code generated by Coco/R (other than Coco/R itself) does not fall under the GNU General Public License.
"""
import typing
import array
from enum import IntEnum
from functools import wraps
from CoCoRuntime.scanner import Buffer, Scanner, prepareLiteralsTable


class ScannerEnum(IntEnum):
	eofSym = 0
	noSym = 12
	maxT = 12
	_EOF = 0
	EOF_SYM = 0
	_ident = 1
	ident_Sym = 1
	_ident1 = 2
	ident1_Sym = 2
	_ident2 = 3
	ident2_Sym = 3
	_number = 4
	number_Sym = 4
	_nul = 5
	nul_Sym = 5
	_hasNul = 6
	hasNul_Sym = 6
	abc_Sym = 7
	abcplus_Sym = 8
	a_Sym = 9
	aunderscore_Sym = 10
	aunderscoreunderscorestarstar_Sym = 11
	NOT_SYM = 12


class MyScanner(Scanner):
	__slots__ = ()

	@wraps(Scanner.__init__)
	def __init__(self, *args, **kwargs):
		"""This ctor is mandatory, don't delete it: otherwise self.__class__.ENUM will be None"""
		super().__init__(*args, **kwargs)

	ENUM = ScannerEnum
	charSetSize = 256
	maxT = 12
	start = array.array("b", (2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 0, 0, 0, 0, 0, 0, 0, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 0, 0, 0, 0, 0, 0, 18, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1))

	def initialization(self) -> None:
		pass

	ignores = frozenset((32,))

	def casing(self) -> None:
		pass

	literalsTable = prepareLiteralsTable({"abc": ScannerEnum.abc_Sym, "a": ScannerEnum.a_Sym})

	def CheckLiteral(self) -> ScannerEnum:
		return self.__class__.literalsTable.get(self.t.val, self.t.kind)

	def scan1(self) -> bool:
		pass

	def scan2(self, buf: str) -> str:
		buf += str(self.ch)
		self.NextCh()
		return buf

	def scan3(self, state: int, apx: int, buf: str) -> typing.Tuple[typing.Optional[int], ScannerEnum, int, str]:
		if state == 6:
			if "0" <= self.ch <= "9" or "A" <= self.ch <= "Z" or "a" <= self.ch <= "z":
				buf += str(self.ch)
				self.NextCh()
				return 6, self.t.kind, apx, buf
			self.t.val = buf
			self.t.kind = self.__class__.ENUM.ident_Sym
			return None, self.CheckLiteral(), apx, buf
		if state == 7:
			self.pos = self.pos - apx - 1
			self.line = self.t.line
			self.buffer.setPos(self.pos + 1)
			self.NextCh()
			return None, self.__class__.ENUM.ident2_Sym, apx, buf
		if state == 8:
			if "0" <= self.ch <= "9":
				buf += str(self.ch)
				self.NextCh()
				return 8, self.t.kind, apx, buf
			if self.ch == "E":
				buf += str(self.ch)
				self.NextCh()
				return 9, self.t.kind, apx, buf
			return None, self.__class__.ENUM.number_Sym, apx, buf
		if state == 9:
			if "0" <= self.ch <= "9":
				buf += str(self.ch)
				self.NextCh()
				return 11, self.t.kind, apx, buf
			if self.ch == "+" or self.ch == "-":
				buf += str(self.ch)
				self.NextCh()
				return 10, self.t.kind, apx, buf
			return None, self.__class__.ENUM.noSym, apx, buf
		if state == 10:
			if "0" <= self.ch <= "9":
				buf += str(self.ch)
				self.NextCh()
				return 11, self.t.kind, apx, buf
			return None, self.__class__.ENUM.noSym, apx, buf
		if state == 11:
			if "0" <= self.ch <= "9":
				buf += str(self.ch)
				self.NextCh()
				return 11, self.t.kind, apx, buf
			return None, self.__class__.ENUM.number_Sym, apx, buf
		if state == 12:
			self.pos = self.pos - apx - 1
			self.line = self.t.line
			self.buffer.setPos(self.pos + 1)
			self.NextCh()
			return None, self.__class__.ENUM.number_Sym, apx, buf
		if state == 13:
			if self.ch == "c":
				buf += str(self.ch)
				self.NextCh()
				return 3, self.t.kind, apx, buf
			return None, self.__class__.ENUM.noSym, apx, buf
		if state == 14:
			if "0" <= self.ch <= "9" or "A" <= self.ch <= "Z" or "a" <= self.ch <= "z":
				buf += str(self.ch)
				self.NextCh()
				return 6, self.t.kind, 0, buf
			if self.ch == "*":
				buf += str(self.ch)
				self.NextCh()
				return 1, self.t.kind, 0, buf
			if self.ch == "_":
				buf += str(self.ch)
				self.NextCh()
				return 16, self.t.kind, apx + 1, buf
			if self.ch == "+":
				buf += str(self.ch)
				self.NextCh()
				return 7, self.t.kind, apx + 1, buf
			self.t.val = buf
			self.t.kind = self.__class__.ENUM.ident_Sym
			return None, self.CheckLiteral(), apx + 1, buf
		if state == 15:
			if "0" <= self.ch <= "9":
				buf += str(self.ch)
				self.NextCh()
				return 15, self.t.kind, apx, buf
			if self.ch == ".":
				buf += str(self.ch)
				self.NextCh()
				return 17, self.t.kind, apx + 1, buf
			return None, self.__class__.ENUM.number_Sym, apx + 1, buf
		if state == 16:
			if self.ch == "*":
				buf += str(self.ch)
				self.NextCh()
				return 1, self.t.kind, 0, buf
			if self.ch == "_":
				buf += str(self.ch)
				self.NextCh()
				return 16, self.t.kind, apx + 1, buf
			if self.ch == "+":
				buf += str(self.ch)
				self.NextCh()
				return 7, self.t.kind, apx + 1, buf
			return None, self.__class__.ENUM.noSym, apx + 1, buf
		if state == 17:
			if "0" <= self.ch <= "9":
				buf += str(self.ch)
				self.NextCh()
				return 8, self.t.kind, 0, buf
			if self.ch == "E":
				buf += str(self.ch)
				self.NextCh()
				return 9, self.t.kind, 0, buf
			if self.ch == ".":
				buf += str(self.ch)
				self.NextCh()
				return 12, self.t.kind, apx + 1, buf
			return None, self.__class__.ENUM.number_Sym, apx + 1, buf
		if state == 18:
			if "0" <= self.ch <= "9" or "A" <= self.ch <= "Z" or self.ch == "a" or "c" <= self.ch <= "z":
				buf += str(self.ch)
				self.NextCh()
				return 6, self.t.kind, 0, buf
			if self.ch == "*":
				buf += str(self.ch)
				self.NextCh()
				return 1, self.t.kind, 0, buf
			if self.ch == "_":
				buf += str(self.ch)
				self.NextCh()
				return 19, self.t.kind, apx + 1, buf
			if self.ch == "+":
				buf += str(self.ch)
				self.NextCh()
				return 7, self.t.kind, apx + 1, buf
			if self.ch == "b":
				buf += str(self.ch)
				self.NextCh()
				return 20, self.t.kind, 0, buf
			self.t.val = buf
			self.t.kind = self.__class__.ENUM.ident_Sym
			return None, self.CheckLiteral(), 0, buf
		if state == 19:
			if self.ch == "*":
				buf += str(self.ch)
				self.NextCh()
				return 1, self.t.kind, 0, buf
			if self.ch == "_":
				buf += str(self.ch)
				self.NextCh()
				return 21, self.t.kind, apx + 1, buf
			if self.ch == "+":
				buf += str(self.ch)
				self.NextCh()
				return 7, self.t.kind, apx + 1, buf
			return None, self.__class__.ENUM.aunderscore_Sym, apx + 1, buf
		if state == 20:
			if "0" <= self.ch <= "9" or "A" <= self.ch <= "Z" or "a" <= self.ch <= "b" or "d" <= self.ch <= "z":
				buf += str(self.ch)
				self.NextCh()
				return 6, self.t.kind, apx, buf
			if ord(self.ch) == 0:
				buf += str(self.ch)
				self.NextCh()
				return 13, self.t.kind, apx, buf
			if self.ch == "c":
				buf += str(self.ch)
				self.NextCh()
				return 22, self.t.kind, apx, buf
			self.t.val = buf
			self.t.kind = self.__class__.ENUM.ident_Sym
			return None, self.CheckLiteral(), apx, buf
		if state == 21:
			if self.ch == "*":
				buf += str(self.ch)
				self.NextCh()
				return 23, self.t.kind, 0, buf
			if self.ch == "_":
				buf += str(self.ch)
				self.NextCh()
				return 16, self.t.kind, apx + 1, buf
			if self.ch == "+":
				buf += str(self.ch)
				self.NextCh()
				return 7, self.t.kind, apx + 1, buf
			return None, self.__class__.ENUM.noSym, apx + 1, buf
		if state == 22:
			if "0" <= self.ch <= "9" or "A" <= self.ch <= "Z" or "a" <= self.ch <= "z":
				buf += str(self.ch)
				self.NextCh()
				return 6, self.t.kind, apx, buf
			if self.ch == "+":
				buf += str(self.ch)
				self.NextCh()
				return 4, self.t.kind, apx, buf
			self.t.val = buf
			self.t.kind = self.__class__.ENUM.ident_Sym
			return None, self.CheckLiteral(), apx, buf
		if state == 23:
			if self.ch == "*":
				buf += str(self.ch)
				self.NextCh()
				return 5, self.t.kind, apx, buf
			return None, self.__class__.ENUM.ident1_Sym, apx, buf
		return state, self.t.kind, apx, buf

	finalStates = array.array("B", (ScannerEnum.noSym, ScannerEnum.ident1_Sym, ScannerEnum.nul_Sym, ScannerEnum.hasNul_Sym, ScannerEnum.abcplus_Sym, ScannerEnum.aunderscoreunderscorestarstar_Sym))
