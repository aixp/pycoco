"""This is a scanner."""
__copyright__ = """
If not otherwise stated, any source code generated by Coco/R (other than Coco/R itself) does not fall under the GNU General Public License.
"""
import typing
import array
from enum import IntEnum
from functools import wraps
from CoCoRuntime.scanner import Buffer, Scanner, prepareLiteralsTable


class ScannerEnum(IntEnum):
	eofSym = 0
	noSym = 6
	maxT = 6
	_EOF = 0
	EOF_SYM = 0
	_ident = 1
	ident_Sym = 1
	_float1 = 2
	float1_Sym = 2
	_float2 = 3
	float2_Sym = 3
	_A = 4
	A_Sym = 4
	bbb_Sym = 5
	NOT_SYM = 6


class MyScanner(Scanner):
	__slots__ = ()

	@wraps(Scanner.__init__)
	def __init__(self, *args, **kwargs):
		"""This ctor is mandatory, don't delete it: otherwise self.__class__.ENUM will be None"""
		super().__init__(*args, **kwargs)

	ENUM = ScannerEnum
	charSetSize = 256
	maxT = 6
	start = array.array("b", (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1))
	valCh = ""

	def initialization(self) -> None:
		pass

	ignores = frozenset((32,))

	def casing(self) -> None:
		valCh = self.ch
		if self.ch != Buffer.EOF:
			self.ch = self.ch.lower()

	literalsTable = prepareLiteralsTable({"aaa": ScannerEnum.A_Sym, "bbb": ScannerEnum.bbb_Sym})

	def CheckLiteral(self) -> ScannerEnum:
		return self.__class__.literalsTable.get(self.t.val.lower(), self.t.kind)

	def scan1(self) -> bool:
		pass

	def scan2(self, buf: str) -> str:
		buf += str(self.ch)
		self.NextCh()
		return buf

	def scan3(self, state: int, apx: int, buf: str) -> typing.Tuple[typing.Optional[int], ScannerEnum, int, str]:
		if state == 2:
			if "a" <= self.ch <= "z":
				buf += str(self.ch)
				self.NextCh()
				return 2, self.t.kind, apx, buf
			self.t.val = buf
			self.t.kind = self.__class__.ENUM.ident_Sym
			return None, self.CheckLiteral(), apx, buf
		if state == 3:
			if "0" <= self.ch <= "9":
				buf += str(self.ch)
				self.NextCh()
				return 4, self.t.kind, apx, buf
			return None, self.__class__.ENUM.noSym, apx, buf
		if state == 4:
			if "0" <= self.ch <= "9":
				buf += str(self.ch)
				self.NextCh()
				return 4, self.t.kind, apx, buf
			return None, self.__class__.ENUM.float2_Sym, apx, buf
		if state == 5:
			if self.ch == "f":
				buf += str(self.ch)
				self.NextCh()
				return 1, self.t.kind, apx, buf
			if "0" <= self.ch <= "9":
				buf += str(self.ch)
				self.NextCh()
				return 5, self.t.kind, apx, buf
			if self.ch == "e":
				buf += str(self.ch)
				self.NextCh()
				return 3, self.t.kind, apx, buf
			return None, self.__class__.ENUM.noSym, apx, buf
		return state, self.t.kind, apx, buf

	finalStates = array.array("B", (ScannerEnum.noSym, ScannerEnum.float1_Sym))
