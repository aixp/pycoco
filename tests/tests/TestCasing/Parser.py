__copyright__ = """
If not otherwise stated, any source code generated by Coco/R (other than Coco/R itself) does not fall under the GNU General Public License.
"""
import typing
from functools import wraps
from CoCoRuntime.parser import Parser
from CoCoRuntime.scanner import Position
from .Scanner import ScannerEnum


def _generateSet() -> typing.Tuple[typing.Tuple[bool, ...], ...]:
	T = True
	x = False
	return ((T, x, x, x, x, x, x),)


class MyParser(Parser):
	__slots__ = ()

	@wraps(Parser.__init__)
	def __init__(self, *args, **kwargs):
		"""This ctor is mandatory, don't delete it: otherwise self.__class__.ENUM will be None"""
		super().__init__(*args, **kwargs)

	ENUM = ScannerEnum
	__main_production_name__ = "Test"
	__EOF_sym__ = ScannerEnum.EOF_SYM

	def pragmas(self) -> None:
		pass

	def Test(self) -> None:
		self.Expect(self.__class__.ENUM.A_Sym)
		self.Expect(self.__class__.ENUM.A_Sym)
		self.Expect(self.__class__.ENUM.A_Sym)
		self.Expect(self.__class__.ENUM.A_Sym)
		self.Expect(self.__class__.ENUM.A_Sym)
		self.Expect(self.__class__.ENUM.A_Sym)
		self.Expect(self.__class__.ENUM.A_Sym)
		self.Expect(self.__class__.ENUM.A_Sym)
		self.Expect(self.__class__.ENUM.A_Sym)
		self.Expect(self.__class__.ENUM.bbb_Sym)
		self.Expect(self.__class__.ENUM.bbb_Sym)

	set = _generateSet()
	errorMessages = "EOF expected", "ident expected", "float1 expected", "float2 expected", "A expected", '"bbb" expected', "??? expected"
