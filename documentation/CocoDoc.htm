<html xmlns:o="urn:schemas-microsoft-com:office:office"
xmlns:w="urn:schemas-microsoft-com:office:word"
xmlns:st1="urn:schemas-microsoft-com:office:smarttags"
xmlns="http://www.w3.org/TR/REC-html40">

<head>
<meta http-equiv=Content-Type content="text/html; charset=windows-1252">
<meta name=ProgId content=Word.Document>
<meta name=Generator content="Microsoft Word 10">
<meta name=Originator content="Microsoft Word 10">
<link rel=File-List href="CocoDoc_files/filelist.xml">
<title>The Compiler Generator Coco/R For Python</title>
<o:SmartTagType namespaceuri="urn:schemas-microsoft-com:office:smarttags"
 name="country-region"/>
<o:SmartTagType namespaceuri="urn:schemas-microsoft-com:office:smarttags"
 name="PostalCode"/>
<o:SmartTagType namespaceuri="urn:schemas-microsoft-com:office:smarttags"
 name="State"/>
<o:SmartTagType namespaceuri="urn:schemas-microsoft-com:office:smarttags"
 name="Street"/>
<o:SmartTagType namespaceuri="urn:schemas-microsoft-com:office:smarttags"
 name="address"/>
<o:SmartTagType namespaceuri="urn:schemas-microsoft-com:office:smarttags"
 name="City"/>
<o:SmartTagType namespaceuri="urn:schemas-microsoft-com:office:smarttags"
 name="place"/>
<o:SmartTagType namespaceuri="urn:schemas-microsoft-com:office:smarttags"
 name="PlaceType"/>
<o:SmartTagType namespaceuri="urn:schemas-microsoft-com:office:smarttags"
 name="PlaceName"/>
<!--[if gte mso 9]><xml>
 <o:DocumentProperties>
  <o:Author>ProvostRH</o:Author>
  <o:LastAuthor>ProvostRH</o:LastAuthor>
  <o:Revision>16</o:Revision>
  <o:TotalTime>1440</o:TotalTime>
  <o:Created>2007-06-15T15:28:00Z</o:Created>
  <o:LastSaved>2007-12-13T17:55:00Z</o:LastSaved>
  <o:Pages>21</o:Pages>
  <o:Words>9947</o:Words>
  <o:Characters>56700</o:Characters>
  <o:Company>NUWCDIVNPT</o:Company>
  <o:Lines>472</o:Lines>
  <o:Paragraphs>133</o:Paragraphs>
  <o:CharactersWithSpaces>66514</o:CharactersWithSpaces>
  <o:Version>10.6830</o:Version>
 </o:DocumentProperties>
</xml><![endif]--><!--[if gte mso 9]><xml>
 <w:WordDocument>
  <w:SpellingState>Clean</w:SpellingState>
  <w:GrammarState>Clean</w:GrammarState>
  <w:Compatibility>
   <w:BreakWrappedTables/>
   <w:SnapToGridInCell/>
   <w:WrapTextWithPunct/>
   <w:UseAsianBreakRules/>
  </w:Compatibility>
  <w:BrowserLevel>MicrosoftInternetExplorer4</w:BrowserLevel>
  <w:ValidateAgainstSchemas/>
  <w:SaveIfXMLInvalid>false</w:SaveIfXMLInvalid>
  <w:IgnoreMixedContent>false</w:IgnoreMixedContent>
  <w:AlwaysShowPlaceholderText>false</w:AlwaysShowPlaceholderText>
 </w:WordDocument>
</xml><![endif]--><!--[if !mso]><object
 classid="clsid:38481807-CA0E-42D2-BF39-B33AF135CC4D" id=ieooui></object>
<style>
st1\:*{behavior:url(#ieooui) }
</style>
<![endif]-->
<style>
<!--
 /* Font Definitions */
 @font-face
	{font-family:Courier;
	panose-1:2 7 4 9 2 2 5 2 4 4;
	mso-font-charset:0;
	mso-generic-font-family:modern;
	mso-font-format:other;
	mso-font-pitch:fixed;
	mso-font-signature:3 0 0 0 1 0;}
@font-face
	{font-family:Tahoma;
	panose-1:2 11 6 4 3 5 4 4 2 4;
	mso-font-charset:0;
	mso-generic-font-family:swiss;
	mso-font-pitch:variable;
	mso-font-signature:1627421319 -2147483648 8 0 66047 0;}
@font-face
	{font-family:Times-Roman;
	panose-1:0 0 0 0 0 0 0 0 0 0;
	mso-font-charset:0;
	mso-generic-font-family:roman;
	mso-font-format:other;
	mso-font-pitch:auto;
	mso-font-signature:3 0 0 0 1 0;}
@font-face
	{font-family:Times-Italic;
	panose-1:0 0 0 0 0 0 0 0 0 0;
	mso-font-charset:0;
	mso-generic-font-family:roman;
	mso-font-format:other;
	mso-font-pitch:auto;
	mso-font-signature:3 0 0 0 1 0;}
@font-face
	{font-family:Courier-Oblique;
	panose-1:0 0 0 0 0 0 0 0 0 0;
	mso-font-charset:0;
	mso-generic-font-family:modern;
	mso-font-format:other;
	mso-font-pitch:auto;
	mso-font-signature:3 0 0 0 1 0;}
@font-face
	{font-family:Times-Bold;
	panose-1:0 0 0 0 0 0 0 0 0 0;
	mso-font-charset:0;
	mso-generic-font-family:roman;
	mso-font-format:other;
	mso-font-pitch:auto;
	mso-font-signature:3 0 0 0 1 0;}
@font-face
	{font-family:Helvetica-Bold;
	panose-1:0 0 0 0 0 0 0 0 0 0;
	mso-font-charset:0;
	mso-generic-font-family:swiss;
	mso-font-format:other;
	mso-font-pitch:auto;
	mso-font-signature:3 0 0 0 1 0;}
@font-face
	{font-family:Courier-Bold;
	panose-1:0 0 0 0 0 0 0 0 0 0;
	mso-font-charset:0;
	mso-generic-font-family:modern;
	mso-font-format:other;
	mso-font-pitch:auto;
	mso-font-signature:3 0 0 0 1 0;}
@font-face
	{font-family:Courier-BoldOblique;
	panose-1:0 0 0 0 0 0 0 0 0 0;
	mso-font-charset:0;
	mso-generic-font-family:roman;
	mso-font-format:other;
	mso-font-pitch:auto;
	mso-font-signature:3 0 0 0 1 0;}
 /* Style Definitions */
 p.MsoNormal, li.MsoNormal, div.MsoNormal
	{mso-style-parent:"";
	margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
h1
	{mso-style-next:Normal;
	margin-top:12.0pt;
	margin-right:0in;
	margin-bottom:3.0pt;
	margin-left:0in;
	mso-pagination:widow-orphan;
	page-break-after:avoid;
	mso-outline-level:1;
	font-size:16.0pt;
	font-family:Arial;
	mso-font-kerning:16.0pt;}
h2
	{mso-style-next:Normal;
	margin-top:12.0pt;
	margin-right:0in;
	margin-bottom:3.0pt;
	margin-left:0in;
	mso-pagination:widow-orphan;
	page-break-after:avoid;
	mso-outline-level:2;
	font-size:14.0pt;
	font-family:Arial;
	font-style:italic;}
h3
	{mso-style-next:Normal;
	margin-top:12.0pt;
	margin-right:0in;
	margin-bottom:3.0pt;
	margin-left:0in;
	mso-pagination:widow-orphan;
	page-break-after:avoid;
	mso-outline-level:3;
	font-size:13.0pt;
	font-family:Arial;}
p.MsoToc1, li.MsoToc1, div.MsoToc1
	{mso-style-update:auto;
	mso-style-noshow:yes;
	mso-style-next:Normal;
	margin-top:6.0pt;
	margin-right:0in;
	margin-bottom:6.0pt;
	margin-left:0in;
	mso-pagination:widow-orphan;
	font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	text-transform:uppercase;
	font-weight:bold;}
p.MsoToc2, li.MsoToc2, div.MsoToc2
	{mso-style-update:auto;
	mso-style-noshow:yes;
	mso-style-next:Normal;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:12.0pt;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	font-variant:small-caps;}
p.MsoToc3, li.MsoToc3, div.MsoToc3
	{mso-style-update:auto;
	mso-style-noshow:yes;
	mso-style-next:Normal;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:24.0pt;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	font-style:italic;}
p.MsoToc4, li.MsoToc4, div.MsoToc4
	{mso-style-update:auto;
	mso-style-noshow:yes;
	mso-style-next:Normal;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:.5in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:9.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.MsoToc5, li.MsoToc5, div.MsoToc5
	{mso-style-update:auto;
	mso-style-noshow:yes;
	mso-style-next:Normal;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:48.0pt;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:9.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.MsoToc6, li.MsoToc6, div.MsoToc6
	{mso-style-update:auto;
	mso-style-noshow:yes;
	mso-style-next:Normal;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:60.0pt;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:9.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.MsoToc7, li.MsoToc7, div.MsoToc7
	{mso-style-update:auto;
	mso-style-noshow:yes;
	mso-style-next:Normal;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:1.0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:9.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.MsoToc8, li.MsoToc8, div.MsoToc8
	{mso-style-update:auto;
	mso-style-noshow:yes;
	mso-style-next:Normal;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:84.0pt;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:9.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.MsoToc9, li.MsoToc9, div.MsoToc9
	{mso-style-update:auto;
	mso-style-noshow:yes;
	mso-style-next:Normal;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:96.0pt;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:9.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
a:link, span.MsoHyperlink
	{color:blue;
	text-decoration:underline;
	text-underline:single;}
a:visited, span.MsoHyperlinkFollowed
	{color:purple;
	text-decoration:underline;
	text-underline:single;}
p.MsoDocumentMap, li.MsoDocumentMap, div.MsoDocumentMap
	{mso-style-noshow:yes;
	margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	background:navy;
	font-size:12.0pt;
	font-family:Tahoma;
	mso-fareast-font-family:"Times New Roman";}
span.SpellE
	{mso-style-name:"";
	mso-spl-e:yes;}
span.GramE
	{mso-style-name:"";
	mso-gram-e:yes;}
@page Section1
	{size:8.5in 11.0in;
	margin:1.0in 1.25in 1.0in 1.25in;
	mso-header-margin:.5in;
	mso-footer-margin:.5in;
	mso-paper-source:0;}
div.Section1
	{page:Section1;}
 /* List Definitions */
 @list l0
	{mso-list-id:127554022;
	mso-list-template-ids:1752564644;}
@list l0:level1
	{mso-level-number-format:bullet;
	mso-level-text:\F0B7;
	mso-level-tab-stop:.5in;
	mso-level-number-position:left;
	text-indent:-.25in;
	mso-ansi-font-size:10.0pt;
	font-family:Symbol;}
@list l1
	{mso-list-id:250160588;
	mso-list-template-ids:-1927401256;}
@list l1:level1
	{mso-level-number-format:bullet;
	mso-level-text:\F0B7;
	mso-level-tab-stop:.5in;
	mso-level-number-position:left;
	text-indent:-.25in;
	mso-ansi-font-size:10.0pt;
	font-family:Symbol;}
@list l2
	{mso-list-id:415590163;
	mso-list-type:hybrid;
	mso-list-template-ids:950690650 67698689 67698691 67698693 67698689 67698691 67698693 67698689 67698691 67698693;}
@list l2:level1
	{mso-level-number-format:bullet;
	mso-level-text:\F0B7;
	mso-level-tab-stop:.5in;
	mso-level-number-position:left;
	text-indent:-.25in;
	font-family:Symbol;}
@list l2:level2
	{mso-level-tab-stop:1.0in;
	mso-level-number-position:left;
	text-indent:-.25in;}
@list l2:level3
	{mso-level-tab-stop:1.5in;
	mso-level-number-position:left;
	text-indent:-.25in;}
@list l2:level4
	{mso-level-tab-stop:2.0in;
	mso-level-number-position:left;
	text-indent:-.25in;}
@list l2:level5
	{mso-level-tab-stop:2.5in;
	mso-level-number-position:left;
	text-indent:-.25in;}
@list l2:level6
	{mso-level-tab-stop:3.0in;
	mso-level-number-position:left;
	text-indent:-.25in;}
@list l2:level7
	{mso-level-tab-stop:3.5in;
	mso-level-number-position:left;
	text-indent:-.25in;}
@list l2:level8
	{mso-level-tab-stop:4.0in;
	mso-level-number-position:left;
	text-indent:-.25in;}
@list l2:level9
	{mso-level-tab-stop:4.5in;
	mso-level-number-position:left;
	text-indent:-.25in;}
@list l3
	{mso-list-id:486478664;
	mso-list-type:hybrid;
	mso-list-template-ids:1448672012 67698689 67698691 67698693 67698689 67698691 67698693 67698689 67698691 67698693;}
@list l3:level1
	{mso-level-number-format:bullet;
	mso-level-text:\F0B7;
	mso-level-tab-stop:.5in;
	mso-level-number-position:left;
	text-indent:-.25in;
	font-family:Symbol;}
@list l3:level2
	{mso-level-tab-stop:1.0in;
	mso-level-number-position:left;
	text-indent:-.25in;}
@list l3:level3
	{mso-level-tab-stop:1.5in;
	mso-level-number-position:left;
	text-indent:-.25in;}
@list l3:level4
	{mso-level-tab-stop:2.0in;
	mso-level-number-position:left;
	text-indent:-.25in;}
@list l3:level5
	{mso-level-tab-stop:2.5in;
	mso-level-number-position:left;
	text-indent:-.25in;}
@list l3:level6
	{mso-level-tab-stop:3.0in;
	mso-level-number-position:left;
	text-indent:-.25in;}
@list l3:level7
	{mso-level-tab-stop:3.5in;
	mso-level-number-position:left;
	text-indent:-.25in;}
@list l3:level8
	{mso-level-tab-stop:4.0in;
	mso-level-number-position:left;
	text-indent:-.25in;}
@list l3:level9
	{mso-level-tab-stop:4.5in;
	mso-level-number-position:left;
	text-indent:-.25in;}
@list l4
	{mso-list-id:525681959;
	mso-list-type:hybrid;
	mso-list-template-ids:1247553976 67698689 67698691 67698693 67698689 67698691 67698693 67698689 67698691 67698693;}
@list l4:level1
	{mso-level-number-format:bullet;
	mso-level-text:\F0B7;
	mso-level-tab-stop:.5in;
	mso-level-number-position:left;
	text-indent:-.25in;
	font-family:Symbol;}
@list l4:level2
	{mso-level-tab-stop:1.0in;
	mso-level-number-position:left;
	text-indent:-.25in;}
@list l4:level3
	{mso-level-tab-stop:1.5in;
	mso-level-number-position:left;
	text-indent:-.25in;}
@list l4:level4
	{mso-level-tab-stop:2.0in;
	mso-level-number-position:left;
	text-indent:-.25in;}
@list l4:level5
	{mso-level-tab-stop:2.5in;
	mso-level-number-position:left;
	text-indent:-.25in;}
@list l4:level6
	{mso-level-tab-stop:3.0in;
	mso-level-number-position:left;
	text-indent:-.25in;}
@list l4:level7
	{mso-level-tab-stop:3.5in;
	mso-level-number-position:left;
	text-indent:-.25in;}
@list l4:level8
	{mso-level-tab-stop:4.0in;
	mso-level-number-position:left;
	text-indent:-.25in;}
@list l4:level9
	{mso-level-tab-stop:4.5in;
	mso-level-number-position:left;
	text-indent:-.25in;}
@list l5
	{mso-list-id:675807698;
	mso-list-template-ids:509407456;}
@list l5:level1
	{mso-level-number-format:bullet;
	mso-level-text:\F0B7;
	mso-level-tab-stop:.5in;
	mso-level-number-position:left;
	text-indent:-.25in;
	mso-ansi-font-size:10.0pt;
	font-family:Symbol;}
@list l6
	{mso-list-id:921598205;
	mso-list-type:hybrid;
	mso-list-template-ids:-935423186 67698689 67698691 67698693 67698689 67698691 67698693 67698689 67698691 67698693;}
@list l6:level1
	{mso-level-number-format:bullet;
	mso-level-text:\F0B7;
	mso-level-tab-stop:.25in;
	mso-level-number-position:left;
	margin-left:.25in;
	text-indent:-.25in;
	font-family:Symbol;}
@list l6:level2
	{mso-level-tab-stop:1.0in;
	mso-level-number-position:left;
	text-indent:-.25in;}
@list l6:level3
	{mso-level-tab-stop:1.5in;
	mso-level-number-position:left;
	text-indent:-.25in;}
@list l6:level4
	{mso-level-tab-stop:2.0in;
	mso-level-number-position:left;
	text-indent:-.25in;}
@list l6:level5
	{mso-level-tab-stop:2.5in;
	mso-level-number-position:left;
	text-indent:-.25in;}
@list l6:level6
	{mso-level-tab-stop:3.0in;
	mso-level-number-position:left;
	text-indent:-.25in;}
@list l6:level7
	{mso-level-tab-stop:3.5in;
	mso-level-number-position:left;
	text-indent:-.25in;}
@list l6:level8
	{mso-level-tab-stop:4.0in;
	mso-level-number-position:left;
	text-indent:-.25in;}
@list l6:level9
	{mso-level-tab-stop:4.5in;
	mso-level-number-position:left;
	text-indent:-.25in;}
@list l7
	{mso-list-id:1456368974;
	mso-list-type:hybrid;
	mso-list-template-ids:1221648306 67698689 67698691 67698693 67698689 67698691 67698693 67698689 67698691 67698693;}
@list l7:level1
	{mso-level-number-format:bullet;
	mso-level-text:\F0B7;
	mso-level-tab-stop:.5in;
	mso-level-number-position:left;
	text-indent:-.25in;
	font-family:Symbol;}
@list l7:level2
	{mso-level-tab-stop:1.0in;
	mso-level-number-position:left;
	text-indent:-.25in;}
@list l7:level3
	{mso-level-tab-stop:1.5in;
	mso-level-number-position:left;
	text-indent:-.25in;}
@list l7:level4
	{mso-level-tab-stop:2.0in;
	mso-level-number-position:left;
	text-indent:-.25in;}
@list l7:level5
	{mso-level-tab-stop:2.5in;
	mso-level-number-position:left;
	text-indent:-.25in;}
@list l7:level6
	{mso-level-tab-stop:3.0in;
	mso-level-number-position:left;
	text-indent:-.25in;}
@list l7:level7
	{mso-level-tab-stop:3.5in;
	mso-level-number-position:left;
	text-indent:-.25in;}
@list l7:level8
	{mso-level-tab-stop:4.0in;
	mso-level-number-position:left;
	text-indent:-.25in;}
@list l7:level9
	{mso-level-tab-stop:4.5in;
	mso-level-number-position:left;
	text-indent:-.25in;}
@list l8
	{mso-list-id:1764836631;
	mso-list-type:hybrid;
	mso-list-template-ids:-1775992964 67698703 67698713 67698715 67698703 67698713 67698715 67698703 67698713 67698715;}
@list l8:level1
	{mso-level-tab-stop:.5in;
	mso-level-number-position:left;
	text-indent:-.25in;}
@list l8:level2
	{mso-level-tab-stop:1.0in;
	mso-level-number-position:left;
	text-indent:-.25in;}
@list l8:level3
	{mso-level-tab-stop:1.5in;
	mso-level-number-position:left;
	text-indent:-.25in;}
@list l8:level4
	{mso-level-tab-stop:2.0in;
	mso-level-number-position:left;
	text-indent:-.25in;}
@list l8:level5
	{mso-level-tab-stop:2.5in;
	mso-level-number-position:left;
	text-indent:-.25in;}
@list l8:level6
	{mso-level-tab-stop:3.0in;
	mso-level-number-position:left;
	text-indent:-.25in;}
@list l8:level7
	{mso-level-tab-stop:3.5in;
	mso-level-number-position:left;
	text-indent:-.25in;}
@list l8:level8
	{mso-level-tab-stop:4.0in;
	mso-level-number-position:left;
	text-indent:-.25in;}
@list l8:level9
	{mso-level-tab-stop:4.5in;
	mso-level-number-position:left;
	text-indent:-.25in;}
ol
	{margin-bottom:0in;}
ul
	{margin-bottom:0in;}
-->
</style>
<!--[if gte mso 10]>
<style>
 /* Style Definitions */
 table.MsoNormalTable
	{mso-style-name:"Table Normal";
	mso-tstyle-rowband-size:0;
	mso-tstyle-colband-size:0;
	mso-style-noshow:yes;
	mso-style-parent:"";
	mso-padding-alt:0in 5.4pt 0in 5.4pt;
	mso-para-margin:0in;
	mso-para-margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:10.0pt;
	font-family:"Times New Roman";}
table.MsoTableGrid
	{mso-style-name:"Table Grid";
	mso-tstyle-rowband-size:0;
	mso-tstyle-colband-size:0;
	border:solid windowtext 1.0pt;
	mso-border-alt:solid windowtext .5pt;
	mso-padding-alt:0in 5.4pt 0in 5.4pt;
	mso-border-insideh:.5pt solid windowtext;
	mso-border-insidev:.5pt solid windowtext;
	mso-para-margin:0in;
	mso-para-margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:10.0pt;
	font-family:"Times New Roman";}
</style>
<![endif]--><!--[if gte mso 9]><xml>
 <w:LatentStyles DefLockedState="false" LatentStyleCount="156">  </w:LatentStyles>
</xml><![endif]-->
</head>

<body lang=EN-US link=blue vlink=purple style='tab-interval:.5in'>

<div class=Section1>

<h1 align=center style='text-align:center'>The Compiler Generator Coco/R <span
class=GramE>For</span> Python</h1>

<h2 align=center style='text-align:center'>User Manual</h2>

<h3 align=center style='text-align:center'>Ronald H Longo</h3>

<h3 align=center style='text-align:center'><span style='mso-bidi-font-weight:
normal'>November 2007<o:p></o:p></span></h3>

<p class=MsoNormal><o:p>&nbsp;</o:p></p>

<p class=MsoNormal align=center style='text-align:center;mso-outline-level:
1;mso-layout-grid-align:none;text-autospace:none'><span style='font-size:11.5pt;
font-family:Times-Roman;mso-bidi-font-family:Times-Roman;color:black'>Original
Document By<o:p></o:p></span></p>

<p class=MsoNormal align=center style='text-align:center;mso-outline-level:
1;mso-layout-grid-align:none;text-autospace:none'><span class=SpellE><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>Hanspeter</span></span><span style='font-size:11.5pt;font-family:
Times-Roman;mso-bidi-font-family:Times-Roman;color:black'> <span class=SpellE>Mössenböck</span><o:p></o:p></span></p>

<p class=MsoNormal align=center style='text-align:center;mso-layout-grid-align:
none;text-autospace:none'><st1:place st="on"><st1:PlaceName st="on"><span
  style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
  color:black'>Johannes</span></st1:PlaceName><span style='font-size:11.5pt;
 font-family:Times-Roman;mso-bidi-font-family:Times-Roman;color:black'> </span><st1:PlaceName
 st="on"><span class=SpellE><span style='font-size:11.5pt;font-family:Times-Roman;
  mso-bidi-font-family:Times-Roman;color:black'>Kepler</span></span></st1:PlaceName><span
 style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
 color:black'> </span><st1:PlaceType st="on"><span style='font-size:11.5pt;
  font-family:Times-Roman;mso-bidi-font-family:Times-Roman;color:black'>University</span></st1:PlaceType></st1:place><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'> </span><st1:City st="on"><st1:place st="on"><span class=SpellE><span
  style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
  color:black'>Linz</span></span></st1:place></st1:City><span style='font-size:
11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;color:black'><o:p></o:p></span></p>

<p class=MsoNormal align=center style='text-align:center;mso-layout-grid-align:
none;text-autospace:none'><st1:place st="on"><st1:PlaceType st="on"><span
  style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
  color:black'>Institute</span></st1:PlaceType><span style='font-size:11.5pt;
 font-family:Times-Roman;mso-bidi-font-family:Times-Roman;color:black'> of </span><st1:PlaceName
 st="on"><span style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:
  Times-Roman;color:black'>System</span></st1:PlaceName></st1:place><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'> Software<o:p></o:p></span></p>

<p class=MsoNormal align=center style='text-align:center;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:11.5pt;font-family:Times-Roman;
mso-bidi-font-family:Times-Roman;color:black'>June 2004<o:p></o:p></span></p>

<p class=MsoNormal align=center style='text-align:center;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:11.5pt;font-family:Times-Roman;
mso-bidi-font-family:Times-Roman;color:black'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.5in;margin-bottom:0in;
margin-left:.5in;margin-bottom:.0001pt;mso-layout-grid-align:none;text-autospace:
none'><span style='font-size:10.0pt;color:black'>Coco/R (Coco/R stands for <i>compiler
<span class=SpellE>compiler</span> </i>generating <i>recursive descent </i><span
class=GramE>parsers )</span> is a compiler generator, which takes an attributed
grammar of a source language<o:p></o:p></span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.5in;margin-bottom:0in;
margin-left:.5in;margin-bottom:.0001pt;mso-layout-grid-align:none;text-autospace:
none'><span class=GramE><span style='font-size:10.0pt;color:black'>and</span></span><span
style='font-size:10.0pt;color:black'> generates a scanner and a parser for this
language. The scanner works as a deterministic finite automaton. The parser
uses recursive descent. <span class=GramE>LL(</span>1) conflicts can be<o:p></o:p></span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.5in;margin-bottom:0in;
margin-left:.5in;margin-bottom:.0001pt;mso-layout-grid-align:none;text-autospace:
none'><span class=GramE><span style='font-size:10.0pt;color:black'>resolved</span></span><span
style='font-size:10.0pt;color:black'> by a multi-symbol lookahead or by
semantic checks. Thus the class of accepted grammars is <span class=GramE>LL(</span><i>k</i>)
for an arbitrary <i>k</i>.<o:p></o:p></span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.5in;margin-bottom:0in;
margin-left:.5in;margin-bottom:.0001pt;mso-layout-grid-align:none;text-autospace:
none'><span style='font-size:10.0pt;color:black'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.5in;margin-bottom:0in;
margin-left:.5in;margin-bottom:.0001pt;mso-layout-grid-align:none;text-autospace:
none'><span style='font-size:10.0pt;color:black'>There are versions of Coco/R
for Java, C#, C++, </span><st1:place><span style='font-size:10.0pt;color:black'>Delphi</span></st1:place><span
style='font-size:10.0pt;color:black'>, Modula-2, Oberon and other languages.
This manual describes the version for Python implemented by Ron Longo<o:p></o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:10.0pt;color:black'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:10.0pt;color:black'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:10.0pt;color:black'>Compiler Generator Coco/R,<o:p></o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:10.0pt;color:black'>Copyright © 1990, 2004 <span class=SpellE>Hanspeter</span>
<span class=SpellE>Mössenböck</span>, </span><st1:place st="on"><st1:PlaceType
 st="on"><span style='font-size:10.0pt;color:black'>University</span></st1:PlaceType><span
 style='font-size:10.0pt;color:black'> of </span><st1:PlaceName st="on"><span
  class=SpellE><span style='font-size:10.0pt;color:black'>Linz</span></span></st1:PlaceName></st1:place><span
style='font-size:10.0pt;color:black'><o:p></o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:10.0pt;color:black'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:10.0pt;color:black'>This program is free software; you can
redistribute it and/or modify it under the terms of the GNU General Public
License as published by the Free Software Foundation; either version 2, or (at
your option) any later version.<o:p></o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:10.0pt;color:black'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:10.0pt;color:black'>This program is distributed in the hope
that it will be useful, but WITHOUT ANY WARRANTY; without even the implied
warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
General Public License for more details.<o:p></o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:10.0pt;color:black'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:10.0pt;color:black'>You should have received a copy of the GNU
General Public License along with this program; if not, write to the Free
Software Foundation, Inc., </span><st1:Street st="on"><st1:address st="on"><span
  style='font-size:10.0pt;color:black'>59 Temple Place</span></st1:address></st1:Street><span
style='font-size:10.0pt;color:black'> - </span><st1:address st="on"><st1:Street
 st="on"><span style='font-size:10.0pt;color:black'>Suite</span></st1:Street><span
 style='font-size:10.0pt;color:black'> 330</span></st1:address><span
style='font-size:10.0pt;color:black'>, </span><st1:place st="on"><st1:City
 st="on"><span style='font-size:10.0pt;color:black'>Boston</span></st1:City><span
 style='font-size:10.0pt;color:black'>, </span><st1:State st="on"><span
  style='font-size:10.0pt;color:black'>MA</span></st1:State><span
 style='font-size:10.0pt;color:black'> </span><st1:PostalCode st="on"><span
  style='font-size:10.0pt;color:black'>02111-1307</span></st1:PostalCode><span
 style='font-size:10.0pt;color:black'>, </span><st1:country-region st="on"><span
  style='font-size:10.0pt;color:black'>USA</span></st1:country-region></st1:place><span
style='font-size:10.0pt;color:black'>.<o:p></o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:10.0pt;color:black'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:10.0pt;color:black'>As an exception, it is allowed to write an
extension of Coco/R that is used as a <span class=SpellE>plugin</span> in
non-free software.<o:p></o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:10.0pt;color:black'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:10.0pt;color:black'>If not otherwise stated, any source code
generated by Coco/R (other than Coco/R itself) does not fall under the GNU
General Public License.<o:p></o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:10.0pt;color:black'><o:p>&nbsp;</o:p></span></p>

<span style='font-size:11.5pt;font-family:Times-Roman;mso-fareast-font-family:
"Times New Roman";mso-bidi-font-family:Times-Roman;color:black;mso-ansi-language:
EN-US;mso-fareast-language:EN-US;mso-bidi-language:AR-SA'><br clear=all
style='mso-special-character:line-break;page-break-before:always'>
</span>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'><o:p>&nbsp;</o:p></span></p>

<h1>1. Overview</h1>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>Coco/R is a compiler generator, which takes an attributed grammar
for a source language and generates a scanner and a recursive descent parser
for this language. The user supplies a main class that calls the parser as well
as semantic classes </span><span style='font-size:11.5pt;font-family:Times-Roman;
mso-bidi-font-family:Times-Roman'>(e.g. a symbol table handler and a code
generator<span style='color:black'>) that are used by semantic actions in the
parser specification.<o:p></o:p></span></span></p>

<h2>1.1 Sample Production</h2>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>In order to give you an idea of what attributed grammars look like
in Coco/R, let us look at a sample production for variable declarations in a
Pascal-like language.<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in 1.5in 2.0in 3.0in'><span
class=SpellE><b style='mso-bidi-font-weight:normal'><span style='font-size:
9.0pt;font-family:Courier'>VarDeclaration</span></b></span><span
style='font-size:9.0pt;font-family:Courier'>&lt;<span class=SpellE>addr</span>&gt;
=<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in 1.5in 2.0in 3.0in'><span
style='font-size:9.0pt;font-family:Courier'><span style='mso-tab-count:1'>       </span><span
class=SpellE><b style='mso-bidi-font-weight:normal'>Ident</b></span>&lt;out
name&gt;<span style='mso-tab-count:1'>            </span>(. X = <span
class=SpellE><span class=GramE>symTab.enter</span></span><span class=GramE>(</span>name)<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in 1.5in 2.0in 3.0in'><span
style='font-size:9.0pt;font-family:Courier'><span style='mso-tab-count:4'>                                  </span><span
style='mso-spacerun:yes'>   </span>n = <span class=GramE>1 .)</span><o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in 1.5in 2.0in 3.0in'><span
style='font-size:9.0pt;font-family:Courier'><span style='mso-tab-count:1'>       </span><span
class=GramE>{ ‘</span>,’ <span class=SpellE><b style='mso-bidi-font-weight:
normal'>Ident</b></span>&lt;out name&gt;<span style='mso-tab-count:1'>      </span>(.
Y = <span class=SpellE><span class=GramE>symTab.enter</span></span><span
class=GramE>(</span>name)<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in 1.5in 2.0in 3.0in'><span
style='font-size:9.0pt;font-family:Courier'><span style='mso-tab-count:4'>                                  </span><span
style='mso-spacerun:yes'>   </span><span class=SpellE>x.next</span> = y<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in 1.5in 2.0in 3.0in'><span
style='font-size:9.0pt;font-family:Courier'><span style='mso-tab-count:4'>                                  </span><span
style='mso-spacerun:yes'>   </span>x = y<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in 1.5in 2.0in 3.0in'><span
style='font-size:9.0pt;font-family:Courier'><span style='mso-tab-count:4'>                                  </span><span
style='mso-spacerun:yes'>   </span>n += <span class=GramE>1 .)</span><o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in 1.5in 2.0in 3.0in'><span
style='font-size:9.0pt;font-family:Courier'><span style='mso-tab-count:1'>       </span>}<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in 1.5in 2.0in 3.0in'><span
style='font-size:9.0pt;font-family:Courier'><span style='mso-tab-count:1'>       </span>‘:’
<b style='mso-bidi-font-weight:normal'>Type</b>&lt;out <span class=SpellE>typ</span>&gt;<span
style='mso-tab-count:1'>          </span>(. <span class=SpellE>addr</span> += n
* <span class=SpellE>typ.size</span><o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in 1.5in 2.0in 3.0in'><span
style='font-size:9.0pt;font-family:Courier'><span style='mso-tab-count:4'>                                  </span><span
style='mso-spacerun:yes'>   </span>a = <span class=SpellE>addr</span><o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in 1.5in 2.0in 3.0in'><span
style='font-size:9.0pt;font-family:Courier'><span style='mso-tab-count:4'>                                  </span><span
style='mso-spacerun:yes'>   </span><span class=GramE>while</span> x is not
None:<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in 1.5in 2.0in 3.0in'><span
style='font-size:9.0pt;font-family:Courier'><span style='mso-tab-count:4'>                                  </span><span
style='mso-spacerun:yes'>   </span><span style='mso-tab-count:1'>    </span>a
-= <span class=SpellE>typ.size</span><o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in 1.5in 2.0in 3.0in'><span
style='font-size:9.0pt;font-family:Courier'><span style='mso-tab-count:5'>                                         </span><span
class=SpellE>x.adr</span> = a<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in 1.5in 2.0in 3.0in'><span
style='font-size:9.0pt;font-family:Courier'><span style='mso-tab-count:5'>                                         </span>x
= <span class=SpellE>x.next</span><o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in 1.5in 2.0in 3.0in'><span
style='font-size:9.0pt;font-family:Courier'><span style='mso-tab-count:1'>       </span>‘;’
.<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in 1.5in 2.0in 3.0in'><span
style='font-size:9.0pt;font-family:Courier'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal style='mso-outline-level:1;mso-layout-grid-align:none;
text-autospace:none'><span style='font-size:11.5pt;font-family:Times-Roman;
mso-bidi-font-family:Times-Roman;color:black'>The core of this specification is
the </span><i><span style='font-size:11.5pt;font-family:Times-Italic;
mso-bidi-font-family:Times-Italic;color:black'>EBNF production</span></i><span
style='font-size:11.5pt;font-family:Times-Italic;mso-bidi-font-family:Times-Italic;
color:black;mso-bidi-font-style:italic'> on the left.<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;mso-layout-grid-align:none;
text-autospace:none'><span class=SpellE><b style='mso-bidi-font-weight:normal'><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier;
color:black'>VarDeclaration</span></b></span><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier;color:black'> = <span
class=SpellE><b style='mso-bidi-font-weight:normal'>Ident</b></span> { ',' <span
class=GramE><b style='mso-bidi-font-weight:normal'>Ident</b> }</span> ':' <b
style='mso-bidi-font-weight:normal'>Type</b> ';'.<o:p></o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>It is augmented with attributes and semantic actions. The </span><i><span
style='font-size:11.5pt;font-family:Times-Italic;mso-bidi-font-family:Times-Italic;
color:black'>attributes </span></i><span style='font-size:11.5pt;font-family:
Times-Roman;mso-bidi-font-family:Times-Roman;color:black'>(e.g. </span><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier;
color:black'>&lt;out name&gt;</span><span style='font-size:11.5pt;font-family:
Times-Roman;mso-bidi-font-family:Times-Roman;color:black'>) specify the
parameters of the symbols. There are input attributes (e.g. </span><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier;
color:black'>&lt;x, y&gt;</span><span style='font-size:11.5pt;font-family:Times-Roman;
mso-bidi-font-family:Times-Roman;color:black'>) and output <span class=GramE>attributes
<span style='mso-spacerun:yes'> </span>(</span>e.g. </span><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier;
color:black'>&lt;out z&gt; </span><span style='font-size:11.5pt;font-family:
Times-Roman;mso-bidi-font-family:Times-Roman;color:black'>or </span><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier;
color:black'>&lt;^z&gt;</span><span style='font-size:11.5pt;font-family:Times-Roman;
mso-bidi-font-family:Times-Roman;color:black'>). A </span><i><span
style='font-size:11.5pt;font-family:Times-Italic;mso-bidi-font-family:Times-Italic;
color:black'>semantic action </span></i><span style='font-size:11.5pt;
font-family:Times-Roman;mso-bidi-font-family:Times-Roman;color:black'>is a
piece of code that is written in Python and is executed by the generated parser
at its position in the production.<o:p></o:p></span></p>

<i style='mso-bidi-font-style:normal'><span style='font-size:14.0pt;font-family:
Arial;mso-fareast-font-family:"Times New Roman";mso-ansi-language:EN-US;
mso-fareast-language:EN-US;mso-bidi-language:AR-SA'><br clear=all
style='page-break-before:always'>
</span></i>

<h2>1.2 Sample Parsing Method</h2>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>Every production is translated </span><span style='font-size:11.5pt;
font-family:Times-Roman;mso-bidi-font-family:Times-Roman'>by Coco/R<span
style='color:red'> </span><span style='color:black'>into a parsing method. The
method for </span></span><span class=SpellE><b style='mso-bidi-font-weight:
normal'><span style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:
Courier'>VarDeclaration</span></b></span><span style='font-size:11.5pt;
font-family:Times-Roman;mso-bidi-font-family:Times-Roman;color:black'>, for
example, looks like this in Python (Parts generated by Coco/R are in blue):<o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:.5in;tab-stops:.75in 1.0in 1.25in 1.5in;
mso-layout-grid-align:none;text-autospace:none'><b style='mso-bidi-font-weight:
normal'><span style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:
Courier;color:blue'>@<span class=SpellE>staticmethod</span><o:p></o:p></span></b></p>

<p class=MsoNormal style='margin-left:.5in;tab-stops:.75in 1.0in 1.25in 1.5in;
mso-layout-grid-align:none;text-autospace:none'><span class=GramE><b
style='mso-bidi-font-weight:normal'><span style='font-size:8.5pt;font-family:
Courier;mso-bidi-font-family:Courier;color:blue'>def</span></b></span><b
style='mso-bidi-font-weight:normal'><span style='font-size:8.5pt;font-family:
Courier;mso-bidi-font-family:Courier;color:blue'> <span class=SpellE>VarDeclaration</span>(
<span class=SpellE>adr</span> ):<o:p></o:p></span></b></p>

<p class=MsoNormal style='margin-left:.5in;tab-stops:.75in 1.0in 1.25in 1.5in;
mso-layout-grid-align:none;text-autospace:none'><b style='mso-bidi-font-weight:
normal'><span style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:
Courier;color:blue'><span style='mso-tab-count:1'>   </span><span class=GramE>name</span>
= <span class=SpellE>Parser.Ident</span>( )<o:p></o:p></span></b></p>

<p class=MsoNormal style='margin-left:.5in;tab-stops:.75in 1.0in 1.25in 1.5in;
mso-layout-grid-align:none;text-autospace:none'><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier'><span style='mso-tab-count:
1'>   </span>x = <span class=SpellE><span class=GramE>SymTab.Enter</span></span><span
class=GramE>(</span>name)<o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:.5in;tab-stops:.75in 1.0in 1.25in 1.5in;
mso-layout-grid-align:none;text-autospace:none'><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier'><span style='mso-tab-count:
1'>   </span>n = 1<o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:.5in;tab-stops:.75in 1.0in 1.25in 1.5in;
mso-layout-grid-align:none;text-autospace:none'><b style='mso-bidi-font-weight:
normal'><span style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:
Courier;color:blue'><span style='mso-tab-count:1'>   </span><span class=GramE>while</span>
<span class=SpellE>Parser.la.kind</span> == comma:<o:p></o:p></span></b></p>

<p class=MsoNormal style='margin-left:.5in;tab-stops:.75in 1.0in 1.25in 1.5in;
mso-layout-grid-align:none;text-autospace:none'><b style='mso-bidi-font-weight:
normal'><span style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:
Courier;color:blue'><span style='mso-tab-count:2'>       </span><span
class=SpellE><span class=GramE>Parser.Get</span></span><span class=GramE>(</span>
)<o:p></o:p></span></b></p>

<p class=MsoNormal style='margin-left:.5in;tab-stops:.75in 1.0in 1.25in 1.5in;
mso-layout-grid-align:none;text-autospace:none'><b style='mso-bidi-font-weight:
normal'><span style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:
Courier;color:blue'><span style='mso-tab-count:2'>       </span><span
class=GramE>name</span> = Ident( )<o:p></o:p></span></b></p>

<p class=MsoNormal style='margin-left:.5in;tab-stops:.75in 1.0in 1.25in 1.5in;
mso-layout-grid-align:none;text-autospace:none'><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier'><span style='mso-tab-count:
2'>       </span>y = <span class=SpellE><span class=GramE>SymTab.Enter</span></span><span
class=GramE>(</span>name)<o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:.5in;tab-stops:.75in 1.0in 1.25in 1.5in;
mso-layout-grid-align:none;text-autospace:none'><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier'><span style='mso-tab-count:
2'>       </span><span class=SpellE>x.next</span> = y<o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:.5in;tab-stops:.75in 1.0in 1.25in 1.5in;
mso-layout-grid-align:none;text-autospace:none'><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier'><span style='mso-tab-count:
2'>       </span>x = y<o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:.5in;tab-stops:.75in 1.0in 1.25in 1.5in;
mso-layout-grid-align:none;text-autospace:none'><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier'><span style='mso-tab-count:
2'>       </span>n += 1<o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:.5in;tab-stops:.75in 1.0in 1.25in 1.5in;
mso-layout-grid-align:none;text-autospace:none'><b style='mso-bidi-font-weight:
normal'><span style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:
Courier;color:blue'><span style='mso-tab-count:1'>   </span><span class=GramE>Expect(</span>
colon )<o:p></o:p></span></b></p>

<p class=MsoNormal style='margin-left:.5in;tab-stops:.75in 1.0in 1.25in 1.5in;
mso-layout-grid-align:none;text-autospace:none'><b style='mso-bidi-font-weight:
normal'><span style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:
Courier;color:blue'><span style='mso-tab-count:1'>   </span><span class=SpellE>Typ</span>
= <span class=SpellE><span class=GramE>Parser.Type</span></span><span
class=GramE>(</span><span class=SpellE>typ</span>)<o:p></o:p></span></b></p>

<p class=MsoNormal style='margin-left:.5in;tab-stops:.75in 1.0in 1.25in 1.5in;
mso-layout-grid-align:none;text-autospace:none'><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier'><span style='mso-tab-count:
1'>   </span><span class=SpellE><span class=GramE>adr</span></span> += n * <span
class=SpellE>typ.size</span><o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:.5in;tab-stops:.75in 1.0in 1.25in 1.5in;
mso-layout-grid-align:none;text-autospace:none'><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier'><span style='mso-tab-count:
1'>   </span>a = <span class=SpellE>adr</span><o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:.5in;tab-stops:.75in 1.0in 1.25in 1.5in;
mso-layout-grid-align:none;text-autospace:none'><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier'><span style='mso-tab-count:
1'>   </span><span class=GramE>while</span> x is not None:<o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:.5in;tab-stops:.75in 1.0in 1.25in 1.5in;
mso-layout-grid-align:none;text-autospace:none'><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier'><span style='mso-tab-count:
2'>       </span>a -= <span class=SpellE>typ.size</span><o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:.5in;tab-stops:.75in 1.0in 1.25in 1.5in;
mso-layout-grid-align:none;text-autospace:none'><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier'><span style='mso-tab-count:
2'>       </span><span class=SpellE>x.adr</span> = a<o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:.5in;tab-stops:.75in 1.0in 1.25in 1.5in;
mso-layout-grid-align:none;text-autospace:none'><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier'><span style='mso-tab-count:
2'>       </span>x = <span class=SpellE>x.next</span><o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:.5in;tab-stops:.75in 1.0in 1.25in 1.5in;
mso-layout-grid-align:none;text-autospace:none'><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier;color:blue'><span
style='mso-tab-count:1'>   </span><span class=GramE>Expect(</span>semicolon)<o:p></o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>Coco/R also generates a scanner that reads the input stream and
returns a stream of tokens to the parser.<o:p></o:p></span></p>

<h2>1.3 Summary of Features</h2>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><i><span
style='font-size:11.5pt;font-family:Times-Italic;mso-bidi-font-family:Times-Italic;
color:black'>Scanner<o:p></o:p></span></i></p>

<p class=MsoNormal style='margin-left:.25in;text-indent:-.25in;mso-list:l2 level1 lfo2;
tab-stops:list .5in;mso-layout-grid-align:none;text-autospace:none'><![if !supportLists]><span
style='font-size:11.5pt;font-family:Symbol;mso-fareast-font-family:Symbol;
mso-bidi-font-family:Symbol;color:black'><span style='mso-list:Ignore'>·<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></span><![endif]><span style='font-size:11.5pt;font-family:Times-Roman;
mso-bidi-font-family:Times-Roman;color:black'>The scanner is specified by a
list of token declarations. Literals (e.g. </span><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier;color:black'>&quot;if&quot; </span><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>or </span><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'>&quot;while&quot;</span><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>) do not have to be </span><span style='font-size:11.5pt;
font-family:Times-Roman;mso-bidi-font-family:Times-Roman'>explicitly<span
style='color:red'> </span><span style='color:black'>declared as tokens, but can
be used directly in the productions of the grammar.<o:p></o:p></span></span></p>

<p class=MsoNormal style='margin-left:.25in;text-indent:-.25in;mso-list:l2 level1 lfo2;
tab-stops:list .5in;mso-layout-grid-align:none;text-autospace:none'><![if !supportLists]><span
style='font-size:11.5pt;font-family:Symbol;mso-fareast-font-family:Symbol;
mso-bidi-font-family:Symbol;color:black'><span style='mso-list:Ignore'>·<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></span><![endif]><span style='font-size:11.5pt;font-family:Times-Roman;
mso-bidi-font-family:Times-Roman;color:black'>The scanner is implemented as a
deterministic finite automaton (DFA). Therefore the terminal symbols (or
tokens) have to be described by a regular EBNF grammar.<o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:.25in;text-indent:-.25in;mso-list:l2 level1 lfo2;
tab-stops:list .5in;mso-layout-grid-align:none;text-autospace:none'><![if !supportLists]><span
style='font-size:11.5pt;font-family:Symbol;mso-fareast-font-family:Symbol;
mso-bidi-font-family:Symbol'><span style='mso-list:Ignore'>·<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></span><![endif]><span style='font-size:11.5pt;font-family:Times-Roman;
mso-bidi-font-family:Times-Roman'>One can specify one or more kinds of comments
that a scanner will ignore. Provision is made for allowing comments to be
nested.<o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:.25in;text-indent:-.25in;mso-list:l2 level1 lfo2;
tab-stops:list .5in;mso-layout-grid-align:none;text-autospace:none'><![if !supportLists]><span
style='font-size:11.5pt;font-family:Symbol;mso-fareast-font-family:Symbol;
mso-bidi-font-family:Symbol;color:black'><span style='mso-list:Ignore'>·<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></span><![endif]><span style='font-size:11.5pt;font-family:Times-Roman;
mso-bidi-font-family:Times-Roman;color:black'>Tokens must be made up of
characters from the extended ASCII set (i.e. 256 values).<o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:.25in;text-indent:-.25in;mso-list:l2 level1 lfo2;
tab-stops:list .5in;mso-layout-grid-align:none;text-autospace:none'><![if !supportLists]><span
style='font-size:11.5pt;font-family:Symbol;mso-fareast-font-family:Symbol;
mso-bidi-font-family:Symbol;color:black'><span style='mso-list:Ignore'>·<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></span><![endif]><span style='font-size:11.5pt;font-family:Times-Roman;
mso-bidi-font-family:Times-Roman;color:black'>The scanner can be made
case-sensitive or case-insensitive.<o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:.25in;text-indent:-.25in;mso-list:l2 level1 lfo2;
tab-stops:list .5in;mso-layout-grid-align:none;text-autospace:none'><![if !supportLists]><span
style='font-size:11.5pt;font-family:Symbol;mso-fareast-font-family:Symbol;
mso-bidi-font-family:Symbol'><span style='mso-list:Ignore'>·<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></span><![endif]><span style='font-size:11.5pt;font-family:Times-Roman;
mso-bidi-font-family:Times-Roman'>The scanner can recognize tokens that are
distinguishable only on their context in the input stream.<o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:.25in;text-indent:-.25in;mso-list:l2 level1 lfo2;
tab-stops:list .5in;mso-layout-grid-align:none;text-autospace:none'><![if !supportLists]><span
style='font-size:11.5pt;font-family:Symbol;mso-fareast-font-family:Symbol;
mso-bidi-font-family:Symbol'><span style='mso-list:Ignore'>·<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></span><![endif]><span style='font-size:11.5pt;font-family:Times-Roman;
mso-bidi-font-family:Times-Roman;color:black'>The scanner can read from any
input stream (not just from a file). However, all</span><span style='font-size:
11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman'> <span
style='color:black'>input must come from a single stream (no includes).</span><o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:.25in;text-indent:-.25in;mso-list:l2 level1 lfo2;
tab-stops:list .5in;mso-layout-grid-align:none;text-autospace:none'><![if !supportLists]><span
style='font-size:11.5pt;font-family:Symbol;mso-fareast-font-family:Symbol;
mso-bidi-font-family:Symbol'><span style='mso-list:Ignore'>·<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></span><![endif]><span style='font-size:11.5pt;font-family:Times-Roman;
mso-bidi-font-family:Times-Roman;color:black'>The scanner can handle so-called </span><i><span
style='font-size:11.5pt;font-family:Times-Italic;mso-bidi-font-family:Times-Italic;
color:black'>pragmas</span></i><span style='font-size:11.5pt;font-family:Times-Roman;
mso-bidi-font-family:Times-Roman;color:black'>, which are tokens that are not
part of the</span><span style='font-size:11.5pt;font-family:Times-Roman;
mso-bidi-font-family:Times-Roman'> <span style='color:black'>syntax but can
occur anywhere in the input stream (e.g. compiler directives or end-of-line
characters).</span><o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:.25in;text-indent:-.25in;mso-list:l2 level1 lfo2;
tab-stops:list .5in;mso-layout-grid-align:none;text-autospace:none'><![if !supportLists]><span
style='font-size:11.5pt;font-family:Symbol;mso-fareast-font-family:Symbol;
mso-bidi-font-family:Symbol'><span style='mso-list:Ignore'>·<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></span><![endif]><span style='font-size:11.5pt;font-family:Times-Roman;
mso-bidi-font-family:Times-Roman;color:black'>The user can suppress the
generation of a scanner and can provide a hand-written</span><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman'>
<span style='color:black'>scanner instead.</span><o:p></o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><i><span
style='font-size:11.5pt;font-family:Times-Italic;mso-bidi-font-family:Times-Italic;
color:black'>Parser<o:p></o:p></span></i></p>

<p class=MsoNormal style='margin-left:.25in;text-indent:-.25in;mso-list:l6 level1 lfo4;
tab-stops:list .25in;mso-layout-grid-align:none;text-autospace:none'><![if !supportLists]><span
style='font-size:11.5pt;font-family:Symbol;mso-fareast-font-family:Symbol;
mso-bidi-font-family:Symbol;color:black'><span style='mso-list:Ignore'>·<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></span><![endif]><span style='font-size:11.5pt;font-family:Times-Roman;
mso-bidi-font-family:Times-Roman;color:black'>The parser is specified by a set
of EBNF productions with attributes and semantic actions. The productions allow
for alternatives, repetition and optional parts.<span
style='mso-spacerun:yes'>  </span>Coco/R translates the productions into a recursive
descent parser which is small and efficient.<o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:.25in;text-indent:-.25in;mso-list:l6 level1 lfo4;
tab-stops:list .25in;mso-layout-grid-align:none;text-autospace:none'><![if !supportLists]><span
style='font-size:11.5pt;font-family:Symbol;mso-fareast-font-family:Symbol;
mso-bidi-font-family:Symbol;color:black'><span style='mso-list:Ignore'>·<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></span><![endif]><span style='font-size:11.5pt;font-family:Times-Roman;
mso-bidi-font-family:Times-Roman;color:black'>Nonterminal symbols can have any
number of input attributes and one optional output attribute. Terminal symbols
do not have explicit attributes, but the tokens returned by the scanner contain
information that can be viewed as attribute. All attributes are evaluated
during parsing (i.e. the grammar is processed as an L attributed grammar). <o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:.25in;text-indent:-.25in;mso-list:l6 level1 lfo4;
tab-stops:list .25in;mso-layout-grid-align:none;text-autospace:none'><![if !supportLists]><span
style='font-size:11.5pt;font-family:Symbol;mso-fareast-font-family:Symbol;
mso-bidi-font-family:Symbol;color:black'><span style='mso-list:Ignore'>·<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></span><![endif]><span style='font-size:11.5pt;font-family:Times-Roman;
mso-bidi-font-family:Times-Roman;color:black'>Semantic actions can be placed
anywhere in the grammar (not just at the end of productions). They may contain
arbitrary statements or declarations written in the language of the generated
parser (e.g. Python).<o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:.25in;text-indent:-.25in;mso-list:l6 level1 lfo4;
tab-stops:list .25in;mso-layout-grid-align:none;text-autospace:none'><![if !supportLists]><span
style='font-size:11.5pt;font-family:Symbol;mso-fareast-font-family:Symbol;
mso-bidi-font-family:Symbol;color:black'><span style='mso-list:Ignore'>·<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></span><![endif]><span style='font-size:11.5pt;font-family:Times-Roman;
mso-bidi-font-family:Times-Roman;color:black'>The special symbol ANY can be
used to denote a set of complementary tokens.<o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:.25in;text-indent:-.25in;mso-list:l6 level1 lfo4;
tab-stops:list .25in;mso-layout-grid-align:none;text-autospace:none'><![if !supportLists]><span
style='font-size:11.5pt;font-family:Symbol;mso-fareast-font-family:Symbol;
mso-bidi-font-family:Symbol;color:black'><span style='mso-list:Ignore'>·<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></span><![endif]><span style='font-size:11.5pt;font-family:Times-Roman;
mso-bidi-font-family:Times-Roman;color:black'>In principle, the grammar must be
<span class=GramE>LL(</span>1). However, Coco/R can also handle non-<span
class=GramE>LL(</span>1) grammars by using so-called </span><i><span
style='font-size:11.5pt;font-family:Times-Italic;mso-bidi-font-family:Times-Italic;
color:black'>resolvers </span></i><span style='font-size:11.5pt;font-family:
Times-Roman;mso-bidi-font-family:Times-Roman;color:black'>that make a parsing
decision based on a multi-symbol lookahead or on semantic information.<o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:.25in;text-indent:-.25in;mso-list:l6 level1 lfo4;
tab-stops:list .25in;mso-layout-grid-align:none;text-autospace:none'><![if !supportLists]><span
style='font-size:11.5pt;font-family:Symbol;mso-fareast-font-family:Symbol;
mso-bidi-font-family:Symbol;color:black'><span style='mso-list:Ignore'>·<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></span><![endif]><span style='font-size:11.5pt;font-family:Times-Roman;
mso-bidi-font-family:Times-Roman;color:black'>Every production can have its own
local variables. In addition to these, one can declare parser-wide variables or
methods, which are</span><span style='font-size:11.5pt;font-family:Times-Roman;
mso-bidi-font-family:Times-Roman'> incorporated as <span style='color:black'>fields
and methods of the parser class. Semantic actions can also access other objects
or methods from user-written classes or from library classes. Coco/R checks the
grammar for completeness, consistency and non-redundancy. It also reports <span
class=GramE>LL(</span>1) conflicts.<o:p></o:p></span></span></p>

<p class=MsoNormal style='margin-left:.25in;text-indent:-.25in;mso-list:l6 level1 lfo4;
tab-stops:list .25in;mso-layout-grid-align:none;text-autospace:none'><![if !supportLists]><span
style='font-size:11.5pt;font-family:Symbol;mso-fareast-font-family:Symbol;
mso-bidi-font-family:Symbol;color:black'><span style='mso-list:Ignore'>·<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></span><![endif]><span style='font-size:11.5pt;font-family:Times-Roman;
mso-bidi-font-family:Times-Roman;color:black'>The error messages printed by the
generated parser can be configured to conform to a user-specific format.<o:p></o:p></span></p>

<h1>2. Input Language</h1>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>This section specifies the compiler description language </span><i><span
style='font-size:11.5pt;font-family:Times-Italic;mso-bidi-font-family:Times-Italic;
color:black'>Cocol/R </span></i><span style='font-size:11.5pt;font-family:Times-Roman;
mso-bidi-font-family:Times-Roman;color:black'>that is used as the input
language for Coco/R. A compiler description consists of a set of grammar rules
that describe the lexical and syntactical structure of a language as well as
its translation to a target language.<o:p></o:p></span></p>

<h2>2.1 Vocabulary</h2>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>The basic elements of Cocol/R are identifiers, numbers,</span><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman'>
characters and strings<span style='color:black'>, which are defined as follows:<o:p></o:p></span></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:8.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;mso-layout-grid-align:none;
text-autospace:none'><span class=GramE><span style='font-size:8.5pt;font-family:
Courier;mso-bidi-font-family:Courier'>ident</span></span><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier'> =
letter { letter | digit } .<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;mso-layout-grid-align:none;
text-autospace:none'><span class=GramE><span style='font-size:8.5pt;font-family:
Courier;mso-bidi-font-family:Courier'>number</span></span><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier'> =
digit { digit } .<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;mso-layout-grid-align:none;
text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier'>string = '&quot;' {<span class=SpellE>anyButQuote|escape</span>}
'&quot;' | &quot;'&quot; {<span class=SpellE>anyButApostrophe|escape</span>}
“'&quot;.<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;mso-layout-grid-align:none;
text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier'>char = '&quot;' (<span class=SpellE>anyButQuote|escape</span>)
'&quot;' | &quot;'&quot; (<span class=SpellE>anyButApostrophe|escape</span>)
&quot;'<span class=GramE>&quot; .</span><o:p></o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>Upper case letters are distinct from lower case letters. Strings</span><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman'>
may <span style='color:black'>not extend across multiple lines.</span> Strings
and characters <span style='color:black'>may contain the following escape
sequences:<o:p></o:p></span></span></p>

<span style='font-size:11.5pt;font-family:Times-Roman;mso-fareast-font-family:
"Times New Roman";mso-bidi-font-family:Times-Roman;color:black;mso-ansi-language:
EN-US;mso-fareast-language:EN-US;mso-bidi-language:AR-SA'><br clear=all
style='page-break-before:always'>
</span>

<p class=MsoNormal style='margin-left:.5in;tab-stops:1.0in 2.0in 2.5in 3.5in 4.0in 4.5in;
mso-layout-grid-align:none;text-autospace:none'><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier'>\\<span style='mso-tab-count:
1'>     </span><span class=GramE>backslash</span><span style='mso-tab-count:
1'>     </span>\r<span style='mso-tab-count:1'>     </span>carriage return<span
style='mso-tab-count:1'>      </span>\f<span style='mso-tab-count:1'>     </span>form
feed<o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:.5in;tab-stops:1.0in 2.0in 2.5in 3.5in 4.0in 4.5in;
mso-layout-grid-align:none;text-autospace:none'><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier'>\'<span style='mso-tab-count:
1'>     </span>apostrophe<span style='mso-tab-count:1'>    </span>\n<span
style='mso-tab-count:1'>     </span>new line<span style='mso-tab-count:2'>             </span>\a<span
style='mso-tab-count:1'>     </span>bell<o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:.5in;tab-stops:1.0in 2.0in 2.5in 3.5in 4.0in 4.5in;
mso-layout-grid-align:none;text-autospace:none'><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier'>\&quot;<span
style='mso-tab-count:1'>     </span>quote<span style='mso-tab-count:1'>         </span>\t<span
style='mso-tab-count:1'>     </span>horizontal tab<span style='mso-tab-count:
1'>       </span>\b<span style='mso-tab-count:1'>     </span>backspace<o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:.5in;tab-stops:1.0in 2.0in 2.5in 3.5in 4.0in 4.5in;
mso-layout-grid-align:none;text-autospace:none'><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier'>\0<span style='mso-tab-count:
1'>     </span>null character\v<span style='mso-tab-count:1'>     </span>vertical
tab<span style='mso-tab-count:2'>         </span>\<span class=SpellE>xnn</span><span
style='mso-tab-count:1'>   </span>hex char value <span class=SpellE>nn</span><o:p></o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>The following identifiers are reserved by Coco/R:<o:p></o:p></span></p>

<table class=MsoNormalTable border=0 cellspacing=0 cellpadding=0
 style='border-collapse:collapse;mso-yfti-tbllook:480;mso-padding-alt:0in 5.4pt 0in 5.4pt'>
 <tr style='mso-yfti-irow:0;mso-yfti-firstrow:yes'>
  <td width=144 valign=top style='width:1.5in;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal style='mso-outline-level:1;mso-layout-grid-align:none;
  text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
  mso-bidi-font-family:Courier'>ANY<o:p></o:p></span></p>
  </td>
  <td width=96 valign=top style='width:1.0in;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal style='mso-outline-level:1;mso-layout-grid-align:none;
  text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
  mso-bidi-font-family:Courier'>CONTEXT<o:p></o:p></span></p>
  </td>
  <td width=96 valign=top style='width:1.0in;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal style='mso-outline-level:1;mso-layout-grid-align:none;
  text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
  mso-bidi-font-family:Courier'>IGNORE<o:p></o:p></span></p>
  </td>
  <td width=96 valign=top style='width:1.0in;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal style='mso-outline-level:1;mso-layout-grid-align:none;
  text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
  mso-bidi-font-family:Courier'>out<o:p></o:p></span></p>
  </td>
  <td width=158 valign=top style='width:1.65in;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal style='mso-outline-level:1;mso-layout-grid-align:none;
  text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
  mso-bidi-font-family:Courier'>TOKENS<o:p></o:p></span></p>
  </td>
 </tr>
 <tr style='mso-yfti-irow:1'>
  <td width=144 valign=top style='width:1.5in;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal style='mso-outline-level:1;mso-layout-grid-align:none;
  text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
  mso-bidi-font-family:Courier'>CHARACTERS<o:p></o:p></span></p>
  </td>
  <td width=96 valign=top style='width:1.0in;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal style='mso-outline-level:1;mso-layout-grid-align:none;
  text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
  mso-bidi-font-family:Courier'>END<o:p></o:p></span></p>
  </td>
  <td width=96 valign=top style='width:1.0in;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal style='mso-outline-level:1;mso-layout-grid-align:none;
  text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
  mso-bidi-font-family:Courier'>IGNORECASE<o:p></o:p></span></p>
  </td>
  <td width=96 valign=top style='width:1.0in;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal style='mso-outline-level:1;mso-layout-grid-align:none;
  text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
  mso-bidi-font-family:Courier'>PRAGMAS<o:p></o:p></span></p>
  </td>
  <td width=158 valign=top style='width:1.65in;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal style='mso-outline-level:1;mso-layout-grid-align:none;
  text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
  mso-bidi-font-family:Courier'>WEAK<o:p></o:p></span></p>
  </td>
 </tr>
 <tr style='mso-yfti-irow:2'>
  <td width=144 valign=top style='width:1.5in;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
  style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier'>CHR<o:p></o:p></span></p>
  </td>
  <td width=96 valign=top style='width:1.0in;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
  style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier'>FROM<o:p></o:p></span></p>
  </td>
  <td width=96 valign=top style='width:1.0in;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
  style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier'>import<o:p></o:p></span></p>
  </td>
  <td width=96 valign=top style='width:1.0in;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
  style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier'>PRODUCTIONS<o:p></o:p></span></p>
  </td>
  <td width=158 valign=top style='width:1.65in;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
  style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier'><o:p>&nbsp;</o:p></span></p>
  </td>
 </tr>
 <tr style='mso-yfti-irow:3'>
  <td width=144 valign=top style='width:1.5in;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
  style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier'>COMMENTS<o:p></o:p></span></p>
  </td>
  <td width=96 valign=top style='width:1.0in;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
  style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier'>from<o:p></o:p></span></p>
  </td>
  <td width=96 valign=top style='width:1.0in;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
  style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier'>NAMES<o:p></o:p></span></p>
  </td>
  <td width=96 valign=top style='width:1.0in;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
  style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier'>SYNC<o:p></o:p></span></p>
  </td>
  <td width=158 valign=top style='width:1.65in;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
  style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier'><o:p>&nbsp;</o:p></span></p>
  </td>
 </tr>
 <tr style='mso-yfti-irow:4;mso-yfti-lastrow:yes'>
  <td width=144 valign=top style='width:1.5in;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
  style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier'>COMPILER<o:p></o:p></span></p>
  </td>
  <td width=96 valign=top style='width:1.0in;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
  style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier'>IF<o:p></o:p></span></p>
  </td>
  <td width=96 valign=top style='width:1.0in;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
  style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier'>NESTED<o:p></o:p></span></p>
  </td>
  <td width=96 valign=top style='width:1.0in;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
  style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier'>TO<o:p></o:p></span></p>
  </td>
  <td width=158 valign=top style='width:1.65in;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
  style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier'><o:p>&nbsp;</o:p></span></p>
  </td>
 </tr>
</table>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>Comments are enclosed in </span><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier;color:black'>/* </span><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>and </span><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'>*/ </span><span style='font-size:
11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;color:black'>and
may be nested.<o:p></o:p></span></p>

<h2>EBNF</h2>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>All syntax descriptions in Cocol/R are written in Extended
Backus-Naur Form (EBNF) [Wirth77]. By convention, identifiers starting with a
lower case letter denote terminal <span class=GramE>symbols,</span> identifiers
starting with an upper case letter denote nonterminal symbols. Strings denote
themselves. The following meta-characters are used:<o:p></o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal style='margin-left:.5in;tab-stops:1.0in 3.0in;mso-layout-grid-align:
none;text-autospace:none'><b style='mso-bidi-font-weight:normal'><span
style='font-size:9.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>Symbol<span style='mso-tab-count:1'>   </span>meaning<span
style='mso-tab-count:1'>                                                </span>example<o:p></o:p></span></b></p>

<p class=MsoNormal style='margin-left:.5in;tab-stops:1.0in 3.0in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:9.5pt;font-family:Times-Roman;
mso-bidi-font-family:Times-Roman;color:black'>=<span style='mso-tab-count:1'>              </span>separates
the sides of a production<span style='mso-tab-count:1'>  </span>A = a b <span
class=GramE>c .</span><o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:.5in;tab-stops:1.0in 3.0in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:9.5pt;font-family:Times-Roman;
mso-bidi-font-family:Times-Roman;color:black'>.<span style='mso-tab-count:1'>               </span><span
class=GramE>terminates</span> a production<span style='mso-tab-count:1'>                      </span>A
= a b c .<o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:.5in;tab-stops:1.0in 3.0in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:9.5pt;font-family:Times-Roman;
mso-bidi-font-family:Times-Roman;color:black'>|<span style='mso-tab-count:1'>               </span>separates
alternatives<span style='mso-tab-count:1'>                         </span>a b |
c | d e means a b or c or d e<o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:.5in;tab-stops:1.0in 3.0in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:9.5pt;font-family:Times-Roman;
mso-bidi-font-family:Times-Roman;color:black'>( )<span style='mso-tab-count:
1'>            </span>groups alternatives<span style='mso-tab-count:1'>                              </span>(a
| b) c means a c or b c<o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:.5in;tab-stops:1.0in 3.0in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:9.5pt;font-family:Times-Roman;
mso-bidi-font-family:Times-Roman;color:black'>[ ]<span style='mso-tab-count:
1'>            </span>option <span style='mso-tab-count:1'>                                                   </span>[a]
b means a b or b<o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:.5in;tab-stops:1.0in 3.0in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:9.5pt;font-family:Times-Roman;
mso-bidi-font-family:Times-Roman;color:black'>{ }<span style='mso-tab-count:
1'>           </span>iteration (0 or more times)<span style='mso-tab-count:
1'>                   </span>{a} b means b or a b or a <span class=SpellE>a</span>
b <span class=GramE>or ...</span><o:p></o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>Attributes are written between </span><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier;color:black'>&lt; </span><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>and </span><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'>&gt;</span><span style='font-size:
8.5pt;font-family:Courier;mso-bidi-font-family:Courier'> </span><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman'>or
between </span><span style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:
Courier'>&lt;. </span><span class=GramE><span style='font-size:11.5pt;
font-family:Times-Roman;mso-bidi-font-family:Times-Roman'>and </span><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier'>.</span></span><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier'>&gt;</span><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman'>.
<span style='color:black'>Semantic actions are<o:p></o:p></span></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
class=GramE><span style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:
Times-Roman;color:black'>enclosed</span></span><span style='font-size:11.5pt;
font-family:Times-Roman;mso-bidi-font-family:Times-Roman;color:black'> in </span><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier;
color:black'>(. </span><span style='font-size:11.5pt;font-family:Times-Roman;
mso-bidi-font-family:Times-Roman;color:black'>and </span><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier;
color:black'>.)</span><span style='font-size:11.5pt;font-family:Times-Roman;
mso-bidi-font-family:Times-Roman;color:black'>. The operators </span><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier;
color:black'>+ </span><span style='font-size:11.5pt;font-family:Times-Roman;
mso-bidi-font-family:Times-Roman;color:black'>and </span><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier;
color:black'>- </span><span style='font-size:11.5pt;font-family:Times-Roman;
mso-bidi-font-family:Times-Roman;color:black'>are used to form character sets.<o:p></o:p></span></p>

<h2>2.2 Overall Structure</h2>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>A Cocol/R compiler description has the following structure:<o:p></o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier'>Cocol =<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier'><span style='mso-tab-count:1'>       </span><span
class=GramE>[ <span class=SpellE><i><span style='font-family:Courier-Oblique;
mso-bidi-font-family:Courier-Oblique'>pythonImportStatements</span></i></span></span></span><i><span
style='font-size:8.5pt;font-family:Courier-Oblique;mso-bidi-font-family:Courier-Oblique'>
</span></i><span style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:
Courier'>]<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier'><span style='mso-tab-count:1'>       </span>&quot;COMPILER&quot;
ident<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier'><span style='mso-tab-count:1'>       </span><span
class=GramE>[ <span class=SpellE><i><span style='font-family:Courier-Oblique;
mso-bidi-font-family:Courier-Oblique'>parserClassFieldsAndMethods</span></i></span></span></span><i><span
style='font-size:8.5pt;font-family:Courier-Oblique;mso-bidi-font-family:Courier-Oblique'>
</span></i><span style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:
Courier'>]<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier'><span style='mso-tab-count:1'>       </span><span
class=SpellE>ScannerSpecification</span><o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier'><span style='mso-tab-count:1'>       </span><span
class=SpellE>ParserSpecification</span><o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier'><span style='mso-tab-count:1'>       </span><span
class=GramE>&quot;END&quot; <span class=SpellE>ident</span> '.'</span><o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:9.0pt;font-family:Courier;
mso-bidi-font-family:Courier'><span style='mso-tab-count:1'>       </span>.<o:p></o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>The <span class=SpellE>ident</span> after the keyword </span><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier;
color:black'>COMPILER </span><span style='font-size:11.5pt;font-family:Times-Roman;
mso-bidi-font-family:Times-Roman;color:black'>is the </span><i><span
style='font-size:11.5pt;font-family:Times-Italic;mso-bidi-font-family:Times-Italic;
color:black'>grammar name </span></i><span style='font-size:11.5pt;font-family:
Times-Roman;mso-bidi-font-family:Times-Roman;color:black'>and must match the
name after the keyword </span><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'>END</span><span style='font-size:
11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;color:black'>.
The grammar name also denotes the topmost nonterminal symbol (the </span><i><span
style='font-size:11.5pt;font-family:Times-Italic;mso-bidi-font-family:Times-Italic;
color:black'>start</span></i><i><span style='font-size:11.5pt;font-family:Times-Italic;
mso-bidi-font-family:Times-Italic'> </span></i><span style='font-size:11.5pt;
font-family:Times-Roman;mso-bidi-font-family:Times-Roman'>or </span><i><span
style='font-size:11.5pt;font-family:Times-Italic;mso-bidi-font-family:Times-Italic'>goal
symbol</span></i><span style='font-size:11.5pt;font-family:Times-Roman;
mso-bidi-font-family:Times-Roman;color:black'>). The parser specification </span><b><span
style='font-size:11.5pt;font-family:Times-Bold;mso-bidi-font-family:Times-Bold;
color:black'>must </span></b><span style='font-size:11.5pt;font-family:Times-Roman;
mso-bidi-font-family:Times-Roman;color:black'>contain a production for this
symbol.<o:p></o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><b><span
style='font-size:11.5pt;font-family:Times-Bold;mso-bidi-font-family:Times-Bold;
color:black'>Python Import Statements</span></b><span style='font-size:11.5pt;
font-family:Times-Roman;mso-bidi-font-family:Times-Roman;color:black'> In front
of the keyword </span><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'>COMPILER </span><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>one can place any imports that you will need.<span
style='mso-spacerun:yes'>  </span>This code will appear globally in <span
class=SpellE>parser.py</span> before the Parser class definition, for example:<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;mso-layout-grid-align:none;
text-autospace:none'><span class=GramE><span style='font-size:8.5pt;font-family:
Courier;mso-bidi-font-family:Courier'>import</span></span><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier'> sys<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;mso-layout-grid-align:none;
text-autospace:none'><span class=GramE><span style='font-size:8.5pt;font-family:
Courier;mso-bidi-font-family:Courier'>from</span></span><span style='font-size:
8.5pt;font-family:Courier;mso-bidi-font-family:Courier'> <span class=SpellE>os</span>
import path<span style='color:black'><o:p></o:p></span></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
class=GramE><b><span style='font-size:11.5pt;font-family:Times-Bold;mso-bidi-font-family:
Times-Bold;color:black'>parser</span></b></span><b><span style='font-size:11.5pt;
font-family:Times-Bold;mso-bidi-font-family:Times-Bold;color:black'> Class
Fields And Methods</span></b><span style='font-size:11.5pt;font-family:Times-Roman;
mso-bidi-font-family:Times-Roman;color:black'>. After the grammar name one may
declare</span><span style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:
Times-Roman'> additional Python <span style='color:black'>fields and methods</span>
to be incorporated into <span style='color:black'>the generated parser class,
for example:<o:p></o:p></span></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;mso-layout-grid-align:none;
text-autospace:none'><span class=GramE><span style='font-size:8.5pt;font-family:
Courier;mso-bidi-font-family:Courier'>sum</span></span><span style='font-size:
8.5pt;font-family:Courier;mso-bidi-font-family:Courier'> = 0<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;mso-layout-grid-align:none;
text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;mso-layout-grid-align:none;
text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier'>@staticmethod<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;mso-layout-grid-align:none;
text-autospace:none'><span class=GramE><span style='font-size:8.5pt;font-family:
Courier;mso-bidi-font-family:Courier'>def</span></span><span style='font-size:
8.5pt;font-family:Courier;mso-bidi-font-family:Courier'> Add( x ):<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;mso-layout-grid-align:none;
text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier'><span style='mso-spacerun:yes'>   </span><span
class=SpellE>Parser.sum</span> += x<o:p></o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>Since all methods of the parser are static, the declared fields and
methods should also be static. They can be used in the semantic actions of the
parser specification.<o:p></o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>The remaining parts of the compiler description specify the
scanner and the parser that are to be generated. They are now described in more
detail.<o:p></o:p></span></p>

<h2>2.3 Scanner Specification</h2>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>A scanner has to read source text, skip meaningless characters,
recognize tokens and<o:p></o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
class=GramE><span style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:
Times-Roman;color:black'>pass</span></span><span style='font-size:11.5pt;
font-family:Times-Roman;mso-bidi-font-family:Times-Roman;color:black'> them to
the parser.</span><span style='font-size:11.5pt;font-family:Times-Roman;
mso-bidi-font-family:Times-Roman'> The scanner specification consists of six
optional parts that must appear in the specified order:<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in;mso-layout-grid-align:
none;text-autospace:none'><span class=SpellE><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier;color:black'>ScannerSpecification</span></span><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier;
color:black'>=<o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:.5in;text-indent:.5in;tab-stops:1.0in;
mso-layout-grid-align:none;text-autospace:none'><span class=GramE><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier;
color:black'>[ &quot;</span></span><span style='font-size:8.5pt;font-family:
Courier;mso-bidi-font-family:Courier;color:black'>IGNORECASE&quot;]<o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:.5in;text-indent:.5in;tab-stops:1.0in;
mso-layout-grid-align:none;text-autospace:none'><span class=GramE><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier;
color:black'>[ &quot;</span></span><span style='font-size:8.5pt;font-family:
Courier;mso-bidi-font-family:Courier;color:black'>CHARACTERS&quot; { <span
class=SpellE>SetDecl</span> } ]<o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:.5in;text-indent:.5in;tab-stops:1.0in;
mso-layout-grid-align:none;text-autospace:none'><span class=GramE><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier;
color:black'>[ &quot;</span></span><span style='font-size:8.5pt;font-family:
Courier;mso-bidi-font-family:Courier;color:black'>TOKENS&quot; { <span
class=SpellE>TokenDecl</span> } ]<o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:.5in;text-indent:.5in;tab-stops:1.0in;
mso-layout-grid-align:none;text-autospace:none'><span class=GramE><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier'>[
&quot;</span></span><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier'>NAMES&quot; { <span class=SpellE>NameDecl</span>
} ]<o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:.5in;text-indent:.5in;tab-stops:1.0in;
mso-layout-grid-align:none;text-autospace:none'><span class=GramE><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier;
color:black'>[ &quot;</span></span><span style='font-size:8.5pt;font-family:
Courier;mso-bidi-font-family:Courier;color:black'>PRAGMAS&quot; { <span
class=SpellE>PragmaDecl</span> } ]<o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:.5in;text-indent:.5in;tab-stops:1.0in;
mso-layout-grid-align:none;text-autospace:none'><span class=GramE><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier;
color:black'>{ <span class=SpellE>CommentDecl</span></span></span><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier;
color:black'> }<o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:.5in;text-indent:.5in;tab-stops:1.0in;
mso-layout-grid-align:none;text-autospace:none'><span class=GramE><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier;
color:black'>{ <span class=SpellE>WhiteSpaceDecl</span></span></span><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier;
color:black'> }.<o:p></o:p></span></p>

<h3>2.3.1 Character sets</h3>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>This section allows the user to declare character sets such as
letters or digits. Their names can then be used in the other sections of the
scanner specification. Coco/R grammars are expressed in an extended ASCII
character set (256 characters).<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in;mso-layout-grid-align:
none;text-autospace:none'><span class=SpellE><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier;color:black'>SetDecl</span></span><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier;
color:black'> = <span class=SpellE>ident</span> '=' Set.<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'>Set = <span class=SpellE>BasicSet</span>
<span class=GramE>{ (</span>'+' | '-') <span class=SpellE>BasicSet</span> }.<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in;mso-layout-grid-align:
none;text-autospace:none'><span class=SpellE><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier'>BasicSet</span></span><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier'> =
string | ident | Char <span class=GramE>[ &quot;</span>..&quot; <span
class=GramE>Char ]</span> | &quot;ANY&quot;.<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier'>Char = &quot;CHR&quot; '(' number ')' | <span
class=GramE>char .</span><o:p></o:p></span></p>

<p class=MsoNormal style='tab-stops:1.75in;mso-layout-grid-align:none;
text-autospace:none'><span class=SpellE><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier'>SetDecl</span></span><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier;
color:black'> </span><span style='font-size:11.5pt;font-family:Times-Roman;
mso-bidi-font-family:Times-Roman;color:black'>associates a name with a
character set. Basic character sets are denoted as:<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.75in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'>String<span style='mso-tab-count:
1'>           </span></span><span style='font-size:11.5pt;font-family:Times-Roman;
mso-bidi-font-family:Times-Roman;color:black'>a set consisting of all the
characters in the string<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.75in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'>Ident<span style='mso-tab-count:1'>            </span></span><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>a previously declared character set with this name<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.75in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'>Char<span style='mso-tab-count:1'>             </span></span><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>a set containing the character </span><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier;color:black'>char<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.75in;mso-layout-grid-align:
none;text-autospace:none'><span class=GramE><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier;color:black'>char1 ..</span></span><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier;
color:black'> <span class=GramE>char2</span><span style='mso-tab-count:1'>   </span></span><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>the set of all characters from </span><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier;color:black'>char1 </span><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>to </span><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'>char2</span><span style='font-size:
8.5pt;font-family:Courier;mso-bidi-font-family:Courier'> inclusive<span
style='color:red'><o:p></o:p></span></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.75in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'>ANY<span style='mso-tab-count:1'>              </span></span><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>the set of all characters </span><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:red'>except unichr(256) (i.e. with ordinals &gt;256 too)<o:p></o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>Character sets may be formed from basic sets using the operators<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.75in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'>+<span style='mso-tab-count:1'>                </span></span><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>set union<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.75in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'>-<span style='mso-tab-count:1'>                </span></span><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>set difference<o:p></o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><i><span
style='font-size:11.5pt;font-family:Times-Italic;mso-bidi-font-family:Times-Italic;
color:black'>Examples<o:p></o:p></span></i></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:.75in 225.0pt;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'>CHARACTERS<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:.75in 225.0pt;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'><span style='mso-tab-count:1'>   </span><span
class=GramE>digit</span> = &quot;0123456789&quot;.<span style='mso-tab-count:
1'>            </span>/* the set of all digits */<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:.75in 225.0pt;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'><span style='mso-tab-count:1'>   </span><span
class=SpellE><span class=GramE>hexDigit</span></span> = digit +
&quot;ABCDEF&quot;.<span style='mso-tab-count:1'>     </span>/* the set of all
hexadecimal digits */<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:.75in 225.0pt;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'><span style='mso-tab-count:1'>   </span><span
class=GramE>letter</span> = 'A' .. 'Z'.<span style='mso-tab-count:1'>             </span>/*
the set of all upper case letters */<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:.75in 225.0pt;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'><span style='mso-tab-count:1'>   </span><span
class=SpellE><span class=GramE>eol</span></span> = '\r'.<span style='mso-tab-count:
1'>                      </span>/* the end-of-line character */<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:.75in 225.0pt;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'><span style='mso-tab-count:1'>   </span><span
class=SpellE><span class=GramE>noDigit</span></span> = ANY - digit.<span
style='mso-tab-count:1'>           </span>/* any character that is not a digit
*/<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:.75in 225.0pt;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:red'><span style='mso-tab-count:1'>   </span></span><span
class=GramE><span style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:
Courier'>control</span></span><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier'> = CHR(0) .. <span class=GramE>CHR(</span>31).<span
style='mso-tab-count:1'>     </span>/* ASCII control characters */<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:.75in 225.0pt;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier'><o:p>&nbsp;</o:p></span></p>

<h3>2.3.2 Tokens</h3>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>This is the main section of the scanner specification, in which the
tokens (or terminal symbols) of the language are declared. Tokens may be
divided into literals and token classes.<o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:.25in;text-indent:-.25in;mso-list:l7 level1 lfo6;
tab-stops:list .25in .5in;mso-layout-grid-align:none;text-autospace:none'><![if !supportLists]><span
style='font-size:11.5pt;font-family:Symbol;mso-fareast-font-family:Symbol;
mso-bidi-font-family:Symbol;color:black'><span style='mso-list:Ignore'>·<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></span><![endif]><i><span style='font-size:11.5pt;font-family:
Times-Italic;mso-bidi-font-family:Times-Italic;color:black'>Literals </span></i><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>(such as </span><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'>while </span><span style='font-size:
11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;color:black'>or
</span><span style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:
Courier;color:black'>&gt;=</span><span style='font-size:11.5pt;font-family:
Times-Roman;mso-bidi-font-family:Times-Roman;color:black'>) have a fixed
representation in the source language. In the grammar they are written as
strings (e.g. </span><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'>&quot;while&quot; </span><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>or </span><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'>&quot;&gt;=&quot;</span><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>) and denote themselves. They </span><span style='font-size:11.5pt;
font-family:Times-Roman;mso-bidi-font-family:Times-Roman'>do not <span
style='color:black'>have to be declared in the tokens section, but can be
implicitly declared at their first use in the productions of the grammar.<o:p></o:p></span></span></p>

<p class=MsoNormal style='margin-left:.25in;text-indent:-.25in;mso-list:l7 level1 lfo6;
tab-stops:list .25in .5in;mso-layout-grid-align:none;text-autospace:none'><![if !supportLists]><span
style='font-size:11.5pt;font-family:Symbol;mso-fareast-font-family:Symbol;
mso-bidi-font-family:Symbol;color:black'><span style='mso-list:Ignore'>·<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></span><![endif]><i><span style='font-size:11.5pt;font-family:
Times-Italic;mso-bidi-font-family:Times-Italic;color:black'>Token classes </span></i><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>(such as identifiers or numbers) have a certain structure that
must be explicitly declared by a regular expression in EBNF. There are usually
many instances of a token class (e.g. many different identifiers), which have
the same token code, but different lexeme values.<o:p></o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>The syntax of token declarations is as follows:<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in;mso-layout-grid-align:
none;text-autospace:none'><span class=SpellE><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier;color:black'>TokenDecl</span></span><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier;
color:black'> = Symbol <span class=GramE>[ '</span>=' <span class=SpellE>TokenExpr</span>
'.' ].<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in;mso-layout-grid-align:
none;text-autospace:none'><span class=SpellE><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier;color:black'>TokenExpr</span></span><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier;
color:black'> = <span class=SpellE>TokenTerm</span> <span class=GramE>{ '</span>|'
<span class=SpellE>TokenTerm</span> }.<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in;mso-layout-grid-align:
none;text-autospace:none'><span class=SpellE><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier;color:black'>TokenTerm</span></span><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier;
color:black'> = <span class=SpellE>TokenFactor</span> <span class=GramE>{ <span
class=SpellE>TokenFactor</span></span> } [ &quot;CONTEXT&quot; '(' <span
class=SpellE>TokenExpr</span> ')' ].<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in;mso-layout-grid-align:
none;text-autospace:none'><span class=SpellE><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier;color:black'>TokenFactor</span></span><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier;
color:black'> = Symbol<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'><span style='mso-tab-count:1'>       </span>|
'(' <span class=SpellE>TokenExpr</span> ')'<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'><span style='mso-tab-count:1'>       </span>|
'[' <span class=SpellE>TokenExpr</span> ']'<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'><span style='mso-tab-count:1'>       </span><span
class=GramE>| '{' <span class=SpellE>TokenExpr</span> '}'.</span><o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'>Symbol = ident | string | char.<o:p></o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>A token declaration defines the syntax of a terminal symbol by a
regular EBNF expression. This expression may contain strings or character
constants denoting themselves (e.g. </span><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier;color:black'>&quot;&gt;=&quot;
</span><span style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:
Times-Roman;color:black'>or </span><span class=GramE><span style='font-size:
8.5pt;font-family:Courier;mso-bidi-font-family:Courier;color:black'>’;</span></span><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier;
color:black'>’</span><span style='font-size:11.5pt;font-family:Times-Roman;
mso-bidi-font-family:Times-Roman;color:black'>) as well as names of character
sets (e.g. </span><span style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:
Courier;color:black'>letter</span><span style='font-size:11.5pt;font-family:
Times-Roman;mso-bidi-font-family:Times-Roman;color:black'>) denoting an
arbitrary character from this set. It must not contain other token names, which
implies that EBNF expressions in token declarations cannot be recursive.<o:p></o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><i><span
style='font-size:11.5pt;font-family:Times-Italic;mso-bidi-font-family:Times-Italic;
color:black'>Examples<o:p></o:p></span></i></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:.75in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'>TOKENS<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:.75in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'><span style='mso-tab-count:1'>   </span><span
class=GramE>ident</span> = letter { letter | digit | '_' }.<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:.75in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'><span style='mso-tab-count:1'>   </span><span
class=GramE>number</span> = digit { digit }<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:.75in 1.5in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'><span style='mso-tab-count:2'>              </span><span
class=GramE>| &quot;0x&quot; <span class=SpellE>hexDigit</span> <span
class=SpellE>hexDigit</span>.</span><o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:.75in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'><span style='mso-tab-count:1'>   </span><span
class=GramE>float</span> = digit {digit} '.' {<span class=GramE>digit</span>} <span
class=GramE>[ 'E'</span> ['+'|'-'] digit {digit} ].<o:p></o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>The token declarations need not be <span class=GramE>LL(</span>1),
as can be seen in the declaration of </span><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier;color:black'>number</span><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>, where both alternatives can start with a </span><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier;
color:black'>'0'</span><span style='font-size:11.5pt;font-family:Times-Roman;
mso-bidi-font-family:Times-Roman;color:black'>. Coco/R automatically resolves
any ambiguities and generates a deterministic finite scanner automaton. Tokens
may be declared in any order. However, if a token is declared as a literal that
</span><span style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:
Times-Roman'>might match <span style='color:black'>an instance of a more
general token, the literal has to be declared </span></span><i><span
style='font-size:11.5pt;font-family:Times-Italic;mso-bidi-font-family:Times-Italic;
color:black'>after </span></i><span style='font-size:11.5pt;font-family:Times-Roman;
mso-bidi-font-family:Times-Roman;color:black'>the more general token.<o:p></o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><i><span
style='font-size:11.5pt;font-family:Times-Italic;mso-bidi-font-family:Times-Italic;
color:black'>Example<o:p></o:p></span></i></p>

<p class=MsoNormal style='text-indent:.5in;mso-layout-grid-align:none;
text-autospace:none'><span class=GramE><span style='font-size:8.5pt;font-family:
Courier;mso-bidi-font-family:Courier;color:black'>ident</span></span><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier;
color:black'> = letter { letter | digit }.<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;mso-layout-grid-align:none;
text-autospace:none'><span class=GramE><span style='font-size:8.5pt;font-family:
Courier;mso-bidi-font-family:Courier;color:black'>while</span></span><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier;
color:black'> = &quot;while&quot;.<o:p></o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>Since the string </span><span style='font-size:8.5pt;font-family:
Courier;mso-bidi-font-family:Courier;color:black'>&quot;while&quot; </span><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>matches both the tokens </span><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier;color:black'>while </span><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>and </span><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'>ident</span><span style='font-size:
11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;color:black'>,
the declaration of </span><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'>while </span><span style='font-size:
11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;color:black'>must
come after the declaration of </span><span style='font-size:8.5pt;font-family:
Courier;mso-bidi-font-family:Courier;color:black'>ident</span><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>. In principle, literal tokens</span><span style='font-size:11.5pt;
font-family:Times-Roman;mso-bidi-font-family:Times-Roman'> do not <span
style='color:black'>have to be declared in the token declarations at all, but
can simply be introduced directly in the productions of the grammar. In some
situations, however, it makes sense to declare them explicitly,</span> perhaps <span
style='color:black'>to get a token name for them that can be used in resolver
methods (see Section 2.4.6).<o:p></o:p></span></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
class=GramE><b><span style='font-size:11.5pt;font-family:Times-Bold;mso-bidi-font-family:
Times-Bold;color:black'>Context-dependent tokens</span></b><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>.</span></span><span style='font-size:11.5pt;font-family:Times-Roman;
mso-bidi-font-family:Times-Roman;color:black'> The </span><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier;
color:black'>CONTEXT </span><span style='font-size:11.5pt;font-family:Times-Roman;
mso-bidi-font-family:Times-Roman;color:black'>phrase in a </span><span
class=SpellE><span style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:
Courier;color:black'>TokenTerm</span></span><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier;color:black'> </span><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>means that the term is<o:p></o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
class=GramE><span style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:
Times-Roman;color:black'>only</span></span><span style='font-size:11.5pt;
font-family:Times-Roman;mso-bidi-font-family:Times-Roman;color:black'>
recognized if its context (i.e. the characters that follow the term in the
input<o:p></o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
class=GramE><span style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:
Times-Roman;color:black'>stream</span></span><span style='font-size:11.5pt;
font-family:Times-Roman;mso-bidi-font-family:Times-Roman;color:black'>) matches
the </span><span class=SpellE><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'>TokenExpr</span></span><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier;
color:black'> </span><span style='font-size:11.5pt;font-family:Times-Roman;
mso-bidi-font-family:Times-Roman;color:black'>specified in parenthesis. Note that
the </span><span class=SpellE><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'>TokenExpr</span></span><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier;
color:black'> </span><span style='font-size:11.5pt;font-family:Times-Roman;
mso-bidi-font-family:Times-Roman;color:black'>is </span><i><span
style='font-size:11.5pt;font-family:Times-Italic;mso-bidi-font-family:Times-Italic;
color:black'>not<o:p></o:p></span></i></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
class=GramE><span style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:
Times-Roman;color:black'>part</span></span><span style='font-size:11.5pt;
font-family:Times-Roman;mso-bidi-font-family:Times-Roman;color:black'> of the
token.<o:p></o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><i><span
style='font-size:11.5pt;font-family:Times-Italic;mso-bidi-font-family:Times-Italic;
color:black'>Example<o:p></o:p></span></i></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in;mso-layout-grid-align:
none;text-autospace:none'><span class=GramE><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier;color:black'>number</span></span><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier;
color:black'> = digit { digit }<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'><span style='mso-tab-count:1'>       </span>|
<span class=GramE>digit</span> { digit } CONTEXT (&quot;..&quot;).<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in;mso-layout-grid-align:
none;text-autospace:none'><span class=GramE><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier;color:black'>float</span></span><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier;
color:black'> = digit { digit } '.' <span class=GramE>{ digit</span> } <span
class=GramE>[ 'E'</span> ['+'|'-'] digit { digit } ].<o:p></o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>The </span><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'>CONTEXT </span><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>phrase in this example allows the scanner to distinguish between </span><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier;
color:black'>float </span><span style='font-size:11.5pt;font-family:Times-Roman;
mso-bidi-font-family:Times-Roman;color:black'>tokens (e.g. </span><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier;
color:black'>1.23</span><span style='font-size:11.5pt;font-family:Times-Roman;
mso-bidi-font-family:Times-Roman;color:black'>) and integer ranges (e.g. </span><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier;
color:black'>1<span class=GramE>..2</span></span><span style='font-size:11.5pt;
font-family:Times-Roman;mso-bidi-font-family:Times-Roman;color:black'>) that
could otherwise not be scanned with a single character lookahead. This works as
follows: after having read </span><span style='font-size:8.5pt;font-family:
Courier;mso-bidi-font-family:Courier;color:black'>&quot;1.&quot; </span><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>the scanner still works on both tokens. If the next character is a
</span><span style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:
Courier;color:black'>'.' </span><span style='font-size:11.5pt;font-family:Times-Roman;
mso-bidi-font-family:Times-Roman;color:black'>the characters </span><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier;
color:black'>&quot;<span class=GramE>..&quot;</span> </span><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>are pushed back to the input stream and a </span><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier;
color:black'>number </span><span style='font-size:11.5pt;font-family:Times-Roman;
mso-bidi-font-family:Times-Roman;color:black'>token with the value </span><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier;
color:black'>1 </span><span style='font-size:11.5pt;font-family:Times-Roman;
mso-bidi-font-family:Times-Roman;color:black'>is returned to the parser. If the
next character is not a </span><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'>'.' </span><span style='font-size:
11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;color:black'>the
scanner continues with the recognition of a </span><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier;color:black'>float </span><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>token.<o:p></o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
class=GramE><b><span style='font-size:11.5pt;font-family:Times-Bold;mso-bidi-font-family:
Times-Bold;color:black'>Hand-written scanners</span></b><span style='font-size:
11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;color:black'>.</span></span><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'> If the right-hand sides of the token declarations are missing no
scanner is generated. This gives the user the chance to provide a hand-written
scanner, which must conform to the interface described in Section 3.3.1.<o:p></o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><i><span
style='font-size:11.5pt;font-family:Times-Italic;mso-bidi-font-family:Times-Italic;
color:black'>Example<o:p></o:p></span></i></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'>TOKENS<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'><span style='mso-tab-count:1'>       </span><span
class=GramE>ident</span><o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'><span style='mso-tab-count:1'>       </span><span
class=GramE>number</span><o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'><span style='mso-tab-count:1'>       </span>&quot;<span
class=GramE>if</span>&quot;<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'><span style='mso-tab-count:1'>       </span>&quot;<span
class=GramE>while</span>&quot;<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'><span style='mso-tab-count:1'>       </span>...<o:p></o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>Tokens are assigned numbers in the order of their declaration. The
first token gets the number </span><span style='font-size:8.5pt;font-family:
Courier;mso-bidi-font-family:Courier;color:black'>1</span><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>, the second the number </span><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier;color:black'>2</span><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>, and so on. The number </span><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier;color:black'>0 </span><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>is reserved for the end-of-file token. The hand-written scanner
must return the token numbers according to these conventions. In particular, it
must return an end-of-file token if no more input is available.<o:p></o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>It is hardly ever necessary to supply a hand-written scanner,
because the scanner generated by Coco/R is highly optimized. A user-supplied
scanner would be needed, for example, if the scanner were required to <span
class=GramE>process <i><span style='font-family:Times-Italic;mso-bidi-font-family:
Times-Italic'>include</span></i></span></span><i><span style='font-size:11.5pt;
font-family:Times-Italic;mso-bidi-font-family:Times-Italic;color:black'> </span></i><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>directives.<o:p></o:p></span></p>

<h3>2.3.3 Pragmas</h3>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>Pragmas are tokens that may occur anywhere in the input stream
(for example, end-of-line symbols or compiler directives). It would be too
tedious to handle all their possible occurrences in the grammar. Therefore they
are excluded from the token stream that is passed to the parser. Pragmas are
declared like tokens, but they may have a semantic action associated with them
that is executed whenever they are recognized by the scanner.<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;mso-layout-grid-align:none;
text-autospace:none'><span class=SpellE><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier;color:black'>PragmaDecl</span></span><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier;
color:black'> = <span class=SpellE>TokenDecl</span> [<span class=SpellE>SemAction</span>].<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;mso-layout-grid-align:none;
text-autospace:none'><span class=SpellE><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier;color:black'>SemAction</span></span><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier;
color:black'> = &quot;(.&quot; </span><span class=SpellE><i><span
style='font-size:8.5pt;font-family:Courier-Oblique;mso-bidi-font-family:Courier-Oblique;
color:black'>ArbitraryStatements</span></i></span><i><span style='font-size:
8.5pt;font-family:Courier-Oblique;mso-bidi-font-family:Courier-Oblique;
color:black'> </span></i><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'>&quot;.)&quot;.<o:p></o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><i><span
style='font-size:11.5pt;font-family:Times-Italic;mso-bidi-font-family:Times-Italic;
color:black'>Example<o:p></o:p></span></i></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:2.5in 2.75in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'>PRAGMAS<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:2.5in 2.75in;mso-layout-grid-align:
none;text-autospace:none'><span class=GramE><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier;color:black'>option</span></span><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier;
color:black'> = '$' { letter }.<span style='mso-tab-count:1'>   </span>(.<span
style='mso-tab-count:1'> </span>for <span class=SpellE>ch</span> in <span
class=SpellE>Parser.la.val</span>:<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:2.5in 2.75in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'><span style='mso-tab-count:2'>                               </span><span
class=GramE>if</span> <span class=SpellE>ch</span> == 'A':<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:2.5in 2.75in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'><span
style='mso-spacerun:yes'>                         </span><span
style='mso-spacerun:yes'>          </span>...<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:2.5in 2.75in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'><span style='mso-tab-count:2'>                               </span><span
class=SpellE><span class=GramE>elif</span></span> <span class=SpellE>ch</span>
== 'B':<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:2.5in 2.75in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'><span
style='mso-spacerun:yes'>                                   </span>...<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:2.5in 2.75in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'><span style='mso-tab-count:2'>                               </span>...
.)<o:p></o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>This <span class=SpellE>pragma</span> defines a compiler option
that can be written, for example, as </span><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier;color:black'>$A</span><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>.<span style='mso-spacerun:yes'>  </span>Whenever it occurs in the
input stream it is </span><i><span style='font-size:11.5pt;font-family:Times-Italic;
mso-bidi-font-family:Times-Italic;color:black'>not </span></i><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>forwarded to the parser but immediately processed by executing its
associated semantic action. Note that </span><span class=SpellE><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier;
color:black'>Parser.la.val</span></span><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier;color:black'> </span><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>accesses the value of the lookahead token </span><span
class=SpellE><span style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:
Courier;color:black'>Parser.la</span></span><span style='font-size:11.5pt;
font-family:Times-Roman;mso-bidi-font-family:Times-Roman;color:black'>, which
is in this case the <span class=SpellE>pragma</span> that was just read (see
Section 3.3.4).<o:p></o:p></span></p>

<h3>2.3.4 Comments</h3>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>Comments are difficult to specify with regular expressions; nested
comments are</span><span style='font-size:11.5pt;font-family:Times-Roman;
mso-bidi-font-family:Times-Roman'> quite impossible to specify in that way<span
style='color:black'>. This makes it necessary to have a special construct to
define their structure.<o:p></o:p></span></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>Comments are declared by specifying their opening and closing
brackets. The keyword </span><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'>NESTED </span><span style='font-size:
11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;color:black'>denotes
that they can be nested.<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;mso-layout-grid-align:none;
text-autospace:none'><span class=SpellE><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier;color:black'>CommentDecl</span></span><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier;
color:black'> = &quot;COMMENTS&quot; &quot;FROM&quot; <span class=SpellE>TokenExpr</span>
&quot;TO&quot; <span class=SpellE>TokenExpr</span> [&quot;NESTED&quot;].<o:p></o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>Comment delimiters must be sequences of 1 or 2 characters, which
can be specified as literals or as single-element character sets. They must not
be structured (for example with alternatives). It is possible to declare</span><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman'>
more than one structure for <span style='color:black'>comments.<o:p></o:p></span></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><i><span
style='font-size:11.5pt;font-family:Times-Italic;mso-bidi-font-family:Times-Italic;
color:black'>Example<o:p></o:p></span></i></p>

<p class=MsoNormal style='text-indent:.5in;mso-layout-grid-align:none;
text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'>COMMENTS FROM &quot;/*&quot; TO
&quot;*/&quot; NESTED<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;mso-layout-grid-align:none;
text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'>COMMENTS FROM &quot;//&quot; TO <span
class=SpellE>eol</span><o:p></o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>Alternatively,</span><span style='font-size:11.5pt;font-family:
Times-Roman;mso-bidi-font-family:Times-Roman'> if comments are not to be nested
<span style='color:black'>one can define them as pragmas, e.g.<o:p></o:p></span></span></p>

<p class=MsoNormal style='text-indent:.5in;mso-outline-level:1;tab-stops:1.0in;
mso-layout-grid-align:none;text-autospace:none'><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier;color:black'>CHARACTERS<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'><span style='mso-tab-count:1'>       </span><span
class=GramE>other</span> = ANY - '/' - '*'.<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;mso-outline-level:1;tab-stops:1.0in;
mso-layout-grid-align:none;text-autospace:none'><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier;color:black'>PRAGMAS<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'><span style='mso-tab-count:1'>       </span><span
class=GramE>comment</span> = &quot;/*&quot; {'/' | other | '*' {'*'} other} '*'
{'*'} '/'.<o:p></o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>This has the advantage that such comments can be processed
semantically, for example, by counting them or by processing compiler options within
them.<o:p></o:p></span></p>

<h3>2.3.5 White space</h3>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman'>Some
characters that appear between tokens, such as blanks, tabulators or
end-of-line separators are usually considered as white space that should simply
be ignored by the scanner. Blanks are ignored by default. If other inter-token
characters are to be ignored the user has to specify them in the following way:<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;mso-layout-grid-align:none;
text-autospace:none'><span class=SpellE><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier;color:black'>WhiteSpaceDecl</span></span><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier;
color:black'> = &quot;IGNORE&quot; Set.<o:p></o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><i><span
style='font-size:11.5pt;font-family:Times-Italic;mso-bidi-font-family:Times-Italic;
color:black'>Example<o:p></o:p></span></i></p>

<p class=MsoNormal style='text-indent:.5in;mso-layout-grid-align:none;
text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'>IGNORE '\t' + '\r' + '\n'<o:p></o:p></span></p>

<h3>2.3.6 Case sensitivity</h3>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>Some languages such as Pascal or XML are case insensitive. In
Pascal, for example, one </span><span style='font-size:11.5pt;font-family:Times-Roman;
mso-bidi-font-family:Times-Roman'>can also write the keyword </span><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier'>while </span><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman'>as
</span><span class=GramE><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier'>While</span></span><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier'> </span><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman'>or
</span><span style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:
Courier'>WHILE</span><span style='font-size:11.5pt;font-family:Times-Roman;
mso-bidi-font-family:Times-Roman'>.<span style='color:black'> By default,
Coco/R generates scanners that are case sensitive. If this is not desired, one
has </span>to include the directive<span style='color:red'> </span></span><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier;
color:black'>IGNORECASE </span><span style='font-size:11.5pt;font-family:Times-Roman;
mso-bidi-font-family:Times-Roman;color:black'>at the beginning of the scanner
specification. <o:p></o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>The effect of </span><span style='font-size:8.5pt;font-family:
Courier;mso-bidi-font-family:Courier;color:black'>IGNORECASE </span><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>is that all input to the scanner is treated in a case-insensitive
way. The production<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;mso-layout-grid-align:none;
text-autospace:none'><span class=SpellE><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier;color:black'>WhileStatement</span></span><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier;
color:black'> = &quot;while&quot; '(' <span class=SpellE>Expr</span> ')'
Statement.<o:p></o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
class=GramE><span style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:
Times-Roman'>would</span></span><span style='font-size:11.5pt;font-family:Times-Roman;
mso-bidi-font-family:Times-Roman'> then <span style='color:black'>also
recognize while statements that start with </span></span><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier;
color:black'>While </span><span style='font-size:11.5pt;font-family:Times-Roman;
mso-bidi-font-family:Times-Roman;color:black'>or </span><span style='font-size:
8.5pt;font-family:Courier;mso-bidi-font-family:Courier;color:black'>WHILE</span><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>. Similarly, the declaration:<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;mso-outline-level:1;tab-stops:1.0in;
mso-layout-grid-align:none;text-autospace:none'><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier;color:black'>TOKENS<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'><span style='mso-tab-count:1'>       </span><span
class=GramE>float</span> = digit { digit } '.' <span class=GramE>[ 'E'</span> (
'+'|'-' ) digit { digit } ].<o:p></o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
class=GramE><span style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:
Times-Roman'>would</span></span><span style='font-size:11.5pt;font-family:Times-Roman;
mso-bidi-font-family:Times-Roman'> <span style='color:black'>cause the scanner
to recognize not only </span></span><span style='font-size:8.5pt;font-family:
Courier;mso-bidi-font-family:Courier;color:black'>1.2E2 </span><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>but also </span><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'>1.2e2 </span><span style='font-size:
11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;color:black'>as
a </span><span style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:
Courier;color:black'>float </span><span style='font-size:11.5pt;font-family:
Times-Roman;mso-bidi-font-family:Times-Roman;color:black'>token. However, the
original casing of tokens is preserved in the </span><span class=SpellE><span
class=GramE><span style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:
Courier;color:black'>val</span></span></span><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier;color:black'> </span><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>field of every token (see Section 3.3.2), so that the lexical
value of tokens such as identifiers and strings is delivered exactly as it was
written in the input text.<o:p></o:p></span></p>

<h3>2.3.7 Named tokens</h3>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman'>The
scanner and parser produced by Coco/R use small integer values to distinguish
token kinds. This makes their code harder to understand by a human reader (some
would argue that humans should never need to read such code anyway). When used
with a –N command line option or a </span><span style='font-size:9.5pt;
font-family:Courier;mso-bidi-font-family:Courier'>$N </span><span class=SpellE><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman'>pragma</span></span><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman'>,
Coco/R will generate code that uses names for all the tokens. By default these
names have a rather stereotyped form (for example &quot;...&quot; would be
named &quot;</span><span class=SpellE><span style='font-size:9.5pt;font-family:
Courier;mso-bidi-font-family:Courier'>pointpointpointSym</span></span><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman'>&quot;).
The facility exists to prefer user-defined names, or to help resolve name
clashes (for example, between the default names that would be chosen for &quot;</span><span
style='font-size:9.5pt;font-family:Courier;mso-bidi-font-family:Courier'>point</span><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman'>&quot;
and &quot;.&quot;).<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;mso-layout-grid-align:none;
text-autospace:none'><span class=SpellE><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier'>UserNames</span></span><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier'> =
&quot;NAMES&quot; <span class=GramE>{ <span class=SpellE>UserName</span></span>
} .<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;mso-layout-grid-align:none;
text-autospace:none'><span class=SpellE><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier'>UserName</span></span><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier'> =
ident &quot;=&quot; <span class=GramE>( ident</span> | string ) &quot;.&quot; .<o:p></o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><i><span
style='font-size:11.5pt;font-family:Times-Italic;mso-bidi-font-family:Times-Italic'>Example<o:p></o:p></span></i></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier'>NAMES<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier'><span style='mso-tab-count:1'>       </span><span
class=GramE>period</span> = &quot;.&quot; .<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier'><span style='mso-tab-count:1'>       </span><span
class=GramE>ellipsis</span> = &quot;...&quot; .<o:p></o:p></span></p>

<h2>2.4 Parser Specification</h2>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>The parser specification is the main part of a compiler description.
It contains the productions of an attributed grammar, which specify the syntax
of the language to be parsed as well as its translation.<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in;mso-layout-grid-align:
none;text-autospace:none'><span class=SpellE><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier;color:black'>ParserSpecification</span></span><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier;
color:black'> = &quot;PRODUCTIONS&quot; <span class=GramE>{ Production</span>
}.<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'>Production = ident <span class=GramE>[
<span class=SpellE>FormalAttributes</span></span> ] [ <span class=SpellE>LocalDecl</span>
] '=' Expression '.'.<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'>Expression = Term {'|' Term}.<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'>Term = <span class=GramE>[ [</span>
Resolver ] Factor { Factor } ].<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'>Factor = <span class=GramE>[ &quot;</span>WEAK&quot;
] Symbol [ <span class=SpellE>ActualAttributes</span> ]<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'><span style='mso-tab-count:1'>       </span>|
'(' Expression ')'<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'><span style='mso-tab-count:1'>       </span>|
'[' Expression ']'<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'><span style='mso-tab-count:1'>       </span>|
'{' Expression '}'<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'><span style='mso-tab-count:1'>       </span>|
&quot;ANY&quot;<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'><span style='mso-tab-count:1'>       </span>|
&quot;SYNC&quot;<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'><span style='mso-tab-count:1'>       </span>|
<span class=SpellE>SemAction</span>.<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'>Symbol = ident | string | char.<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in;mso-layout-grid-align:
none;text-autospace:none'><span class=SpellE><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier;color:black'>SemAction</span></span><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier;
color:black'> = &quot;(.&quot; </span><span class=SpellE><i><span
style='font-size:8.5pt;font-family:Courier-Oblique;mso-bidi-font-family:Courier-Oblique;
color:black'>ArbitraryStatements</span></i></span><i><span style='font-size:
8.5pt;font-family:Courier-Oblique;mso-bidi-font-family:Courier-Oblique;
color:black'> </span></i><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'>&quot;.)&quot;.<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in;mso-layout-grid-align:
none;text-autospace:none'><span class=SpellE><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier;color:black'>LocalDecl</span></span><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier;
color:black'> = <span class=SpellE>SemAction</span>.<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in;mso-layout-grid-align:
none;text-autospace:none'><span class=SpellE><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier;color:black'>FormalAttributes</span></span><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier;
color:black'> = '&lt;' </span><span class=SpellE><i><span style='font-size:
8.5pt;font-family:Courier-Oblique;mso-bidi-font-family:Courier-Oblique;
color:black'>ArbitraryText</span></i></span><i><span style='font-size:8.5pt;
font-family:Courier-Oblique;mso-bidi-font-family:Courier-Oblique;color:black'> </span></i><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier;
color:black'>'&gt;' |</span><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier'> '&lt;.' </span><span class=SpellE><i><span
style='font-size:8.5pt;font-family:Courier-Oblique;mso-bidi-font-family:Courier-Oblique'>ArbitraryText</span></i></span><i><span
style='font-size:8.5pt;font-family:Courier-Oblique;mso-bidi-font-family:Courier-Oblique'>
</span></i><span style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:
Courier'>'.&gt;'<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in;mso-layout-grid-align:
none;text-autospace:none'><span class=SpellE><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier;color:black'>ActualAttributes</span></span><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier;
color:black'> = '&lt;' </span><span class=SpellE><i><span style='font-size:
8.5pt;font-family:Courier-Oblique;mso-bidi-font-family:Courier-Oblique;
color:black'>ArbitraryText</span></i></span><i><span style='font-size:8.5pt;
font-family:Courier-Oblique;mso-bidi-font-family:Courier-Oblique;color:black'> </span></i><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier;
color:black'>'&gt;' |</span><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier'> '&lt;.' </span><span class=SpellE><span
class=GramE><i><span style='font-size:8.5pt;font-family:Courier-Oblique;
mso-bidi-font-family:Courier-Oblique'>ArbitraryText</span></i></span></span><span
class=GramE><i><span style='font-size:8.5pt;font-family:Courier-Oblique;
mso-bidi-font-family:Courier-Oblique'> </span></i><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier'>'.&gt;'.</span></span><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier'><o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'>Resolver = &quot;IF&quot; '(' <span
class=GramE>{ ANY</span> } ')'.<o:p></o:p></span></p>

<h3>2.4.1 Productions</h3>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>A production specifies the syntactical structure of a nonterminal
symbol. It consists of a left-hand side and a right-hand side which are
separated by an equal sign. The left-hand side specifies the name of the
nonterminal together with its formal attributes and the local variables of the
production. The right-hand side consists of an EBNF expression that specifies
the structure of the nonterminal, as well as its translation in form of
attributes and semantic actions.<o:p></o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>The productions may be given in any order. References to as yet
undeclared nonterminals are allowed (</span><span style='font-size:11.5pt;
font-family:Times-Roman;mso-bidi-font-family:Times-Roman'>any name that has not
previously been declared<span style='color:red'> </span><span style='color:
black'>is considered to be a forward reference to a nonterminal symbol). For
every nonterminal there must be exactly one </span>production (which may
specify alternative right-hand sides).<span style='color:red'> </span><span
style='color:black'>In particular, there must be a production for the grammar
name, which is the start symbol of the grammar.<o:p></o:p></span></span></p>

<h3>2.4.2 Semantic Actions</h3>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>A semantic action is a piece of code written in Python. It is
executed by the generated parser at the position where it has been specified in
the grammar. Semantic actions are simply copied to the generated parser without
being checked by Coco/R.<span style='mso-spacerun:yes'>  </span>Indentation of
multiple lines should be relative the first character of the first line in the
semantic action.<o:p></o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>A semantic action can also contain the declarations of local
variables. Every production has its own set of local variables, which are
retained in recursive productions. The optional semantic action on the
left-hand side of a production (</span><span class=SpellE><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier;
color:black'>LocalDecl</span></span><span style='font-size:11.5pt;font-family:
Times-Roman;mso-bidi-font-family:Times-Roman;color:black'>) is intended for
such declarations, but variables can also be declared in any other semantic
action.<o:p></o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>Here is an example that counts the number of identifiers in an
identifier list:<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in 2.0in;mso-layout-grid-align:
none;text-autospace:none'><span class=SpellE><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier;color:black'>IdentList</span></span><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier;
color:black'> =<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in 2.0in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'><span style='mso-tab-count:1'>       </span><span
class=SpellE>Ident</span><span style='mso-tab-count:1'>         </span>(. n = <span
class=GramE>1 .)</span><o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in 2.0in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'><span style='mso-tab-count:1'>       </span>{
',' ident<span style='mso-tab-count:1'>   </span>(. n += <span class=GramE>1 .)</span><o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in 2.0in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'><span style='mso-tab-count:1'>       </span>}<span
style='mso-tab-count:1'>             </span>(. print &quot;n = %d&quot; % <span
class=GramE>n .)</span><o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in 2.0in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'><span style='mso-tab-count:1'>       </span>.<o:p></o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman'>As
a matter of style, it is good practice to write all syntax parts of each
production on the left side of a Cocol file, with all semantic actions on the
right, as illustrated above.<span style='mso-spacerun:yes'>  </span><span
style='color:black'>This makes a production more readable because the syntax is
separated from its processing.<o:p></o:p></span></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>Semantic actions can access not only local variables but also the
static fields and methods declared at the beginning of the attributed grammar
(see Section 2.2) as well as fields and methods of other classes.<o:p></o:p></span></p>

<h3>2.4.3 Attributes</h3>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>Productions are considered as (and are actually translated to)
methods of the Parser class. The occurrence of a nonterminal on the right-hand
side of a production can be viewed as a call of that <span class=SpellE>nonterminal's</span>
parsing method.<o:p></o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>Nonterminals may have attributes, which correspond to parameters
of the <span class=SpellE>nonterminal's</span> parsing method. There are </span><i><span
style='font-size:11.5pt;font-family:Times-Italic;mso-bidi-font-family:Times-Italic;
color:black'>input attributes</span></i><span style='font-size:11.5pt;
font-family:Times-Roman;mso-bidi-font-family:Times-Roman;color:black'>, which
are used to pass values to the production of a nonterminal, and </span><i><span
style='font-size:11.5pt;font-family:Times-Italic;mso-bidi-font-family:Times-Italic;
color:black'>output attributes</span></i><span style='font-size:11.5pt;
font-family:Times-Roman;mso-bidi-font-family:Times-Roman;color:black'>, which
are used to return values from the production of a nonterminal to its caller
(i.e. to the place where this nonterminal occurs in some other production).<o:p></o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>As with parameters, we distinguish between </span><i><span
style='font-size:11.5pt;font-family:Times-Italic;mso-bidi-font-family:Times-Italic;
color:black'>formal attributes</span></i><span style='font-size:11.5pt;
font-family:Times-Roman;mso-bidi-font-family:Times-Roman;color:black'>, which
are specified at the <span class=SpellE>nonterminal's</span> declaration on the
left-hand side of a production, and </span><i><span style='font-size:11.5pt;
font-family:Times-Italic;mso-bidi-font-family:Times-Italic;color:black'>actual
attributes</span></i><span style='font-size:11.5pt;font-family:Times-Roman;
mso-bidi-font-family:Times-Roman;color:black'>, which are specified at the <span
class=SpellE>nonterminal's</span> occurrence on the right-hand side of a production.<o:p></o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman'>Python
methods cannot have output parameters. However, the Python version of Coco/R
provides for a single output attribute which is passed to the caller as a
return value. This return value can be an object of a class that contains
multiple members.<o:p></o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>If a </span><span style='font-size:11.5pt;font-family:Times-Roman;
mso-bidi-font-family:Times-Roman'>nonterminal is to have<span style='color:
red'> </span><span style='color:black'>an output attribute this must be
declared as the first attribute. It is denoted by the keyword </span></span><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier;
color:black'>out </span><span style='font-size:11.5pt;font-family:Times-Roman;
mso-bidi-font-family:Times-Roman;color:black'>both in its declaration and in
its use. The following example shows a nonterminal </span><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier;
color:black'>T </span><span style='font-size:11.5pt;font-family:Times-Roman;
mso-bidi-font-family:Times-Roman;color:black'>with an output attribute </span><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier;
color:black'>x </span><span style='font-size:11.5pt;font-family:Times-Roman;
mso-bidi-font-family:Times-Roman;color:black'>and two input attributes </span><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier;
color:black'>y </span><span style='font-size:11.5pt;font-family:Times-Roman;
mso-bidi-font-family:Times-Roman;color:black'>and </span><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier;
color:black'>z </span><span style='font-size:11.5pt;font-family:Times-Roman;
mso-bidi-font-family:Times-Roman;color:black'>(for compatibility with older
versions of Coco/R the symbol </span><span style='font-size:8.5pt;font-family:
Courier;mso-bidi-font-family:Courier;color:black'>'^' </span><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>can be substituted for the keyword </span><span style='font-size:
8.5pt;font-family:Courier;mso-bidi-font-family:Courier;color:black'>out</span><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>):<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;mso-layout-grid-align:none;
text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'>T&lt;out x, y, z&gt; <span
class=GramE>= ...</span> .<o:p></o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>This </span><span style='font-size:11.5pt;font-family:Times-Roman;
mso-bidi-font-family:Times-Roman'>nonterminal might be<span style='color:red'> </span><span
style='color:black'>used as follows:<o:p></o:p></span></span></p>

<p class=MsoNormal style='text-indent:.5in;mso-layout-grid-align:none;
text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'>... T&lt;out a, 'b', c+3<span
class=GramE>&gt; ...</span><o:p></o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>The production of the nonterminal </span><span style='font-size:
8.5pt;font-family:Courier;mso-bidi-font-family:Courier;color:black'>T </span><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>is translated to the following parsing method:<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in 1.5in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'>@staticmethod<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in 1.5in;mso-layout-grid-align:
none;text-autospace:none'><span class=GramE><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier;color:black'>def</span></span><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier;
color:black'> T(y, z):<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in 1.5in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'><span style='mso-tab-count:1'>       </span>.
. .<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in 1.5in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'><span style='mso-tab-count:1'>       </span>x
= . . .<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in 1.5in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'><span style='mso-tab-count:1'>       </span>.
. .<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in 1.5in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'><span style='mso-tab-count:1'>       </span><span
class=GramE>return</span> x<o:p></o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman'>Note
that if expressions that are passed as actual input attributes are bracketed by
</span><span style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:
Courier'>'&lt;' </span><span style='font-size:11.5pt;font-family:Times-Roman;
mso-bidi-font-family:Times-Roman'>and </span><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier'>'&gt;' </span><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman'>they
may not contain the operator </span><span style='font-size:8.5pt;font-family:
Courier;mso-bidi-font-family:Courier'>'&gt;'</span><span style='font-size:11.5pt;
font-family:Times-Roman;mso-bidi-font-family:Times-Roman'>, which is the
closing attribute bracket. Such expressions might be assigned to a temporary
variable, which can then be passed as an attribute. Alternatively Coco/R also
allows for attribute lists to be bracketed by </span><span style='font-size:
8.5pt;font-family:Courier;mso-bidi-font-family:Courier'>'&lt;.' </span><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman'>and
</span><span style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:
Courier'>'.&gt;'</span><span style='font-size:11.5pt;font-family:Times-Roman;
mso-bidi-font-family:Times-Roman'> which avoids the need for a temporary
variable.<o:p></o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>Coco/R checks that nonterminals with attributes are always used
with attributes and that nonterminals without attributes are always used
without attributes. However, it does not check the correspondence between
formal and actual attributes, which is left to the compiler of the target
language.<o:p></o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>In spite of Coco/R’s limitation of a single ‘out’ attribute, it’s
still possible to return more than one value from a production.<span
style='mso-spacerun:yes'>  </span>This can be done via a Python <span
class=SpellE>tuple</span>.<span style='mso-spacerun:yes'>  </span>Take this
production:<o:p></o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;mso-layout-grid-align:none;
text-autospace:none'><span style='font-size:11.5pt;font-family:Times-Roman;
mso-bidi-font-family:Times-Roman;color:black'>Symbol&lt;out s&gt; =<o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:.5in;text-indent:.5in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:11.5pt;font-family:Times-Roman;
mso-bidi-font-family:Times-Roman;color:black'>…<o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:.5in;text-indent:.5in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:11.5pt;font-family:Times-Roman;
mso-bidi-font-family:Times-Roman;color:black'><span style='mso-tab-count:3'>                                    </span>/*
somewhere in the body of the production assign a <span class=SpellE>tuple</span>
to s */<o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:.5in;text-indent:.5in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:11.5pt;font-family:Times-Roman;
mso-bidi-font-family:Times-Roman;color:black'><span style='mso-tab-count:3'>                                    </span>(<span
class=GramE>. …</span> s = name, kind .)<o:p></o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>If the semantic action of a production assigns a <span
class=SpellE>tuple</span> to the ‘out’ attribute, then all those values will be
returned from the generated parser function.<span style='mso-spacerun:yes'> 
</span>The values can be retrieved as follows:<o:p></o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'><span style='mso-tab-count:1'>            </span>X =<o:p></o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'><span style='mso-tab-count:5'>                                                            </span>/*
<span class=GramE>Since</span> the production Symbol returns a <span
class=SpellE>tuple</span>, when we use s, we can unpack the values */<o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:.5in;text-indent:.5in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:11.5pt;font-family:Times-Roman;
mso-bidi-font-family:Times-Roman;color:black'>… Symbol&lt;out s&gt;<span
style='mso-tab-count:1'>          </span>(. name, kind = s <span class=GramE>…
.)</span><o:p></o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>Simply unpack the output attribute, and the individual return values
are available for use.<o:p></o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
class=GramE><b><span style='font-size:11.5pt;font-family:Times-Bold;mso-bidi-font-family:
Times-Bold;color:black'>Attributes of terminal symbols</span></b><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>.</span></span><span style='font-size:11.5pt;font-family:Times-Roman;
mso-bidi-font-family:Times-Roman;color:black'> Terminal symbols do not have
attributes in Cocol/R. For every token, however, the scanner returns the token
value (i.e. the token's string representation) as well as the line and column number
of the token (see Section 3.3.4). This information can be viewed as output
attributes of that token. If users </span><span style='font-size:11.5pt;
font-family:Times-Roman;mso-bidi-font-family:Times-Roman'>wish <span
style='color:black'>to access this data they can wrap a token into a
nonterminal with the desired attributes, for example:<o:p></o:p></span></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in 3.0in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'>Ident &lt;out name&gt; =<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in 3.0in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'><span style='mso-tab-count:1'>       </span>Ident<span
style='mso-tab-count:1'>                      </span>(. name = <span
class=SpellE><span class=GramE>Parser.<span style='color:windowtext'>token.</span>val</span></span><span
class=GramE> .)</span><o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in 3.0in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'><span style='mso-tab-count:1'>       </span>.<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in 3.0in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'>Number &lt;out value&gt; =<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in 3.0in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'><span style='mso-tab-count:1'>       </span>Number<span
style='mso-tab-count:1'>                     </span>(. value = <span
class=GramE>int(</span><span class=SpellE>Parser.<span style='color:windowtext'>token.val</span></span>)
.)<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in 3.0in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'><span style='mso-tab-count:1'>       </span>.<o:p></o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>The variable</span><span style='font-size:11.5pt;font-family:Times-Roman;
mso-bidi-font-family:Times-Roman'> </span><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier'>token<span style='color:red'>
</span></span><span style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:
Times-Roman;color:black'>is the most recently recognized token. Its </span><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman'>field
</span><span class=SpellE><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier'>Parser.token.val</span></span><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier;
color:red'> </span><span style='font-size:11.5pt;font-family:Times-Roman;
mso-bidi-font-family:Times-Roman;color:black'>holds the textual representation
of the token (see Section 3.3.4).<o:p></o:p></span></p>

<h3>2.4.4 The Symbol ANY</h3>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>In the productions of the grammar the symbol </span><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier;
color:black'>ANY </span><span style='font-size:11.5pt;font-family:Times-Roman;
mso-bidi-font-family:Times-Roman;color:black'>denotes any token that is not an
alternative to that </span><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'>ANY </span><span style='font-size:
11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman'>symbol in the
context where it appears.<span style='color:black'> It can be used to
conveniently parse structures that contain arbitrary text. The following production,
for example, processes an attribute list in Cocol/R and returns the number of
characters between the angle brackets:<o:p></o:p></span></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in 1.5in 3.0in;
mso-layout-grid-align:none;text-autospace:none'><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier;color:black'>Attributes
&lt;out length&gt; =<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in 1.5in 3.0in;
mso-layout-grid-align:none;text-autospace:none'><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier;color:black'><span
style='mso-tab-count:1'>       </span>'&lt;'<span style='mso-tab-count:2'>                        </span>(.
beg = <span class=SpellE>Parser.<span style='color:windowtext'>token.</span>pos</span>
+ <span class=GramE>1 .)</span><o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in 1.5in 3.0in;
mso-layout-grid-align:none;text-autospace:none'><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier;color:black'><span
style='mso-tab-count:2'>              </span><span class=GramE>{ ANY</span> }<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in 1.5in 3.0in;
mso-layout-grid-align:none;text-autospace:none'><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier;color:black'><span
style='mso-tab-count:1'>       </span>'&gt;'<span style='mso-tab-count:2'>                        </span>(.
length = <span class=SpellE>Parser.<span style='color:windowtext'>token.</span>pos</span>
- <span class=GramE>beg .)</span><o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in 1.5in 3.0in;
mso-layout-grid-align:none;text-autospace:none'><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier;color:black'><span
style='mso-tab-count:1'>       </span>.<o:p></o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>In this example the token </span><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier;color:black'>'&gt;' </span><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>is an implicit alternative of the </span><span style='font-size:
8.5pt;font-family:Courier;mso-bidi-font-family:Courier;color:black'>ANY </span><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>symbol in curly braces. The meaning is that this </span><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier;
color:black'>ANY </span><span style='font-size:11.5pt;font-family:Times-Roman;
mso-bidi-font-family:Times-Roman;color:black'>matches any token except </span><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier;
color:black'>'&gt;'</span><span style='font-size:11.5pt;font-family:Times-Roman;
mso-bidi-font-family:Times-Roman;color:black'>. </span><span class=SpellE><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier'>Parser.token.pos</span></span><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier;
color:red'> </span><span style='font-size:11.5pt;font-family:Times-Roman;
mso-bidi-font-family:Times-Roman;color:black'>is the source text position of
the most recently recognized token (see Section 3.3.4).<o:p></o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>Here is another example that counts the number of statements in a
block:<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in 1.5in 3.5in;
mso-layout-grid-align:none;text-autospace:none'><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier;color:black'>Block &lt;out <span
class=SpellE>stmts</span>&gt; =<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in 1.5in 3.5in;
mso-layout-grid-align:none;text-autospace:none'><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier;color:black'><span
style='mso-tab-count:1'>       </span>'{'<span style='mso-tab-count:2'>                               </span>(.
<span class=SpellE>stmts</span> = <span class=GramE>0 .)</span><o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in 1.5in 3.5in;
mso-layout-grid-align:none;text-autospace:none'><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier;color:black'><span
style='mso-tab-count:1'>       </span>{ ';'<span style='mso-tab-count:2'>                             </span>(.
<span class=SpellE>Stmts</span> += <span class=GramE>1 .)</span><o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in 1.5in 3.5in;
mso-layout-grid-align:none;text-autospace:none'><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier;color:black'><span
style='mso-tab-count:1'>       </span>| '{' Block&lt;out n&gt; '}'<span
style='mso-tab-count:1'>            </span>(. <span class=SpellE>stmts</span>
+= <span class=GramE>n .)</span><o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in 1.5in 3.5in;
mso-layout-grid-align:none;text-autospace:none'><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier;color:black'><span
style='mso-tab-count:1'>       </span>| ANY<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in 1.5in 3.5in;
mso-layout-grid-align:none;text-autospace:none'><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier;color:black'><span
style='mso-tab-count:1'>       </span>}<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in 1.5in 3.5in;
mso-layout-grid-align:none;text-autospace:none'><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier;color:black'><span
style='mso-tab-count:1'>       </span>'}'.<o:p></o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>In this example the </span><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier;color:black'>ANY </span><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>matches any token except </span><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier;color:black'>';'</span><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>, </span><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'>'{' </span><span style='font-size:
11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;color:black'>and
</span><span style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:
Courier;color:black'>'}'</span><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier'>, </span><span style='font-size:11.5pt;
font-family:Times-Roman;mso-bidi-font-family:Times-Roman'>which are its
alternatives in this context.<o:p></o:p></span></p>

<h3>2.4.5 <span class=GramE>LL(</span>1) Conflicts</h3>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>Recursive descent parsing requires that the grammar of the parsed
language is <span class=GramE>LL(</span>1) (i.e. <span class=SpellE>parsable</span>
from </span><b><span style='font-size:11.5pt;font-family:Times-Bold;mso-bidi-font-family:
Times-Bold;color:black'>L</span></b><span style='font-size:11.5pt;font-family:
Times-Roman;mso-bidi-font-family:Times-Roman;color:black'>eft to right with </span><b><span
style='font-size:11.5pt;font-family:Times-Bold;mso-bidi-font-family:Times-Bold;
color:black'>L</span></b><span style='font-size:11.5pt;font-family:Times-Roman;
mso-bidi-font-family:Times-Roman;color:black'>eft-canonical derivations and </span><b><span
style='font-size:11.5pt;font-family:Times-Bold;mso-bidi-font-family:Times-Bold;
color:black'>1 </span></b><span style='font-size:11.5pt;font-family:Times-Roman;
mso-bidi-font-family:Times-Roman;color:black'>lookahead symbol). This means
that at any point in the grammar the parser must be able to decide on the basis
of <span class=GramE>a single lookahead symbol which of several possible
alternatives have</span> to be selected. The following production, for example,
is not <span class=GramE>LL(</span>1):<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'>Statement = ident '=' Expression ';'<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'><span style='mso-tab-count:1'>       </span>|
<span class=GramE>ident</span> '(' [<span class=SpellE>ActualParameters</span>]
')' ';'<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'><span style='mso-tab-count:1'>       </span>|
... .<o:p></o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>Both alternatives start with the symbol </span><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier;
color:black'>ident</span><span style='font-size:11.5pt;font-family:Times-Roman;
mso-bidi-font-family:Times-Roman'>. If the parser comes to the beginning of a </span><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier'>Statement
</span><span style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:
Times-Roman'>and finds an </span><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier'>ident </span><span style='font-size:11.5pt;
font-family:Times-Roman;mso-bidi-font-family:Times-Roman'>as the next input
token<span style='color:black'>, it cannot distinguish between the two
alternatives. However, this production can easily be transformed to<o:p></o:p></span></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'>Statement =<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'><span style='mso-tab-count:1'>       </span>Ident<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'><span style='mso-tab-count:1'>       </span><span
class=GramE>( '</span>=' Expression ';'<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'><span style='mso-tab-count:1'>       </span>|
'(' <span class=GramE>[ <span class=SpellE>ActualParameters</span></span> ] ')'
';'<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'><span style='mso-tab-count:1'>       </span>)<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'><span style='mso-tab-count:1'>       </span>|
...<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'><span style='mso-tab-count:1'>       </span>.<o:p></o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
class=GramE><span style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:
Times-Roman;color:black'>where</span></span><span style='font-size:11.5pt;
font-family:Times-Roman;mso-bidi-font-family:Times-Roman;color:black'> all
alternatives start with distinct symbols and the LL(1) conflict has
disappeared. <span class=GramE>LL(</span>1) conflicts can arise not only from
explicit alternatives like those in the example above but also from implicit
alternatives that are hidden in optional or iterative EBNF expressions. The
following list shows how to check for LL(1) conflicts in these situations
(Greek symbols denote arbitrary EBNF expressions such as </span><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier;
color:black'>a[b]C</span><span style='font-size:11.5pt;font-family:Times-Roman;
mso-bidi-font-family:Times-Roman;color:black'>; </span><i><span
style='font-size:11.5pt;font-family:Times-Italic;mso-bidi-font-family:Times-Italic;
color:black'>first</span></i><span style='font-size:11.5pt;font-family:Times-Roman;
mso-bidi-font-family:Times-Roman;color:black'>(</span><span style='font-size:
10.5pt;font-family:Symbol;mso-bidi-font-family:Symbol;color:black'>a</span><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>) denotes the set of terminal start symbols of the EBNF expression
</span><span style='font-size:10.5pt;font-family:Symbol;mso-bidi-font-family:
Symbol;color:black'>a</span><span style='font-size:11.5pt;font-family:Times-Roman;
mso-bidi-font-family:Times-Roman;color:black'>; </span><i><span
style='font-size:11.5pt;font-family:Times-Italic;mso-bidi-font-family:Times-Italic;
color:black'>follow</span></i><span style='font-size:11.5pt;font-family:Times-Roman;
mso-bidi-font-family:Times-Roman;color:black'>(</span><span style='font-size:
8.5pt;font-family:Courier;mso-bidi-font-family:Courier;color:black'>A</span><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>) denotes the set of terminal symbols that can follow the
nonterminal </span><span style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:
Courier;color:black'>A </span><span style='font-size:11.5pt;font-family:Times-Roman;
mso-bidi-font-family:Times-Roman;color:black'>in any other production):<o:p></o:p></span></p>

<ul style='margin-top:0in' type=disc>
 <li class=MsoNormal style='color:black;mso-list:l3 level1 lfo9;tab-stops:list .5in;
     mso-layout-grid-align:none;text-autospace:none'><b><span style='font-size:
     11.5pt;font-family:Times-Bold;mso-bidi-font-family:Times-Bold'>Explicit
     alternatives<o:p></o:p></span></b></li>
</ul>

<p class=MsoNormal style='tab-stops:list .5in;mso-layout-grid-align:none;
text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'><span style='mso-tab-count:1'>       </span>A
= </span><span style='font-size:9.5pt;font-family:Symbol;mso-bidi-font-family:
Symbol;color:black'>a</span><span style='font-size:9.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'>|</span><span style='font-size:9.5pt;
font-family:Symbol;mso-bidi-font-family:Symbol;color:black'>b</span><span
style='font-size:9.5pt;font-family:Courier;mso-bidi-font-family:Courier;
color:black'>|</span><span style='font-size:9.5pt;font-family:Symbol;
mso-bidi-font-family:Symbol;color:black'>g</span><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier;color:black'>. </span><span
class=GramE><span style='font-size:9.5pt;font-family:Times-Roman;mso-bidi-font-family:
Times-Roman;color:black'>check</span></span><span style='font-size:9.5pt;
font-family:Times-Roman;mso-bidi-font-family:Times-Roman;color:black'> that </span><i><span
style='font-size:9.5pt;font-family:Times-Italic;mso-bidi-font-family:Times-Italic;
color:black'>first</span></i><span style='font-size:9.5pt;font-family:Times-Roman;
mso-bidi-font-family:Times-Roman;color:black'>(</span><span style='font-size:
9.5pt;font-family:Symbol;mso-bidi-font-family:Symbol;color:black'>a</span><span
style='font-size:9.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>) </span><span style='font-size:9.5pt;font-family:Symbol;
mso-bidi-font-family:Symbol;color:black'>Ç </span><i><span style='font-size:
9.5pt;font-family:Times-Italic;mso-bidi-font-family:Times-Italic;color:black'>first</span></i><span
style='font-size:9.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>(</span><span style='font-size:9.5pt;font-family:Symbol;
mso-bidi-font-family:Symbol;color:black'>b</span><span style='font-size:9.5pt;
font-family:Times-Roman;mso-bidi-font-family:Times-Roman;color:black'>) = {} </span><span
style='font-size:9.5pt;font-family:Symbol;mso-bidi-font-family:Symbol;
color:black'>Ù </span><i><span style='font-size:9.5pt;font-family:Times-Italic;
mso-bidi-font-family:Times-Italic;color:black'>first</span></i><span
style='font-size:9.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>(</span><span style='font-size:9.5pt;font-family:Symbol;
mso-bidi-font-family:Symbol;color:black'>a</span><span style='font-size:9.5pt;
font-family:Times-Roman;mso-bidi-font-family:Times-Roman;color:black'>) </span><span
style='font-size:9.5pt;font-family:Symbol;mso-bidi-font-family:Symbol;
color:black'>Ç </span><i><span style='font-size:9.5pt;font-family:Times-Italic;
mso-bidi-font-family:Times-Italic;color:black'>first</span></i><span
style='font-size:9.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>(</span><span style='font-size:9.5pt;font-family:Symbol;
mso-bidi-font-family:Symbol;color:black'>g</span><span style='font-size:9.5pt;
font-family:Times-Roman;mso-bidi-font-family:Times-Roman;color:black'>) = {} </span><span
style='font-size:9.5pt;font-family:Symbol;mso-bidi-font-family:Symbol;
color:black'>Ù </span><i><span style='font-size:9.5pt;font-family:Times-Italic;
mso-bidi-font-family:Times-Italic;color:black'>first</span></i><span
style='font-size:9.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>(</span><span style='font-size:9.5pt;font-family:Symbol;
mso-bidi-font-family:Symbol;color:black'>b</span><span style='font-size:9.5pt;
font-family:Times-Roman;mso-bidi-font-family:Times-Roman;color:black'>) </span><span
style='font-size:9.5pt;font-family:Symbol;mso-bidi-font-family:Symbol;
color:black'>Ç </span><i><span style='font-size:9.5pt;font-family:Times-Italic;
mso-bidi-font-family:Times-Italic;color:black'>first</span></i><span
style='font-size:9.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>(</span><span style='font-size:9.5pt;font-family:Symbol;
mso-bidi-font-family:Symbol;color:black'>g</span><span style='font-size:9.5pt;
font-family:Times-Roman;mso-bidi-font-family:Times-Roman;color:black'>) = {}.<o:p></o:p></span></p>

<p class=MsoNormal style='tab-stops:list .5in;mso-layout-grid-align:none;
text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'><span style='mso-tab-count:1'>       </span>A
= (</span><span style='font-size:9.5pt;font-family:Symbol;mso-bidi-font-family:
Symbol;color:black'>a</span><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'>|<span class=GramE>)<span
style='font-size:9.5pt;font-family:Symbol;mso-bidi-font-family:Symbol'>b</span></span>.
</span><span class=GramE><span style='font-size:9.5pt;font-family:Times-Roman;
mso-bidi-font-family:Times-Roman;color:black'>check</span></span><span
style='font-size:9.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'> that </span><i><span style='font-size:9.5pt;font-family:Times-Italic;
mso-bidi-font-family:Times-Italic;color:black'>first</span></i><span
style='font-size:9.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>(</span><span style='font-size:9.5pt;font-family:Symbol;
mso-bidi-font-family:Symbol;color:black'>a</span><span style='font-size:9.5pt;
font-family:Times-Roman;mso-bidi-font-family:Times-Roman;color:black'>) </span><span
style='font-size:9.5pt;font-family:Symbol;mso-bidi-font-family:Symbol;
color:black'>Ç </span><i><span style='font-size:9.5pt;font-family:Times-Italic;
mso-bidi-font-family:Times-Italic;color:black'>first</span></i><span
style='font-size:9.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>(</span><span style='font-size:9.5pt;font-family:Symbol;
mso-bidi-font-family:Symbol;color:black'>b</span><span style='font-size:9.5pt;
font-family:Times-Roman;mso-bidi-font-family:Times-Roman;color:black'>) = {}<o:p></o:p></span></p>

<p class=MsoNormal style='tab-stops:list .5in;mso-layout-grid-align:none;
text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'><span style='mso-tab-count:1'>       </span>A
= (</span><span style='font-size:9.5pt;font-family:Symbol;mso-bidi-font-family:
Symbol;color:black'>a</span><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'>|). </span><span class=GramE><span
style='font-size:9.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>check</span></span><span style='font-size:9.5pt;font-family:Times-Roman;
mso-bidi-font-family:Times-Roman;color:black'> that </span><i><span
style='font-size:9.5pt;font-family:Times-Italic;mso-bidi-font-family:Times-Italic;
color:black'>first</span></i><span style='font-size:9.5pt;font-family:Times-Roman;
mso-bidi-font-family:Times-Roman;color:black'>(</span><span style='font-size:
9.5pt;font-family:Symbol;mso-bidi-font-family:Symbol;color:black'>a</span><span
style='font-size:9.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>) </span><span style='font-size:9.5pt;font-family:Symbol;
mso-bidi-font-family:Symbol;color:black'>Ç </span><i><span style='font-size:
9.5pt;font-family:Times-Italic;mso-bidi-font-family:Times-Italic;color:black'>follow</span></i><span
style='font-size:9.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>(</span><span style='font-size:9.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'>A</span><span style='font-size:9.5pt;
font-family:Times-Roman;mso-bidi-font-family:Times-Roman;color:black'>) = {}<o:p></o:p></span></p>

<ul style='margin-top:0in' type=disc>
 <li class=MsoNormal style='color:black;mso-list:l3 level1 lfo9;tab-stops:list .5in;
     mso-layout-grid-align:none;text-autospace:none'><b><span style='font-size:
     11.5pt;font-family:Times-Bold;mso-bidi-font-family:Times-Bold'>Options<o:p></o:p></span></b></li>
</ul>

<p class=MsoNormal style='text-indent:.5in;mso-layout-grid-align:none;
text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'>A = [</span><span style='font-size:
9.5pt;font-family:Symbol;mso-bidi-font-family:Symbol;color:black'>a</span><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier;
color:black'>] </span><span style='font-size:9.5pt;font-family:Symbol;
mso-bidi-font-family:Symbol;color:black'>b</span><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier;color:black'>. </span><span
class=GramE><span style='font-size:9.5pt;font-family:Times-Roman;mso-bidi-font-family:
Times-Roman;color:black'>check</span></span><span style='font-size:9.5pt;
font-family:Times-Roman;mso-bidi-font-family:Times-Roman;color:black'> that </span><i><span
style='font-size:9.5pt;font-family:Times-Italic;mso-bidi-font-family:Times-Italic;
color:black'>first</span></i><span style='font-size:9.5pt;font-family:Times-Roman;
mso-bidi-font-family:Times-Roman;color:black'>(</span><span style='font-size:
9.5pt;font-family:Symbol;mso-bidi-font-family:Symbol;color:black'>a</span><span
style='font-size:9.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>) </span><span style='font-size:9.5pt;font-family:Symbol;
mso-bidi-font-family:Symbol;color:black'>Ç </span><i><span style='font-size:
9.5pt;font-family:Times-Italic;mso-bidi-font-family:Times-Italic;color:black'>first</span></i><span
style='font-size:9.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>(</span><span style='font-size:9.5pt;font-family:Symbol;
mso-bidi-font-family:Symbol;color:black'>b</span><span style='font-size:9.5pt;
font-family:Times-Roman;mso-bidi-font-family:Times-Roman;color:black'>) = {}<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;mso-layout-grid-align:none;
text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'>A = [</span><span style='font-size:
9.5pt;font-family:Symbol;mso-bidi-font-family:Symbol;color:black'>a</span><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier;
color:black'>]. </span><span class=GramE><span style='font-size:9.5pt;
font-family:Times-Roman;mso-bidi-font-family:Times-Roman;color:black'>check</span></span><span
style='font-size:9.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'> that </span><i><span style='font-size:9.5pt;font-family:Times-Italic;
mso-bidi-font-family:Times-Italic;color:black'>first</span></i><span
style='font-size:9.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>(</span><span style='font-size:9.5pt;font-family:Symbol;
mso-bidi-font-family:Symbol;color:black'>a</span><span style='font-size:9.5pt;
font-family:Times-Roman;mso-bidi-font-family:Times-Roman;color:black'>) </span><span
style='font-size:9.5pt;font-family:Symbol;mso-bidi-font-family:Symbol;
color:black'>Ç </span><i><span style='font-size:9.5pt;font-family:Times-Italic;
mso-bidi-font-family:Times-Italic;color:black'>follow</span></i><span
style='font-size:9.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>(</span><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'>A</span><span style='font-size:9.5pt;
font-family:Times-Roman;mso-bidi-font-family:Times-Roman;color:black'>) = {}<o:p></o:p></span></p>

<ul style='margin-top:0in' type=disc>
 <li class=MsoNormal style='color:black;mso-list:l3 level1 lfo9;tab-stops:list .5in;
     mso-layout-grid-align:none;text-autospace:none'><b><span style='font-size:
     11.5pt;font-family:Times-Bold;mso-bidi-font-family:Times-Bold'>Iterations<o:p></o:p></span></b></li>
</ul>

<p class=MsoNormal style='text-indent:.5in;mso-layout-grid-align:none;
text-autospace:none'><span style='font-size:9.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'>A = {</span><span style='font-size:
9.5pt;font-family:Symbol;mso-bidi-font-family:Symbol;color:black'>a</span><span
style='font-size:9.5pt;font-family:Courier;mso-bidi-font-family:Courier;
color:black'>} </span><span style='font-size:9.5pt;font-family:Symbol;
mso-bidi-font-family:Symbol;color:black'>b</span><span style='font-size:9.5pt;
font-family:Courier;mso-bidi-font-family:Courier;color:black'>. </span><span
class=GramE><span style='font-size:9.5pt;font-family:Times-Roman;mso-bidi-font-family:
Times-Roman;color:black'>check</span></span><span style='font-size:9.5pt;
font-family:Times-Roman;mso-bidi-font-family:Times-Roman;color:black'> that </span><i><span
style='font-size:9.5pt;font-family:Times-Italic;mso-bidi-font-family:Times-Italic;
color:black'>first</span></i><span style='font-size:9.5pt;font-family:Times-Roman;
mso-bidi-font-family:Times-Roman;color:black'>(</span><span style='font-size:
9.5pt;font-family:Symbol;mso-bidi-font-family:Symbol;color:black'>a</span><span
style='font-size:9.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>) </span><span style='font-size:9.5pt;font-family:Symbol;
mso-bidi-font-family:Symbol;color:black'>Ç </span><i><span style='font-size:
9.5pt;font-family:Times-Italic;mso-bidi-font-family:Times-Italic;color:black'>first</span></i><span
style='font-size:9.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>(</span><span style='font-size:9.5pt;font-family:Symbol;
mso-bidi-font-family:Symbol;color:black'>b</span><span style='font-size:9.5pt;
font-family:Times-Roman;mso-bidi-font-family:Times-Roman;color:black'>) = {}<o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:.5in;mso-layout-grid-align:none;
text-autospace:none'><span style='font-size:9.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'>A = {</span><span style='font-size:
9.5pt;font-family:Symbol;mso-bidi-font-family:Symbol;color:black'>a</span><span
style='font-size:9.5pt;font-family:Courier;mso-bidi-font-family:Courier;
color:black'>}. </span><span class=GramE><span style='font-size:9.5pt;
font-family:Times-Roman;mso-bidi-font-family:Times-Roman;color:black'>check</span></span><span
style='font-size:9.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'> that </span><i><span style='font-size:9.5pt;font-family:Times-Italic;
mso-bidi-font-family:Times-Italic;color:black'>first</span></i><span
style='font-size:9.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>(</span><span style='font-size:9.5pt;font-family:Symbol;
mso-bidi-font-family:Symbol;color:black'>a</span><span style='font-size:9.5pt;
font-family:Times-Roman;mso-bidi-font-family:Times-Roman;color:black'>) </span><span
style='font-size:9.5pt;font-family:Symbol;mso-bidi-font-family:Symbol;
color:black'>Ç </span><i><span style='font-size:9.5pt;font-family:Times-Italic;
mso-bidi-font-family:Times-Italic;color:black'>follow</span></i><span
style='font-size:9.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>(</span><span style='font-size:9.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'>A</span><span style='font-size:9.5pt;
font-family:Times-Roman;mso-bidi-font-family:Times-Roman;color:black'>) = {}<o:p></o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>It would be very tedious and error-prone to check all these conditions
manually for a grammar of a realistic size. Fortunately, Coco/R does that
automatically. For example, </span><span style='font-size:11.5pt;font-family:
Times-Roman;mso-bidi-font-family:Times-Roman'>processing <span
style='color:black'>the grammar<o:p></o:p></span></span></p>

<p class=MsoNormal style='text-indent:.5in;mso-layout-grid-align:none;
text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'>A = (a | B C d).<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;mso-layout-grid-align:none;
text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'>B = <span class=GramE>[ b</span> ] a.<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;mso-layout-grid-align:none;
text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'>C = c <span class=GramE>{ d</span> }.<o:p></o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
class=GramE><span style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:
Times-Roman;color:black'>will</span></span><span style='font-size:11.5pt;
font-family:Times-Roman;mso-bidi-font-family:Times-Roman;color:black'> result
in the following LL(1) warnings:<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;mso-layout-grid-align:none;
text-autospace:none'><span class=GramE><span style='font-size:8.5pt;font-family:
Courier;mso-bidi-font-family:Courier;color:black'>LL(</span></span><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier;
color:black'>1) warning in A: a is the start of several alternatives<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;mso-layout-grid-align:none;
text-autospace:none'><span class=GramE><span style='font-size:8.5pt;font-family:
Courier;mso-bidi-font-family:Courier;color:black'>LL(</span></span><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier;
color:black'>1) warning in C: d is the start &amp; successor of deletable
structure<o:p></o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>The first conflict arises because </span><span style='font-size:
8.5pt;font-family:Courier;mso-bidi-font-family:Courier;color:black'>B </span><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>can start with <span class=GramE>an <span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier'>a</span></span>. The second
conflict comes from the fact that </span><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier;color:black'>C </span><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>may be followed by a </span><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier;color:black'>d</span><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>, and so the parser does not know whether it should do another
iteration of </span><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'>{d} </span><span style='font-size:
11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;color:black'>in
</span><span style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:
Courier;color:black'>C </span><span style='font-size:11.5pt;font-family:Times-Roman;
mso-bidi-font-family:Times-Roman;color:black'>or terminate </span><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier;
color:black'>C </span><span style='font-size:11.5pt;font-family:Times-Roman;
mso-bidi-font-family:Times-Roman;color:black'>and continue with the </span><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier;
color:black'>d </span><span style='font-size:11.5pt;font-family:Times-Roman;
mso-bidi-font-family:Times-Roman;color:black'>outside.<o:p></o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>Another situation that leads to a conflict is when an expression
in curly or square brackets is deletable, e.g.:<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;mso-layout-grid-align:none;
text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'>A = [B] a.<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;mso-layout-grid-align:none;
text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'>B = {b}.<o:p></o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>If the parser tries to recognize </span><span style='font-size:
8.5pt;font-family:Courier;mso-bidi-font-family:Courier;color:black'>A </span><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>and sees <span class=GramE>an</span> </span><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier;
color:black'>a </span><span style='font-size:11.5pt;font-family:Times-Roman;
mso-bidi-font-family:Times-Roman;color:black'>it cannot decide whether to enter
the deletable symbol </span><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'>B </span><span style='font-size:11.5pt;
font-family:Times-Roman;mso-bidi-font-family:Times-Roman;color:black'>or to
skip </span><span style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:
Courier;color:black'>[B]</span><span style='font-size:11.5pt;font-family:Times-Roman;
mso-bidi-font-family:Times-Roman;color:black'>. Therefore Coco/R prints the
warning:<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;mso-layout-grid-align:none;
text-autospace:none'><span class=GramE><span style='font-size:8.5pt;font-family:
Courier;mso-bidi-font-family:Courier;color:black'>LL(</span></span><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier;
color:black'>1) warning in A: contents of [...] or {...} must not be deletable<o:p></o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>Note that Coco/R reports <span class=GramE>LL(</span>1) conflicts
as warnings, not as errors. </span><span style='font-size:11.5pt;font-family:
Times-Roman;mso-bidi-font-family:Times-Roman'>Whenever a parser generated by
Coco/R <span style='color:black'>sees two or more alternatives that can start
with the same token it always chooses the first one. If this is what the user
intends then everything is fine</span>, as<span style='color:red'> </span><span
style='color:black'>in the well-known example of the </span></span><i><span
style='font-size:11.5pt;font-family:Times-Italic;mso-bidi-font-family:Times-Italic;
color:black'>dangling else </span></i><span style='font-size:11.5pt;font-family:
Times-Roman;mso-bidi-font-family:Times-Roman;color:black'>that occurs in many
programming languages:<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;mso-layout-grid-align:none;
text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'>Statement = &quot;if&quot; '('
Expression ')' Statement [&quot;else&quot; Statement]<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;mso-layout-grid-align:none;
text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'>| ... .<o:p></o:p></span></p>

<p class=MsoNormal style='mso-outline-level:1;mso-layout-grid-align:none;
text-autospace:none'><span style='font-size:11.5pt;font-family:Times-Roman;
mso-bidi-font-family:Times-Roman;color:black'>Input for this grammar like<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;mso-layout-grid-align:none;
text-autospace:none'><span class=GramE><span style='font-size:8.5pt;font-family:
Courier;mso-bidi-font-family:Courier;color:black'>if</span></span><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier;
color:black'> (a &gt; b) if (a &gt; c) max = a; else max = b;<o:p></o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
class=GramE><span style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:
Times-Roman;color:black'>is</span></span><span style='font-size:11.5pt;
font-family:Times-Roman;mso-bidi-font-family:Times-Roman;color:black'>
ambiguous: does the </span><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'>&quot;else&quot; </span><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>belongs to the inner or to the outer if statement? The <span
class=GramE>LL(</span>1) conflict arises because<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;mso-layout-grid-align:none;
text-autospace:none'><span class=GramE><i><span style='font-size:11.5pt;
font-family:Times-Italic;mso-bidi-font-family:Times-Italic;color:black'>first</span></i><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>(</span></span><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'>&quot;else&quot; Statement</span><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>) </span><span style='font-size:9.5pt;font-family:Symbol;
mso-bidi-font-family:Symbol;color:black'>Ç </span><i><span style='font-size:
11.5pt;font-family:Times-Italic;mso-bidi-font-family:Times-Italic;color:black'>follow</span></i><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>(</span><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'>Statement</span><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>) = {</span><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'>&quot;else&quot;</span><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>}<o:p></o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>However, this is not a big problem, because the parser chooses the
first matching alternative, which is the </span><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier;color:black'>&quot;else&quot; </span><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>of the inner if statement. This is exactly what we want.<o:p></o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal style='mso-outline-level:1;mso-layout-grid-align:none;
text-autospace:none'><b><span style='font-size:11.5pt;font-family:Helvetica-Bold;
mso-bidi-font-family:Helvetica-Bold;color:black'>Resolving <span class=GramE>LL(</span>1)
conflicts by grammar transformations<o:p></o:p></span></b></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>If Coco/R reports an <span class=GramE>LL(</span>1) conflict the
user should try to eliminate it by transforming the grammar as is shown in the
following examples.<o:p></o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
class=GramE><b><span style='font-size:11.5pt;font-family:Times-Bold;mso-bidi-font-family:
Times-Bold;color:black'>Factorization</span></b><span style='font-size:11.5pt;
font-family:Times-Roman;mso-bidi-font-family:Times-Roman;color:black'>.</span></span><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'> Most <span class=GramE>LL(</span>1) conflicts can be resolved by
factorization, i.e. by extracting the common parts of conflicting alternatives
and moving them to the front. For example, the production<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;mso-layout-grid-align:none;
text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'>A = a b c | a b d.<o:p></o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
class=GramE><span style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:
Times-Roman;color:black'>can</span></span><span style='font-size:11.5pt;
font-family:Times-Roman;mso-bidi-font-family:Times-Roman;color:black'> be
transformed to<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;mso-layout-grid-align:none;
text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'>A = a b (c | d).<o:p></o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
class=GramE><b><span style='font-size:11.5pt;font-family:Times-Bold;mso-bidi-font-family:
Times-Bold;color:black'>Left recursion</span></b><span style='font-size:11.5pt;
font-family:Times-Roman;mso-bidi-font-family:Times-Roman;color:black'>.</span></span><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'> Left recursion always represents an <span class=GramE>LL(</span>1)
conflict. In the production<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;mso-layout-grid-align:none;
text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'>A = A b | c.<o:p></o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
class=GramE><span style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:
Times-Roman;color:black'>both</span></span><span style='font-size:11.5pt;
font-family:Times-Roman;mso-bidi-font-family:Times-Roman;color:black'>
alternatives start with </span><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'>c </span><span style='font-size:11.5pt;
font-family:Times-Roman;mso-bidi-font-family:Times-Roman;color:black'>(because </span><i><span
style='font-size:11.5pt;font-family:Times-Italic;mso-bidi-font-family:Times-Italic;
color:black'>first</span></i><span style='font-size:11.5pt;font-family:Times-Roman;
mso-bidi-font-family:Times-Roman;color:black'>(</span><span style='font-size:
8.5pt;font-family:Courier;mso-bidi-font-family:Courier;color:black'>A</span><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>) = {</span><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'>c</span><span style='font-size:11.5pt;
font-family:Times-Roman;mso-bidi-font-family:Times-Roman;color:black'>}).
However, left recursion can always be transformed into an iteration, e.g. the
previous production becomes<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;mso-layout-grid-align:none;
text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'>A = c {b}.<o:p></o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
class=GramE><b><span style='font-size:11.5pt;font-family:Times-Bold;mso-bidi-font-family:
Times-Bold;color:black'>Hard conflicts</span></b><span style='font-size:11.5pt;
font-family:Times-Roman;mso-bidi-font-family:Times-Roman;color:black'>.</span></span><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'> Some <span class=GramE>LL(</span>1) conflicts cannot be resolved
by grammar transformations. Consider the following (simplified) productions
from the C# grammar:<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in 3.0in;mso-layout-grid-align:
none;text-autospace:none'><span class=SpellE><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier;color:black'>Expr</span></span><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier;
color:black'> = Factor {'+' Factor}.<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in 3.0in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'>Factor = '(' ident ')' Factor<span
style='mso-tab-count:1'>     </span>/* type cast */<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in 3.0in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'><span style='mso-tab-count:1'>       </span>|
'(' <span class=SpellE>Expr</span> ')'<span style='mso-tab-count:1'>             </span>/*
nested expression */<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in 3.0in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'><span style='mso-tab-count:1'>       </span>|
<span class=GramE>ident</span> | number.<o:p></o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>The conflict arises, because two alternatives of </span><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier;
color:black'>Factor </span><span style='font-size:11.5pt;font-family:Times-Roman;
mso-bidi-font-family:Times-Roman;color:black'>start with </span><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier;
color:black'>'('</span><span style='font-size:11.5pt;font-family:Times-Roman;
mso-bidi-font-family:Times-Roman;color:black'>. Even worse, </span><span
class=SpellE><span style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:
Courier;color:black'>Expr</span></span><span style='font-size:8.5pt;font-family:
Courier;mso-bidi-font-family:Courier;color:black'> </span><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>can also be derived to an </span><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier;color:black'>ident</span><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>. There is no way to get rid of this conflict by transforming the
grammar. The only way to resolve it is to look at the </span><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier;
color:black'>ident </span><span style='font-size:11.5pt;font-family:Times-Roman;
mso-bidi-font-family:Times-Roman;color:black'>following the </span><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier;
color:black'>'('</span><span style='font-size:11.5pt;font-family:Times-Roman;
mso-bidi-font-family:Times-Roman;color:black'>: if it denotes a </span><i><span
style='font-size:11.5pt;font-family:Times-Italic;mso-bidi-font-family:Times-Italic;
color:black'>type </span></i><span style='font-size:11.5pt;font-family:Times-Roman;
mso-bidi-font-family:Times-Roman;color:black'>the parser has to select the
first alternative otherwise the second one. We</span><span style='font-size:
11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman'> shall<span
style='color:red'> </span><span style='color:black'>deal with this kind of
conflict resolution in Section 2.4.6.<o:p></o:p></span></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
class=GramE><b><span style='font-size:11.5pt;font-family:Times-Bold;mso-bidi-font-family:
Times-Bold;color:black'>Readability issues</span></b><span style='font-size:
11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;color:black'>.</span></span><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'> Some grammar transformations can degrade the readability of the
grammar. Consider the following example (again taken from a simplified form of
the C# grammar):<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;mso-layout-grid-align:none;
text-autospace:none'><span class=SpellE><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier;color:black'>UsingClause</span></span><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier;
color:black'> = &quot;using&quot; <span class=GramE>[ ident</span> '=' ] <span
class=SpellE>Qualident</span> ';'.<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;mso-layout-grid-align:none;
text-autospace:none'><span class=SpellE><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier;color:black'>Qualident</span></span><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier;
color:black'> = ident <span class=GramE>{ '</span>.' ident }.<o:p></o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>The conflict is in </span><span class=SpellE><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier;
color:black'>UsingClause</span></span><span style='font-size:8.5pt;font-family:
Courier;mso-bidi-font-family:Courier;color:black'> </span><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>where both </span><span class=GramE><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier;color:black'>[ ident</span></span><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier;
color:black'> '=' ] </span><span style='font-size:11.5pt;font-family:Times-Roman;
mso-bidi-font-family:Times-Roman;color:black'>and </span><span class=SpellE><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier;
color:black'>Qualident</span></span><span style='font-size:8.5pt;font-family:
Courier;mso-bidi-font-family:Courier;color:black'> </span><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>start with </span><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'>ident</span><span style='font-size:
11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;color:black'>.
Although this conflict could be eliminated by transforming the production to<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in;mso-layout-grid-align:
none;text-autospace:none'><span class=SpellE><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier;color:black'>UsingClause</span></span><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier;
color:black'> = &quot;using&quot; ident <span class=GramE>( {</span> '.' ident
}<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'><span style='mso-tab-count:1'>       </span>|
'=' <span class=SpellE>Qualident</span><o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'><span style='mso-tab-count:1'>       </span>)';'.<o:p></o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
class=GramE><span style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:
Times-Roman;color:black'>the</span></span><span style='font-size:11.5pt;
font-family:Times-Roman;mso-bidi-font-family:Times-Roman;color:black'>
readability would clearly deteriorate. It is better to resolve this conflict as
shown in Section 2.4.6.<o:p></o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><b><span
style='font-size:11.5pt;font-family:Times-Bold;mso-bidi-font-family:Times-Bold;
color:black'><o:p>&nbsp;</o:p></span></b></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
class=GramE><b><span style='font-size:11.5pt;font-family:Times-Bold;mso-bidi-font-family:
Times-Bold;color:black'>Semantic issues</span></b><span style='font-size:11.5pt;
font-family:Times-Roman;mso-bidi-font-family:Times-Roman;color:black'>.</span></span><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'> Finally, factorization is sometimes inhibited by the fact that
the semantic processing of conflicting alternatives differs, e.g.:<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in 2.5in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'>A = ident<span style='mso-tab-count:
1'>                  </span></span><span style='font-size:8.5pt;font-family:
Courier;mso-bidi-font-family:Courier;color:#7F7F7F'>(. x = <span class=GramE>1
.)</span><o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in 2.5in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:#7F7F7F'><span style='mso-tab-count:1'>       </span></span><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier;
color:black'>{ ',' ident<span style='mso-tab-count:1'>          </span></span><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier;
color:#7F7F7F'>(. X += <span class=GramE>1 .)</span><o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in 2.5in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:#7F7F7F'><span style='mso-tab-count:1'>       </span></span><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier;
color:black'>} ':'<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in 2.5in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'><span style='mso-tab-count:1'>       </span>|
<span class=GramE>ident</span><span style='mso-tab-count:1'>              </span></span><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier;
color:#7F7F7F'>(. <span class=SpellE><span class=GramE>Parser.Foo</span></span><span
class=GramE>(</span>) .)<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in 2.5in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:#7F7F7F'><span style='mso-tab-count:1'>       </span></span><span
class=GramE><span style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:
Courier;color:black'>{ ',' ident <span style='mso-tab-count:1'>         </span></span><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier;
color:#7F7F7F'>(.</span></span><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:#7F7F7F'> <span class=SpellE><span
class=GramE>Parser.Bar</span></span><span class=GramE>(</span>) .)<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in 2.5in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:#7F7F7F'><span style='mso-tab-count:1'>       </span></span><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier;
color:black'>} ';'.<o:p></o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>The common parts of these two alternatives cannot be factored out,
because each </span><span style='font-size:11.5pt;font-family:Times-Roman;
mso-bidi-font-family:Times-Roman'>alternative has to be processed semantically
in its own way. Again<span style='color:black'> this problem can be solved with
the technique explained in Section 2.4.6.<o:p></o:p></span></span></p>

<h3>2.4.6 <span class=GramE>LL(</span>1) Conflict Resolvers</h3>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>A conflict resolver is a Boolean expression that is inserted into
the grammar at the beginning of the first of two conflicting alternatives and
decides, using a <span class=SpellE>multisymbol</span> <span class=SpellE>lookahead</span>
or a semantic check, whether this alternative matches the actual input. If the
resolver yields </span><span class=GramE><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier;color:black'>True</span></span><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>, the alternative prefixed by the resolver is selected, otherwise
the next alternative will be checked. A conflict resolver is written as <o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;mso-layout-grid-align:none;
text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'>Resolver = &quot;IF&quot; '(' ... any
expression ... ')<span class=GramE>' .</span><o:p></o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
class=GramE><span style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:
Times-Roman;color:black'>where</span></span><span style='font-size:11.5pt;
font-family:Times-Roman;mso-bidi-font-family:Times-Roman;color:black'> </span><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier;
color:black'>any </span><span style='font-size:11.5pt;font-family:Times-Roman;
mso-bidi-font-family:Times-Roman;color:black'>Boolean expression can be written
between the parentheses. In most cases this will be a function call that
returns </span><span style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:
Courier;color:black'>True </span><span style='font-size:11.5pt;font-family:
Times-Roman;mso-bidi-font-family:Times-Roman;color:black'>or </span><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier;
color:black'>False</span><span style='font-size:11.5pt;font-family:Times-Roman;
mso-bidi-font-family:Times-Roman;color:black'>.<o:p></o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>Thus we can resolve the <span class=GramE>LL(</span>1) conflict
from Section 2.4.5 in the following way:<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;mso-layout-grid-align:none;
text-autospace:none'><span class=SpellE><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier;color:black'>UsingClause</span></span><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier;
color:black'> = &quot;using&quot; <span class=GramE>[ <b><span
style='font-family:Courier-Bold;mso-bidi-font-family:Courier-Bold'>IF</span></b></span></span><b><span
style='font-size:8.5pt;font-family:Courier-Bold;mso-bidi-font-family:Courier-Bold;
color:black'>(<span class=SpellE>IsAlias</span>()) </span></b><span
class=SpellE><span style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:
Courier;color:black'>ident</span></span><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier;color:black'> '=' ] <span
class=SpellE>Qualident</span> ';'.<o:p></o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
class=SpellE><span style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:
Courier;color:black'>IsAlias</span></span><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier;color:black'> </span><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>is a user-defined method that reads two tokens ahead. It returns </span><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier;
color:black'>True</span><span style='font-size:11.5pt;font-family:Times-Roman;
mso-bidi-font-family:Times-Roman;color:black'>, if </span><span class=SpellE><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier;
color:black'>ident</span></span><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'> </span><span style='font-size:11.5pt;
font-family:Times-Roman;mso-bidi-font-family:Times-Roman;color:black'>is
followed by </span><span style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:
Courier;color:black'>'='</span><span style='font-size:11.5pt;font-family:Times-Roman;
mso-bidi-font-family:Times-Roman;color:black'>, otherwise it returns </span><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier;
color:black'>False</span><span style='font-size:11.5pt;font-family:Times-Roman;
mso-bidi-font-family:Times-Roman;color:black'>.<o:p></o:p></span></p>

<p class=MsoNormal style='mso-outline-level:1;mso-layout-grid-align:none;
text-autospace:none'><b><span style='font-size:11.5pt;font-family:Helvetica-Bold;
mso-bidi-font-family:Helvetica-Bold;color:black'>Conflict resolution by a
multi-symbol lookahead<o:p></o:p></span></b></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>The generated parser remembers the most recently recognized token
as well as the current lookahead token in two class variables of Parser (see
also Section 3.3.4):<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.5in;mso-layout-grid-align:
none;text-autospace:none'><span class=SpellE><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier'>Parser.token</span></span><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier'><span
style='mso-tab-count:1'>  </span>//<span style='color:black'> most recently
recognized token<o:p></o:p></span></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.5in;mso-layout-grid-align:
none;text-autospace:none'><span class=SpellE><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier;color:black'>Parser.la</span></span><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier;
color:black'><span style='mso-tab-count:1'>     </span>// <span class=SpellE>lookahead</span>
token<o:p></o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>The generated scanner offers a method </span><span class=GramE><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier;
color:black'>Peek(</span></span><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'>) </span><span style='font-size:11.5pt;
font-family:Times-Roman;mso-bidi-font-family:Times-Roman;color:black'>that can
be used to read ahead beyond the lookahead token without removing any tokens
from the input stream. When normal parsing resumes the scanner will return
these tokens again.<o:p></o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>With </span><span class=GramE><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier;color:black'>Peek(</span></span><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier;
color:black'>) </span><span style='font-size:11.5pt;font-family:Times-Roman;
mso-bidi-font-family:Times-Roman;color:black'>we can implement </span><span
class=SpellE><span style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:
Courier;color:black'>IsAlias</span></span><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier;color:black'>() </span><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>in the following way:<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'>@staticmethod<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in;mso-layout-grid-align:
none;text-autospace:none'><span class=GramE><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier;color:black'>def</span></span><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier;
color:black'> <span class=SpellE>IsAlias</span>( ):<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'><span style='mso-tab-count:1'>       </span><span
class=GramE>next</span> = <span class=SpellE>Scanner.Peek</span>()<span
style='mso-spacerun:yes'>       </span># Get next token<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'><span style='mso-tab-count:1'>       </span><span
class=GramE>return</span> <span class=SpellE>Parser.la.kind</span> == <span
class=SpellE>Sym_ident</span> and <span class=SpellE>next.kind</span> == <span
class=SpellE>Sym_eql</span><o:p></o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>The conflict mentioned at the end of Section 2.4.5 can be resolved
by the production<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;mso-outline-level:1;tab-stops:1.0in 2.5in;
mso-layout-grid-align:none;text-autospace:none'><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier;color:black'>A = </span><span
class=GramE><b><span style='font-size:8.5pt;font-family:Courier-Bold;
mso-bidi-font-family:Courier-Bold;color:black'>IF(</span></b></span><span
class=SpellE><b><span style='font-size:8.5pt;font-family:Courier-Bold;
mso-bidi-font-family:Courier-Bold;color:black'>FollowedByColon</span></b></span><b><span
style='font-size:8.5pt;font-family:Courier-Bold;mso-bidi-font-family:Courier-Bold;
color:black'>())<o:p></o:p></span></b></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in 2.5in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'><span style='mso-tab-count:1'>       </span><span
class=SpellE>Ident</span><span style='mso-tab-count:1'>                </span></span><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier;
color:#7F7F7F'>(. x = <span class=GramE>1 .)</span><o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in 2.5in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'><span style='mso-tab-count:1'>       </span>{
',' ident<span style='mso-tab-count:1'>          </span></span><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier;
color:#7F7F7F'>(. X += <span class=GramE>1 .)</span><o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in 2.5in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:#7F7F7F'><span style='mso-tab-count:1'>       </span></span><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier;
color:black'>} ':'<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in 2.5in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'><span style='mso-tab-count:1'>       </span>|
<span class=GramE>ident</span><span style='mso-tab-count:1'>              </span></span><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier;
color:#7F7F7F'>(. <span class=SpellE><span class=GramE>Parser.Foo</span></span><span
class=GramE>(</span>) .)<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in 2.5in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:#7F7F7F'><span style='mso-tab-count:1'>       </span></span><span
class=GramE><span style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:
Courier;color:black'>{ ',' ident<span style='mso-tab-count:1'>          </span></span><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier;
color:#7F7F7F'>(.</span></span><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:#7F7F7F'> <span class=SpellE><span
class=GramE>Parser.Bar</span></span><span class=GramE>(</span>) .)<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in 2.5in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:#7F7F7F'><span style='mso-tab-count:1'>       </span></span><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier;
color:black'>} ';'.<o:p></o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
class=GramE><span style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:
Times-Roman;color:black'>and</span></span><span style='font-size:11.5pt;
font-family:Times-Roman;mso-bidi-font-family:Times-Roman;color:black'> the
following implementation of the function </span><span class=SpellE><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier;
color:black'>FollowedByColon</span></span><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier;color:black'>()</span><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>:<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in 1.5in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'>@<span class=SpellE>staticmethod</span><o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in 1.5in;mso-layout-grid-align:
none;text-autospace:none'><span class=GramE><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier;color:black'>def</span></span><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier;
color:black'> <span class=SpellE>FollowedByColon</span>():<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in 1.5in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'><span style='mso-tab-count:1'>       </span>x
= <span class=SpellE>Parser.la</span><o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in 1.5in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'><span style='mso-tab-count:1'>       </span><span
class=GramE>while</span> <span class=SpellE>x.kind</span> == <span
class=SpellE>Sym_comma</span> or <span class=SpellE>x.kind</span> == <span
class=SpellE>Sym_ident</span>)<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in 1.5in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'><span style='mso-tab-count:2'>              </span>x
= <span class=SpellE><span class=GramE>Scanner.Peek</span></span><span
class=GramE>()</span><o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in 1.5in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'><span style='mso-tab-count:1'>       </span><span
class=GramE>return</span> <span class=SpellE>x.kind</span> == <span
class=SpellE>Sym_colon</span><o:p></o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
class=GramE><b><span style='font-size:11.5pt;font-family:Times-Bold;mso-bidi-font-family:
Times-Bold;color:black'>Token names</span></b><span style='font-size:11.5pt;
font-family:Times-Roman;mso-bidi-font-family:Times-Roman;color:black'>.</span></span><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'> For peeking</span><span style='font-size:11.5pt;font-family:Times-Roman;
mso-bidi-font-family:Times-Roman'>, as we have illustrated,<span
style='color:red'> </span><span style='color:black'>it is convenient to be able
to refer to the token kinds by names such as </span></span><span class=SpellE><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier;
color:black'>Sym_ident</span></span><span style='font-size:8.5pt;font-family:
Courier;mso-bidi-font-family:Courier;color:black'> </span><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>or </span><span class=SpellE><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier;color:black'>Sym_comma</span></span><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>. Coco/R generates such names for all tokens declared in the </span><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier;
color:black'>TOKENS </span><span style='font-size:11.5pt;font-family:Times-Roman;
mso-bidi-font-family:Times-Roman;color:black'>section of the scanner </span><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman'>specification.
For example, if the </span><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier'>TOKENS </span><span style='font-size:11.5pt;
font-family:Times-Roman;mso-bidi-font-family:Times-Roman'>section reads:<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;mso-outline-level:1;tab-stops:1.0in;
mso-layout-grid-align:none;text-autospace:none'><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier;color:black'>TOKENS<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'><span style='mso-tab-count:1'>       </span><span
class=GramE>ident</span> = letter {letter | digit}.<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'><span style='mso-tab-count:1'>       </span><span
class=GramE>number</span> = digit {digit}.<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'><span style='mso-tab-count:1'>       </span><span
class=SpellE><span class=GramE>eql</span></span> = '=';<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'><span style='mso-tab-count:1'>       </span>comma
= ','.<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'><span style='mso-tab-count:1'>       </span><span
class=GramE>colon</span> = ':'.<o:p></o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
class=GramE><span style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:
Times-Roman'>then</span></span><span style='font-size:11.5pt;font-family:Times-Roman;
mso-bidi-font-family:Times-Roman'> <span style='color:black'>Coco/</span>R will
define<span style='color:black'> following class variables in </span>Parser<span
style='color:black'>:<o:p></o:p></span></span></p>

<p class=MsoNormal style='text-indent:.5in;mso-layout-grid-align:none;
text-autospace:none'><span class=SpellE><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier;color:black'>Sym_EOF</span></span><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier;
color:black'> = 0<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;mso-layout-grid-align:none;
text-autospace:none'><span class=SpellE><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier;color:black'>Sym_ident</span></span><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier;
color:black'> = 1<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;mso-layout-grid-align:none;
text-autospace:none'><span class=SpellE><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier;color:black'>Sym_number</span></span><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier;
color:black'> = 2<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;mso-layout-grid-align:none;
text-autospace:none'><span class=SpellE><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier;color:black'>Sym_eql</span></span><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier;
color:black'> = 3<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;mso-layout-grid-align:none;
text-autospace:none'><span class=SpellE><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier;color:black'>Sym_comma</span></span><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier;
color:black'> = 4<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;mso-layout-grid-align:none;
text-autospace:none'><span class=SpellE><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier;color:black'>Sym_colon</span></span><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier;
color:black'> = 5<o:p></o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>These token names are preceded by <span class=GramE>an</span> ‘</span><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier;
color:black'>Sym_</span><span style='font-size:11.5pt;font-family:Times-Roman;
mso-bidi-font-family:Times-Roman;color:black'>’ in order to avoid conflicts
with reserved keywords and other identifiers.<o:p></o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>Normally the </span><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'>TOKENS </span><span style='font-size:
11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;color:black'>section
will only contain declarations for token classes like </span><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier;
color:black'>ident </span><span style='font-size:11.5pt;font-family:Times-Roman;
mso-bidi-font-family:Times-Roman;color:black'>or </span><span style='font-size:
8.5pt;font-family:Courier;mso-bidi-font-family:Courier;color:black'>number</span><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier'>, </span><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman'>leaving
literal tokens to be declared implicitly where they appear in productions.
However, if the name of a literal token is needed for peeking, it is convenient
to introduce the token explicitly in this section. In the actions associated
with productions of the grammar this token can then be referred to by name.<o:p></o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
class=GramE><b><span style='font-size:11.5pt;font-family:Times-Bold;mso-bidi-font-family:
Times-Bold;color:black'>Resetting the peek position</span></b><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>.</span></span><span style='font-size:11.5pt;font-family:Times-Roman;
mso-bidi-font-family:Times-Roman;color:black'> The scanner makes sure that a
sequence of </span><span class=SpellE><span class=GramE><span style='font-size:
8.5pt;font-family:Courier;mso-bidi-font-family:Courier;color:black'>Scanner.Peek</span></span></span><span
class=GramE><span style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:
Courier;color:black'>(</span></span><span style='font-size:8.5pt;font-family:
Courier;mso-bidi-font-family:Courier;color:black'>) </span><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>calls will return the tokens following the lookahead token </span><span
class=SpellE><span style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:
Courier;color:black'>Parser.a</span></span><span style='font-size:11.5pt;
font-family:Times-Roman;mso-bidi-font-family:Times-Roman;color:black'>. In rare
situations, however, the user has to reset the peek position manually. Consider
the following grammar:<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'>A = <span class=GramE>( IF</span> (<span
class=SpellE>IsFirstAlternative</span>()) ...<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'><span style='mso-tab-count:1'>       </span>|
IF (<span class=SpellE><span class=GramE>IsSecondAlternative</span></span><span
class=GramE>(</span>)) ...<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'><span style='mso-tab-count:1'>       </span>|
...<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'><span style='mso-tab-count:1'>       </span>).<o:p></o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>Assume that the function </span><span class=SpellE><span
class=GramE><span style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:
Courier;color:black'>IsFirstAlternative</span></span></span><span class=GramE><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier;
color:black'>(</span></span><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'>) </span><span style='font-size:11.5pt;
font-family:Times-Roman;mso-bidi-font-family:Times-Roman;color:black'>starts
peeking and finds out that the input does not match the first alternative. So
it returns </span><span style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:
Courier;color:black'>False </span><span style='font-size:11.5pt;font-family:
Times-Roman;mso-bidi-font-family:Times-Roman;color:black'>and the parser checks
the second alternative. The function </span><span class=SpellE><span
class=GramE><span style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:
Courier;color:black'>IsSecondAlternative</span></span></span><span class=GramE><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier;
color:black'>(</span></span><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'>) </span><span style='font-size:11.5pt;
font-family:Times-Roman;mso-bidi-font-family:Times-Roman;color:black'>starts
peeking again, but before that, it should reset the peek position to the first
symbol after the lookahead token </span><span class=SpellE><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier;
color:black'>Parser.la</span></span><span style='font-size:11.5pt;font-family:
Times-Roman;mso-bidi-font-family:Times-Roman;color:black'>. This can be done by
calling </span><span class=SpellE><span class=GramE><span style='font-size:
8.5pt;font-family:Courier;mso-bidi-font-family:Courier;color:black'>Scanner.ResetPeek</span></span></span><span
class=GramE><span style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:
Courier;color:black'>(</span></span><span style='font-size:8.5pt;font-family:
Courier;mso-bidi-font-family:Courier;color:black'>)</span><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>.<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in 3.0in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'>@<span class=SpellE>staticmethod</span><o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in 3.0in;mso-layout-grid-align:
none;text-autospace:none'><span class=GramE><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier;color:black'>def</span></span><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier;
color:black'> <span class=SpellE>IsSecondAlternative</span>():<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in 3.0in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'><span style='mso-tab-count:1'>       </span><span
class=SpellE><span class=GramE>Scanner.ResetPeek</span></span><span
class=GramE>()</span><o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in 3.0in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'><span style='mso-tab-count:1'>       </span>Token
x = <span class=SpellE><span class=GramE>Scanner.Peek</span></span><span
class=GramE>(</span>)<span style='mso-tab-count:1'>   </span>// returns the
first token after the<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in 3.0in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'><span style='mso-tab-count:1'>       </span>...<span
style='mso-tab-count:1'>                        </span>// lookahead token again<o:p></o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>The peek position is reset automatically every time a regular
token is recognized by<o:p></o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
class=SpellE><span class=GramE><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'>Scanner.Scan</span></span></span><span
class=GramE><span style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:
Courier;color:black'>(</span></span><span style='font-size:8.5pt;font-family:
Courier;mso-bidi-font-family:Courier;color:black'>) </span><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>(see Section 3.3.1).<o:p></o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
class=GramE><b><span style='font-size:11.5pt;font-family:Times-Bold;mso-bidi-font-family:
Times-Bold;color:black'>Translation of conflict resolvers</span></b><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>.</span></span><span style='font-size:11.5pt;font-family:Times-Roman;
mso-bidi-font-family:Times-Roman;color:black'> Coco/R treats resolvers like
semantic actions and simply copies them into the generated parser at the
position where they appear in the grammar. For example, the production<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in 1.5in;mso-layout-grid-align:
none;text-autospace:none'><span class=SpellE><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier;color:black'>UsingClause</span></span><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier;
color:black'> = &quot;using&quot; <span class=GramE>[ <b><span
style='font-family:Courier-Bold;mso-bidi-font-family:Courier-Bold'>IF</span></b></span></span><b><span
style='font-size:8.5pt;font-family:Courier-Bold;mso-bidi-font-family:Courier-Bold;
color:black'>(<span class=SpellE>IsAlias</span>()) </span></b><span
class=SpellE><span style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:
Courier;color:black'>ident</span></span><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier;color:black'> '=' ] <span
class=SpellE>Qualident</span> ';'.<o:p></o:p></span></p>

<p class=MsoNormal style='tab-stops:1.0in 1.5in;mso-layout-grid-align:none;
text-autospace:none'><span class=GramE><span style='font-size:11.5pt;
font-family:Times-Roman;mso-bidi-font-family:Times-Roman;color:black'>is</span></span><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'> translated </span><span style='font-size:11.5pt;font-family:Times-Roman;
mso-bidi-font-family:Times-Roman'>into the equivalent of<span style='color:
red'> </span><span style='color:black'>the following parsing method:<o:p></o:p></span></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in 1.5in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'>@staticmethod<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in 1.5in;mso-layout-grid-align:
none;text-autospace:none'><span class=GramE><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier;color:black'>def</span></span><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier;
color:black'> <span class=SpellE>UsingClause</span>():<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in 1.5in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'><span style='mso-tab-count:1'>       </span><span
class=SpellE><span class=GramE>Parser.Expect</span></span><span class=GramE>(</span><span
class=SpellE>Sym_using</span>)<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in 1.5in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'><span style='mso-tab-count:1'>       </span><span
class=GramE>if</span> (<span class=SpellE>IsAlias</span>())<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in 1.5in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'><span style='mso-tab-count:2'>              </span>{<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in 1.5in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'><span style='mso-tab-count:2'>              </span><span
class=SpellE><span class=GramE>Parser.Expect</span></span><span class=GramE>(</span><span
class=SpellE>Sym_ident</span>)<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in 1.5in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'><span style='mso-tab-count:2'>              </span><span
class=SpellE><span class=GramE>Parser.Expect</span></span><span class=GramE>(</span><span
class=SpellE>Sym_eql</span>)<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in 1.5in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'><span style='mso-tab-count:2'>              </span>}<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in 1.5in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'><span style='mso-tab-count:1'>       </span><span
class=SpellE><span class=GramE>Parser.Qualident</span></span><span class=GramE>()</span><o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in 1.5in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'><span style='mso-tab-count:1'>       </span><span
class=SpellE><span class=GramE>Parser.Expect</span></span><span class=GramE>(</span><span
class=SpellE>Sym_semicolon</span>)<o:p></o:p></span></p>

<p class=MsoNormal style='mso-outline-level:1;mso-layout-grid-align:none;
text-autospace:none'><b><span style='font-size:11.5pt;font-family:Helvetica-Bold;
mso-bidi-font-family:Helvetica-Bold;color:black'>Conflict resolution by
exploiting semantic information<o:p></o:p></span></b></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>A conflict resolver can base its decision not only on lookahead
tokens but also on any other information. For example it could access a symbol
table to find out semantic properties about a token. Consider the following <span
class=GramE>LL(</span>1) conflict between type casts and nested expressions,
which can be found in many programming languages:<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in 3.0in;mso-layout-grid-align:
none;text-autospace:none'><span class=SpellE><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier;color:black'>Expr</span></span><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier;
color:black'> = Factor {'+' Factor}.<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in 3.0in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'>Factor = '(' ident ')' Factor<span
style='mso-tab-count:1'>     </span>/* type cast */<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in 3.0in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'><span style='mso-tab-count:1'>       </span>|
'(' <span class=SpellE>Expr</span> ')'<span style='mso-tab-count:1'>             </span>/*
nested expression */<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in 3.0in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'><span style='mso-tab-count:1'>       </span>|
<span class=GramE>ident</span> | number.<o:p></o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman'>Since
</span><span class=SpellE><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier'>Expr</span></span><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier'> </span><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman'>can
also start with an </span><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier'>ident</span><span style='font-size:11.5pt;
font-family:Times-Roman;mso-bidi-font-family:Times-Roman'>, the<span
style='color:black'> conflict can be resolved by checking whether this </span></span><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier;
color:black'>ident </span><span style='font-size:11.5pt;font-family:Times-Roman;
mso-bidi-font-family:Times-Roman;color:black'>denotes a type or some other
object:<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;mso-outline-level:1;tab-stops:1.0in 3.0in;
mso-layout-grid-align:none;text-autospace:none'><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier;color:black'>Factor = </span><b><span
style='font-size:8.5pt;font-family:Courier-Bold;mso-bidi-font-family:Courier-Bold;
color:black'>IF (<span class=SpellE><span class=GramE>IsCast</span></span><span
class=GramE>(</span>))<o:p></o:p></span></b></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in 3.0in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'><span style='mso-tab-count:1'>       </span>'('
<span class=SpellE><span class=GramE>ident</span></span> ')' Factor<span
style='mso-tab-count:1'>       </span>/* type cast */<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in 3.0in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'><span style='mso-tab-count:1'>       </span>|
'(' <span class=SpellE>Expr</span> ')'<span style='mso-tab-count:1'>             </span>/*
nested expression */<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in 3.0in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'><span style='mso-tab-count:1'>       </span>|
<span class=GramE>ident</span> | number.<o:p></o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
class=SpellE><span class=GramE><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'>IsCast</span></span></span><span
class=GramE><span style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:
Courier;color:black'>(</span></span><span style='font-size:8.5pt;font-family:
Courier;mso-bidi-font-family:Courier;color:black'>) </span><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>looks up </span><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'>ident </span><span style='font-size:
11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;color:black'>in
the symbol table, and returns </span><span style='font-size:8.5pt;font-family:
Courier;mso-bidi-font-family:Courier;color:black'>True </span><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>if it is a type name:<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in 1.5in 3.0in;
mso-layout-grid-align:none;text-autospace:none'><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier;color:black'>@staticmethod<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in 1.5in 3.0in;
mso-layout-grid-align:none;text-autospace:none'><span class=GramE><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier;
color:black'>def</span></span><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'> <span class=SpellE>IsCast</span>():<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in 1.5in 3.0in;
mso-layout-grid-align:none;text-autospace:none'><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier;color:black'><span
style='mso-tab-count:1'>       </span>x = <span class=SpellE><span class=GramE>Scanner.Peek</span></span><span
class=GramE>(</span>)<span style='mso-tab-count:1'>         </span># peek next
token<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in 1.5in 3.0in;
mso-layout-grid-align:none;text-autospace:none'><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier;color:black'><span
style='mso-tab-count:1'>       </span><span class=GramE>if</span> <span
class=SpellE>x.kind</span> == <span class=SpellE>Sym_ident</span>:<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in 1.5in 3.0in;
mso-layout-grid-align:none;text-autospace:none'><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier;color:black'><span
style='mso-tab-count:2'>              </span><span class=SpellE><span
class=GramE>obj</span></span> = <span class=SpellE>SymTab.Find</span>(<span
class=SpellE>x.val</span>)<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in 1.5in 3.0in;
mso-layout-grid-align:none;text-autospace:none'><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier;color:black'><span
style='mso-tab-count:2'>              </span><span class=GramE>return</span> <span
class=SpellE>obj</span> is not None and <span class=SpellE>obj.kind</span> ==
Type<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in 1.5in 3.0in;
mso-layout-grid-align:none;text-autospace:none'><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier;color:black'><span
style='mso-tab-count:1'>       </span><span class=GramE>else</span>:<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in 1.5in 3.0in;
mso-layout-grid-align:none;text-autospace:none'><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier;color:black'><span
style='mso-tab-count:2'>              </span><span class=GramE>return</span>
False<o:p></o:p></span></p>

<p class=MsoNormal style='mso-outline-level:1;mso-layout-grid-align:none;
text-autospace:none'><b><span style='font-size:11.5pt;font-family:Helvetica-Bold;
mso-bidi-font-family:Helvetica-Bold;color:black'>Placing <span class=SpellE>resolvers</span>
correctly<o:p></o:p></span></b></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>Coco/R chec</span><span style='font-size:11.5pt;font-family:Times-Roman;
mso-bidi-font-family:Times-Roman'>ks that <span style='color:black'>resolvers
are placed correctly. The following rules must be obeyed:<o:p></o:p></span></span></p>

<p class=MsoNormal style='margin-left:.25in;text-indent:-.25in;mso-outline-level:
1;mso-list:l8 level1 lfo13;tab-stops:list .25in .5in;mso-layout-grid-align:
none;text-autospace:none'><![if !supportLists]><span style='font-size:11.5pt;
font-family:Times-Roman;mso-fareast-font-family:Times-Roman;mso-bidi-font-family:
Times-Roman;color:black'><span style='mso-list:Ignore'>1.<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span></span><![endif]><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>If two alternatives start with the same token, the resolver must
be placed in front of the first one. Otherwise it would never be executed,
because the parser would always choose the first matching alternative. More
precisely, a resolver must be placed at the earliest possible point where an <span
class=GramE>LL(</span>1) conflict arises.<o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:.25in;text-indent:-.25in;mso-outline-level:
1;mso-list:l8 level1 lfo13;tab-stops:list .25in .5in;mso-layout-grid-align:
none;text-autospace:none'><![if !supportLists]><span style='font-size:11.5pt;
font-family:Times-Roman;mso-fareast-font-family:Times-Roman;mso-bidi-font-family:
Times-Roman;color:black'><span style='mso-list:Ignore'>2.<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span></span><![endif]><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>A resolver may only be placed in front of an alternative that is
in conflict with some other alternative. Otherwise it would be illegal.<o:p></o:p></span></p>

<p class=MsoNormal style='mso-outline-level:1;mso-layout-grid-align:none;
text-autospace:none'><span style='font-size:11.5pt;font-family:Times-Roman;
mso-bidi-font-family:Times-Roman;color:black'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman'>Here
is an example where resolvers are incorrectly placed:<o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:.5in;mso-outline-level:1;tab-stops:.75in 2.25in;
mso-layout-grid-align:none;text-autospace:none'><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier;color:black'>A =<o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:.5in;tab-stops:.75in 2.25in 3.0in;
mso-layout-grid-align:none;text-autospace:none'><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier;color:black'><span
style='mso-tab-count:1'>   </span><span class=GramE>( a</span> (IF (...) b) c<span
style='mso-tab-count:1'>   </span>// misplaced resolver. No <span class=GramE>LL(</span>1)
conflict.<o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:.5in;tab-stops:.75in 2.25in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'><span style='mso-tab-count:1'>   </span>|
IF (...) a b<span style='mso-tab-count:1'>       </span>// resolver not
evaluated. Place it at first alt.<o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:.5in;tab-stops:.75in 2.25in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'><span style='mso-tab-count:1'>   </span>|
IF (...) b<span style='mso-tab-count:1'>         </span>// misplaced resolver.
No <span class=GramE>LL(</span>1) conflict<o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:.5in;tab-stops:.75in 2.25in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'><span style='mso-tab-count:1'>   </span>).<o:p></o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>Here is how the resolvers should have been placed in this example:<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;mso-outline-level:1;tab-stops:.75in 2.25in;
mso-layout-grid-align:none;text-autospace:none'><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier;color:black'>A =<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:.75in 2.0in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'><span style='mso-tab-count:1'>   </span><span
class=GramE>( IF</span> (...) a b<span style='mso-tab-count:1'>   </span>//
resolves conflict between the first two alternatives<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:.75in 2.25in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'><span style='mso-tab-count:1'>   </span>|
<span class=GramE>a</span> c<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:.75in 2.25in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'><span style='mso-tab-count:1'>   </span>|
<span class=GramE>b</span><o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:.75in 2.25in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'><span style='mso-tab-count:1'>   </span>).<o:p></o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>The following example is also interesting:<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;mso-outline-level:1;tab-stops:.75in 2.0in;
mso-layout-grid-align:none;text-autospace:none'><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier;color:black'>A =<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:.75in 2.0in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'><span style='mso-tab-count:1'>   </span><span
class=GramE>{ a</span><o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:.75in 2.0in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'><span style='mso-tab-count:1'>   </span>|
IF (...) b c<span style='mso-tab-count:1'>   </span>// resolver placed
incorrectly.<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:.75in 2.0in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'><span style='mso-tab-count:1'>   </span><span
class=GramE>} b.</span><o:p></o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>Although the </span><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'>b </span><span style='font-size:11.5pt;
font-family:Times-Roman;mso-bidi-font-family:Times-Roman;color:black'>in the
second alternative constitutes an <span class=GramE>LL(</span>1) conflict with
the </span><span style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:
Courier;color:black'>b </span><span style='font-size:11.5pt;font-family:Times-Roman;
mso-bidi-font-family:Times-Roman;color:black'>after the iteration, the resolver
is placed incorrectly</span><span style='font-size:11.5pt;font-family:Times-Roman;
mso-bidi-font-family:Times-Roman'>. The reason is that it should be called only
once in the parser - namely in the header of the while loop, and not both in
the while header and at the beginning of the second alternative.<o:p></o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman'>If
correctly placed at the beginning of the iteration like this:<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;mso-outline-level:1;tab-stops:.75in;
mso-layout-grid-align:none;text-autospace:none'><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier;color:black'>A =<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:.75in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'><span style='mso-tab-count:1'>   </span><span
class=GramE>{ IF</span> (<span class=SpellE>AnotherIteration</span>())<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:.75in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'><span style='mso-tab-count:1'>   </span><span
class=GramE>( a</span><o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:.75in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'><span style='mso-tab-count:1'>   </span>|
<span class=GramE>b</span> c<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:.75in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'><span style='mso-tab-count:1'>   </span>)<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:.75in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'><span style='mso-tab-count:1'>   </span><span
class=GramE>} b.</span><o:p></o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
class=GramE><span style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:
Times-Roman'>and</span></span><span style='font-size:11.5pt;font-family:Times-Roman;
mso-bidi-font-family:Times-Roman'> with function </span><span class=SpellE><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier'>AnotherIteration</span></span><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier'>()</span><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman'>implemented
as follows:<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'>@staticmethod<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in;mso-layout-grid-align:
none;text-autospace:none'><span class=GramE><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier;color:black'>def</span></span><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier;
color:black'> <span class=SpellE>AnotherIteration</span>():<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'><span style='mso-tab-count:1'>       </span><span
class=GramE>next</span> = <span class=SpellE>Scanner.Peek</span>()<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'><span style='mso-tab-count:1'>       </span><span
class=GramE>return</span> <span class=SpellE>Parser.la.kind</span> in ( <span
class=SpellE>Parser.Sym_a</span>, <span class=SpellE>Parser.Sym_b</span> ) and <span
class=SpellE>next.kind</span> == <span class=SpellE>Parser.Sym_c</span><o:p></o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman'>Coco/R
then generates code like:<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in 1.5in 2.0in;
mso-layout-grid-align:none;text-autospace:none'><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier;color:black'>@staticmethod<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in 1.5in 2.0in;
mso-layout-grid-align:none;text-autospace:none'><span class=GramE><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier;
color:black'>def</span></span><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'> A():<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in 1.5in 2.0in;
mso-layout-grid-align:none;text-autospace:none'><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier;color:black'><span
style='mso-tab-count:1'>       </span><span class=GramE>while</span> <span
class=SpellE>AnotherIteration</span>():<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in 1.5in 2.0in;
mso-layout-grid-align:none;text-autospace:none'><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier;color:black'><span
style='mso-tab-count:2'>              </span><span class=GramE>if</span> <span
class=SpellE>Parser.la.kind</span> == <span class=SpellE>ParserSym_a</span>:<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in 1.5in 2.0in;
mso-layout-grid-align:none;text-autospace:none'><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier;color:black'><span
style='mso-tab-count:3'>                     </span><span class=SpellE><span
class=GramE>Parser.Expect</span></span><span class=GramE>(</span><span
class=SpellE>Parser.Sym_a</span>)<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in 1.5in 2.0in;
mso-layout-grid-align:none;text-autospace:none'><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier;color:black'><span
style='mso-tab-count:2'>              </span><span class=SpellE><span
class=GramE>elif</span></span> <span class=SpellE>Parser.la.kind</span> == <span
class=SpellE>Parser.Sym_b</span>:<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in 1.5in 2.0in;
mso-layout-grid-align:none;text-autospace:none'><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier;color:black'><span
style='mso-tab-count:3'>                     </span><span class=SpellE><span
class=GramE>Parser.Expect</span></span><span class=GramE>(</span><span
class=SpellE>Parser.Sym_b</span>)<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in 1.5in 2.0in;
mso-layout-grid-align:none;text-autospace:none'><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier;color:black'><span
style='mso-tab-count:3'>                     </span><span class=SpellE><span
class=GramE>Parser.Expect</span></span><span class=GramE>(</span><span
class=SpellE>Parser.Sym_c</span>)<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in 1.5in 2.0in;
mso-layout-grid-align:none;text-autospace:none'><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier;color:black'><span
style='mso-tab-count:1'>       </span><span class=SpellE><span class=GramE>Parser.Expect</span></span><span
class=GramE>(</span><span class=SpellE>Parser.Sym_b</span>)<o:p></o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>Remember that the resolver must be placed at the earliest possible
point where the <span class=GramE>LL(</span>1) conflict arises.<o:p></o:p></span></p>

<h3>2.4.7 Syntax Error Handling</h3>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>If a syntax error is detected during parsing, the generated parser
reports the error and </span><span style='font-size:11.5pt;font-family:Times-Roman;
mso-bidi-font-family:Times-Roman'>should try<span style='color:red'> </span><span
style='color:black'>to recover by synchronizing the erroneous input with the
grammar. While error messages are generated automatically, the user has to give
certain hints in the grammar in order to enable the </span>parser to perform
appropriate synchronization<span style='color:black'>.<o:p></o:p></span></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><b><span
style='font-size:11.5pt;font-family:Times-Bold;mso-bidi-font-family:Times-Bold;
color:black'>Invalid terminal symbols</span></b><span style='font-size:11.5pt;
font-family:Times-Roman;mso-bidi-font-family:Times-Roman;color:black'>. If a
certain terminal symbol was expected but not found in the input the parser just
reports that this symbol was expected. For example, if we had a production<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;mso-layout-grid-align:none;
text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'>A = a b c.<o:p></o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
class=GramE><span style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:
Times-Roman'>but</span></span><span style='font-size:11.5pt;font-family:Times-Roman;
mso-bidi-font-family:Times-Roman'> the parser was presented with input like<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;mso-layout-grid-align:none;
text-autospace:none'><span class=GramE><span style='font-size:8.5pt;font-family:
Courier;mso-bidi-font-family:Courier;color:black'>a</span></span><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier;
color:black'> x c<o:p></o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
class=GramE><span style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:
Times-Roman'>the</span></span><span style='font-size:11.5pt;font-family:Times-Roman;
mso-bidi-font-family:Times-Roman'> parser would report something like<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;mso-layout-grid-align:none;
text-autospace:none'><span class=GramE><span style='font-size:8.5pt;font-family:
Courier;mso-bidi-font-family:Courier'>file</span></span><span style='font-size:
8.5pt;font-family:Courier;mso-bidi-font-family:Courier'> Grammar.atg : (11, 9)
b expected<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;mso-layout-grid-align:none;
text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><b><span
style='font-size:11.5pt;font-family:Times-Bold;mso-bidi-font-family:Times-Bold;
color:black'>Invalid alternative lists</span></b><span style='font-size:11.5pt;
font-family:Times-Roman;mso-bidi-font-family:Times-Roman;color:black'>. If the
lookahead symbol does not match any alternative from a list of expected
alternatives in a nonterminal </span><span style='font-size:8.5pt;font-family:
Courier;mso-bidi-font-family:Courier;color:black'>A </span><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>the parser just reports that </span><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier;color:black'>A </span><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>was invalid. For example, if we had a production<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;mso-layout-grid-align:none;
text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'>A = a (b | c | d) e.<o:p></o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
class=GramE><span style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:
Times-Roman'>but</span></span><span style='font-size:11.5pt;font-family:Times-Roman;
mso-bidi-font-family:Times-Roman'> the parser was presented with input like<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;mso-layout-grid-align:none;
text-autospace:none'><span class=GramE><span style='font-size:8.5pt;font-family:
Courier;mso-bidi-font-family:Courier;color:black'>a</span></span><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier;
color:black'> x e<o:p></o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
class=GramE><span style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:
Times-Roman'>the</span></span><span style='font-size:11.5pt;font-family:Times-Roman;
mso-bidi-font-family:Times-Roman'> parser would report something like<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;mso-layout-grid-align:none;
text-autospace:none'><span class=GramE><span style='font-size:8.5pt;font-family:
Courier;mso-bidi-font-family:Courier'>file</span></span><span style='font-size:
8.5pt;font-family:Courier;mso-bidi-font-family:Courier'> Grammar.atg : (11, 9)
invalid A<o:p></o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>Obviously, this error message can be improved if we turn the
alternative list into a separate nonterminal symbol, i.e.:<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;mso-layout-grid-align:none;
text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'>A = a B e.<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;mso-layout-grid-align:none;
text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'>B = b | c | d.<o:p></o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>In this case the error message would be<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;mso-layout-grid-align:none;
text-autospace:none'><span class=GramE><span style='font-size:8.5pt;font-family:
Courier;mso-bidi-font-family:Courier'>file</span></span><span style='font-size:
8.5pt;font-family:Courier;mso-bidi-font-family:Courier'> Grammar.atg : (11, 9)
invalid B<o:p></o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
class=GramE><span style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:
Times-Roman;color:black'>which</span></span><span style='font-size:11.5pt;
font-family:Times-Roman;mso-bidi-font-family:Times-Roman;color:black'> is more
precise.<o:p></o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
class=GramE><b><span style='font-size:11.5pt;font-family:Times-Bold;mso-bidi-font-family:
Times-Bold;color:black'>Synchronization</span></b><span style='font-size:11.5pt;
font-family:Times-Roman;mso-bidi-font-family:Times-Roman;color:black'>.</span></span><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'> After an error is reported the parser continues until it gets to
a so called </span><i><span style='font-size:11.5pt;font-family:Times-Italic;
mso-bidi-font-family:Times-Italic;color:black'>synchronization point </span></i><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>where it tries to synchronize the input with the grammar again.
Synchronization points have to be specified by the keyword </span><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier;
color:black'>SYNC</span><span style='font-size:11.5pt;font-family:Times-Roman;
mso-bidi-font-family:Times-Roman;color:black'>. They are points in the grammar
where particularly </span><i><span style='font-size:11.5pt;font-family:Times-Italic;
mso-bidi-font-family:Times-Italic;color:black'>safe </span></i><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>tokens are expected, i.e. tokens that hardly occur anywhere else
and are unlikely to be mistyped. When the parser reaches <span class=GramE>a
synchronization</span> point it skips all input until a token occurs that is
expected at this point.<o:p></o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>In many languages good candidates for synchronization points are
the beginning of a statement (where keywords like </span><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier;
color:black'>if</span><span style='font-size:11.5pt;font-family:Times-Roman;
mso-bidi-font-family:Times-Roman;color:black'>, </span><span style='font-size:
8.5pt;font-family:Courier;mso-bidi-font-family:Courier;color:black'>while </span><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>or </span><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'>for </span><span style='font-size:
11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;color:black'>are
expected) or the beginning of a declaration sequence (where keywords like </span><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier;
color:black'>public</span><span style='font-size:11.5pt;font-family:Times-Roman;
mso-bidi-font-family:Times-Roman;color:black'>, </span><span style='font-size:
8.5pt;font-family:Courier;mso-bidi-font-family:Courier;color:black'>private </span><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>or </span><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'>void </span><span style='font-size:
11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;color:black'>are
expected). A<o:p></o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
class=GramE><span style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:
Times-Roman;color:black'>semicolon</span></span><span style='font-size:11.5pt;
font-family:Times-Roman;mso-bidi-font-family:Times-Roman;color:black'> is also
a good synchronization point in a statement sequence.<o:p></o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>The following production, for example, specifies the beginning of
a statement as well as the semicolon after an assignment as synchronization
points:<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'>Statement =<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;mso-outline-level:1;tab-stops:1.0in;
mso-layout-grid-align:none;text-autospace:none'><b><span style='font-size:8.5pt;
font-family:Courier-Bold;mso-bidi-font-family:Courier-Bold;color:black'><span
style='mso-tab-count:1'>       </span>SYNC<o:p></o:p></span></b></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'><span style='mso-tab-count:1'>       </span><span
class=GramE>( Designator</span> '=' Expression </span><b><span
style='font-size:8.5pt;font-family:Courier-Bold;mso-bidi-font-family:Courier-Bold;
color:black'>SYNC </span></b><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'>';'<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'><span style='mso-tab-count:1'>       </span>|
&quot;if&quot; '(' Expression ')' Statement <span class=GramE>[ &quot;</span>else&quot;
Statement ]<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'><span style='mso-tab-count:1'>       </span>|
&quot;while&quot; '(' Expression ')' Statement<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'><span style='mso-tab-count:1'>       </span>|
'{' <span class=GramE>{ Statement</span> } '}'<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'><span style='mso-tab-count:1'>       </span>|
...<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'><span style='mso-tab-count:1'>       </span>).<o:p></o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>In the generated parser, these synchronization </span><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman'>points
lead to code<span style='color:red'> </span><span style='color:black'>as
follows (written in pseudo code here):<o:p></o:p></span></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in 1.5in 2.0in;
mso-layout-grid-align:none;text-autospace:none'><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier;color:black'>@staticmethod<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in 1.5in 2.0in;
mso-layout-grid-align:none;text-autospace:none'><span class=GramE><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier;
color:black'>def</span></span><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'> Statement():<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in 1.5in 2.0in;
mso-layout-grid-align:none;text-autospace:none'><b><span style='font-size:8.5pt;
font-family:Courier-Bold;mso-bidi-font-family:Courier-Bold;color:black'><span
style='mso-tab-count:1'>       </span><span class=GramE>while</span> <span
class=SpellE>Parser.la.kind</span> not in (<span class=SpellE>Parser.Sym_EOF</span>,
<span class=SpellE>Parser.Sym_ident</span>, <span class=SpellE>Parser.Sym_if</span>,
<span class=SpellE>Parser.Sym_while</span>, <span class=SpellE>Parser.Sym_lbrace</span>,
...):<o:p></o:p></span></b></p>

<p class=MsoNormal style='text-indent:.5in;mso-outline-level:1;tab-stops:1.0in 1.5in 2.0in;
mso-layout-grid-align:none;text-autospace:none'><b><i><span style='font-size:
8.5pt;font-family:Courier-BoldOblique;mso-bidi-font-family:Courier-BoldOblique;
color:black'><span style='mso-tab-count:2'>                                </span>Report
an error</span></i></b><b><span style='font-size:8.5pt;font-family:Courier-Bold;
mso-bidi-font-family:Courier-Bold;color:black'><o:p></o:p></span></b></p>

<p class=MsoNormal style='text-indent:.5in;mso-outline-level:1;tab-stops:1.0in 1.5in 2.0in;
mso-layout-grid-align:none;text-autospace:none'><b><i><span style='font-size:
8.5pt;font-family:Courier-BoldOblique;mso-bidi-font-family:Courier-BoldOblique;
color:black'><span style='mso-tab-count:2'>                                </span>Get
next token</span></i></b><b><span style='font-size:8.5pt;font-family:Courier-Bold;
mso-bidi-font-family:Courier-Bold;color:black'><o:p></o:p></span></b></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in 1.5in 2.0in;
mso-layout-grid-align:none;text-autospace:none'><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier;color:black'><span
style='mso-tab-count:1'>       </span><span class=GramE>if</span> <span
class=SpellE>Parser.la.kind</span> == <span class=SpellE>Parser.Sym_ident</span>:<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in 1.5in 2.0in;
mso-layout-grid-align:none;text-autospace:none'><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier;color:black'><span
style='mso-tab-count:2'>              </span><span class=SpellE><span
class=GramE>Parser.Designator</span></span><span class=GramE>()</span><o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in 1.5in 2.0in;
mso-layout-grid-align:none;text-autospace:none'><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier;color:black'><span
style='mso-tab-count:2'>              </span><span class=SpellE><span
class=GramE>Parser.Expect</span></span><span class=GramE>(</span><span
class=SpellE>Parser.Sym_eql</span>)<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in 1.5in 2.0in;
mso-layout-grid-align:none;text-autospace:none'><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier;color:black'><span
style='mso-tab-count:2'>              </span><span class=SpellE><span
class=GramE>Parser.Expression</span></span><span class=GramE>()</span><o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in 1.5in 2.0in;
mso-layout-grid-align:none;text-autospace:none'><b><span style='font-size:8.5pt;
font-family:Courier-Bold;mso-bidi-font-family:Courier-Bold;color:black'><span
style='mso-tab-count:2'>              </span><span class=GramE>while</span> <span
class=SpellE>la.kind</span> not in (<span class=SpellE>Parser.Sym_EOF</span>, <span
class=SpellE>Parser.Sym_semicolon</span>):<o:p></o:p></span></b></p>

<p class=MsoNormal style='text-indent:.5in;mso-outline-level:1;tab-stops:1.0in 1.5in 2.0in;
mso-layout-grid-align:none;text-autospace:none'><b><i><span style='font-size:
8.5pt;font-family:Courier-BoldOblique;mso-bidi-font-family:Courier-BoldOblique;
color:black'><span style='mso-tab-count:3'>                                                </span>Report
an error</span></i></b><b><span style='font-size:8.5pt;font-family:Courier-Bold;
mso-bidi-font-family:Courier-Bold;color:black'><o:p></o:p></span></b></p>

<p class=MsoNormal style='text-indent:.5in;mso-outline-level:1;tab-stops:1.0in 1.5in 2.0in;
mso-layout-grid-align:none;text-autospace:none'><b><i><span style='font-size:
8.5pt;font-family:Courier-BoldOblique;mso-bidi-font-family:Courier-BoldOblique;
color:black'><span style='mso-tab-count:3'>                                                </span>Get
next token</span></i></b><b><span style='font-size:8.5pt;font-family:Courier-Bold;
mso-bidi-font-family:Courier-Bold;color:black'><o:p></o:p></span></b></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in 1.5in 2.0in;
mso-layout-grid-align:none;text-autospace:none'><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier;color:black'><span
style='mso-tab-count:1'>       </span><span class=SpellE><span class=GramE>elif</span></span>
<span class=SpellE>Parser.la.kind</span> == <span class=SpellE>Parser.Sym_if</span>:<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in 1.5in 2.0in;
mso-layout-grid-align:none;text-autospace:none'><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier;color:black'><span
style='mso-tab-count:2'>              </span>...<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in 1.5in 2.0in;
mso-layout-grid-align:none;text-autospace:none'><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier;color:black'><span
style='mso-tab-count:1'>       </span>...<o:p></o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>Note that the end-of-file symbol is always included in the set of
synchronization symbols. This guarantees that the synchronization loop
terminates at least at the end of the input.<o:p></o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>In order to avoid a proliferation of error messages during
synchronization, an error is only reported if at least two tokens have been
recognized correctly since the last error.<o:p></o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>Normally there are only a handful of synchronization points in a
grammar for a real programming language. This makes error recovery cheap </span><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman'>in
parsers generated by <span style='color:black'>Coco/R and does not slow down
error-free parsing.<o:p></o:p></span></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><b><span
style='font-size:11.5pt;font-family:Times-Bold;mso-bidi-font-family:Times-Bold;
color:black'><o:p>&nbsp;</o:p></span></b></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
class=GramE><b><span style='font-size:11.5pt;font-family:Times-Bold;mso-bidi-font-family:
Times-Bold;color:black'>Weak tokens</span></b><span style='font-size:11.5pt;
font-family:Times-Roman;mso-bidi-font-family:Times-Roman;color:black'>.</span></span><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'> Error recovery can further be improved by specifying tokens that
are &quot;weak&quot; in a certain context. A weak token is a symbol that is
often mistyped or missing such as a comma in a parameter list, which is often
mistyped as a semicolon. A weak token is preceded by the keyword </span><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier;
color:black'>WEAK</span><span style='font-size:11.5pt;font-family:Times-Roman;
mso-bidi-font-family:Times-Roman;color:black'>. When the parser expects a weak
token, but does not find it in the input stream, it adjusts the input to the
next token that is either a legal successor of the weak token or a token
expected at any synchronization point (symbols expected at synchronization
points are considered to be particularly &quot;strong&quot;, so that it makes
sense to never skip them).<o:p></o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>Weak tokens are often separator symbols that occur at the
beginning of <span class=GramE>an iteration</span>.<span
style='mso-spacerun:yes'>  </span>For example, if we have the productions<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;mso-layout-grid-align:none;
text-autospace:none'><span class=SpellE><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier;color:black'>ParameterList</span></span><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier;
color:black'> = '(' Parameter <span class=GramE>{ <b><span style='font-family:
Courier-Bold;mso-bidi-font-family:Courier-Bold'>WEAK</span></b></span></span><b><span
style='font-size:8.5pt;font-family:Courier-Bold;mso-bidi-font-family:Courier-Bold;
color:black'> </span></b><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'>',' Parameter } ')'.<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;mso-layout-grid-align:none;
text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'>Parameter = <span class=GramE>[
&quot;</span>ref&quot; | &quot;out&quot; ] Type ident.<o:p></o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>and the parser does not find a </span><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier;color:black'>',' </span><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>or a </span><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'>')' </span><span style='font-size:
11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;color:black'>after
the first parameter, it reports an error and skips the input until it finds
either a legal successor of the weak token (i.e., a legal start of </span><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier;
color:black'>Parameter</span><span style='font-size:11.5pt;font-family:Times-Roman;
mso-bidi-font-family:Times-Roman;color:black'>), or a successor of the
iteration (i.e. </span><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'>')'</span><span style='font-size:
11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;color:black'>),
or any symbol expected at a synchronization point (including the end-of-file
symbol). The effect is that the parsing of the parameter list would not be
terminated prematurely, but would get a chance to synchronize with the start of
the next parameter after a possibly mistyped separator symbol.<o:p></o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>In order to get good error recovery the user of Coco/R should
perform some experiments with erroneous inputs and place </span><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier;
color:black'>SYNC </span><span style='font-size:11.5pt;font-family:Times-Roman;
mso-bidi-font-family:Times-Roman;color:black'>and </span><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier;
color:black'>WEAK </span><span style='font-size:11.5pt;font-family:Times-Roman;
mso-bidi-font-family:Times-Roman;color:black'>keywords appropriately to recover
from the most likely errors.<o:p></o:p></span></p>

<h3>2.4.8 Frame Files</h3>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>The scanner and the parser are generated from template files with
the names </span><span style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:
Courier;color:black'>Scanner.frame </span><span style='font-size:11.5pt;
font-family:Times-Roman;mso-bidi-font-family:Times-Roman;color:black'>and </span><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier;
color:black'>Parser.frame</span><span style='font-size:11.5pt;font-family:Times-Roman;
mso-bidi-font-family:Times-Roman;color:black'>. Those files contain fixed code
parts as well as textual markers that denote positions at which
grammar-specific parts are inserted by Coco/R. In rare situations advanced users
may want to modify the fixed parts of the frame files by which they can
influence the behavior of the scanner and the parser to a certain degree.<o:p></o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman'>Coco/R
can also generate a main driver class from a template file with the name </span><span
style='font-size:9.5pt;font-family:Courier;mso-bidi-font-family:Courier'>Grammar.frame
</span><span style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:
Times-Roman'>if this exists (where </span><span style='font-size:9.5pt;
font-family:Courier;mso-bidi-font-family:Courier'>Grammar </span><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman'>stands
for the name of the goal symbol of the grammar). If not, the system can
generate such a driver from a file </span><span style='font-size:9.5pt;
font-family:Courier;mso-bidi-font-family:Courier'>Driver.frame</span><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman'>.
Such a generic driver frame file is provided with the distribution, the idea
being that it will act as an example from which a more appropriate </span><span
style='font-size:9.5pt;font-family:Courier;mso-bidi-font-family:Courier'>Grammar.frame
</span><span style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:
Times-Roman'>can be derived.<o:p></o:p></span></p>

<h1>3. User Guide</h1>

<h2>3.1 Installation</h2>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
class=GramE><b><span style='font-size:11.5pt;font-family:Times-Bold;mso-bidi-font-family:
Times-Bold;color:black'>Python version</span></b><span style='font-size:11.5pt;
font-family:Times-Roman;mso-bidi-font-family:Times-Roman;color:black'>.</span></span><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'> Copy the following files </span><span style='font-size:11.5pt;
font-family:Times-Roman;mso-bidi-font-family:Times-Roman'>to appropriate
directories:<span style='color:black'><o:p></o:p></span></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:117.0pt;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'>Coco.py<span style='mso-tab-count:
1'>        </span></span><span style='font-size:11.5pt;font-family:Times-Roman;
mso-bidi-font-family:Times-Roman;color:black'>the executable<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:117.0pt;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'>Scanner.frame<span style='mso-tab-count:
1'>  </span></span><span style='font-size:11.5pt;font-family:Times-Roman;
mso-bidi-font-family:Times-Roman;color:black'>the frame file from which the
scanner is generated<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:117.0pt;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'>Parser.frame<span style='mso-tab-count:
1'>   </span></span><span style='font-size:11.5pt;font-family:Times-Roman;
mso-bidi-font-family:Times-Roman;color:black'>the frame file from which the
parser is generated<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:117.0pt;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier'>Driver.frame<span style='mso-tab-count:1'>   </span></span><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman'>the
frame file from which the driver is generated, if required<o:p></o:p></span></p>

<h2>3.2 Invocation</h2>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>Coco/R can be invoked from the command line as follows:<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.5in;mso-layout-grid-align:
none;text-autospace:none'><span class=GramE><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier;color:black'>python</span></span><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier;
color:black'> <span class=SpellE>Coco.py</span> [ Options ] <span class=SpellE>grammarFileName</span><o:p></o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
class=SpellE><span class=GramE><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'>grammarFileName</span></span></span><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier;
color:black'> </span><span style='font-size:11.5pt;font-family:Times-Roman;
mso-bidi-font-family:Times-Roman;color:black'>is the name of the file
containing the Cocol/R compiler description. As a convention, compiler
descriptions have the extension </span><span style='font-size:8.5pt;font-family:
Courier;mso-bidi-font-family:Courier;color:black'>.ATG </span><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>(for attributed grammar).<o:p></o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
class=GramE><b><span style='font-size:11.5pt;font-family:Times-Bold;mso-bidi-font-family:
Times-Bold;color:black'>Options</span></b><span style='font-size:11.5pt;
font-family:Times-Roman;mso-bidi-font-family:Times-Roman;color:black'>.</span></span><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'> The following options may be specified:<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in 1.5in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'>Options =<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in 1.5in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'><span style='mso-tab-count:1'>       </span>|
&quot;-R&quot; <span class=SpellE>framesDirectory</span><o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in 1.5in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'><span style='mso-tab-count:1'>       </span></span><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier'>| <span
class=GramE>( &quot;</span>-trace&quot; | &quot;-options&quot; ) <span
class=SpellE>optionString</span><o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in 1.5in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'><span style='mso-tab-count:1'>       </span>}.<o:p></o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>The </span><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'>-frames </span><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>option can be used to specify the directory that contains the
frame files </span><span style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:
Courier;color:black'>Scanner.frame, Parser.</span><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier'>frame </span><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman'>and
</span><span style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:
Courier'>Driver.frame </span><span style='font-size:11.5pt;font-family:Times-Roman;
mso-bidi-font-family:Times-Roman'>(<span style='color:black'>see Section
2.4.8). If this option is missing Coco/R expects the frame files to be in the
same directory as the attributed grammar.<o:p></o:p></span></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>The trace options allow the user to specify a string of switches
(e.g. </span><span style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:
Courier;color:black'>ASX</span><span style='font-size:11.5pt;font-family:Times-Roman;
mso-bidi-font-family:Times-Roman;color:black'>) that cause internal data
structures of Coco/R to be dumped to the file </span><span style='font-size:
8.5pt;font-family:Courier;mso-bidi-font-family:Courier;color:black'>trace.txt</span><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>. The switches are denoted by the following characters:<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;mso-layout-grid-align:none;
text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'>-A </span><span style='font-size:
11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;color:black'>print
the states of the scanner automaton<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;mso-layout-grid-align:none;
text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'>-F </span><span class=GramE><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>print</span></span><span style='font-size:11.5pt;font-family:Times-Roman;
mso-bidi-font-family:Times-Roman;color:black'> the </span><i><span
style='font-size:11.5pt;font-family:Times-Italic;mso-bidi-font-family:Times-Italic;
color:black'>first </span></i><span style='font-size:11.5pt;font-family:Times-Roman;
mso-bidi-font-family:Times-Roman;color:black'>sets and </span><i><span
style='font-size:11.5pt;font-family:Times-Italic;mso-bidi-font-family:Times-Italic;
color:black'>follow </span></i><span style='font-size:11.5pt;font-family:Times-Roman;
mso-bidi-font-family:Times-Roman;color:black'>sets of all nonterminals<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;mso-layout-grid-align:none;
text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'>-G </span><span style='font-size:
11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;color:black'>print
the syntax graph of all productions<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;mso-layout-grid-align:none;
text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'>-I </span><span style='font-size:
11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;color:black'>trace
the computation of </span><i><span style='font-size:11.5pt;font-family:Times-Italic;
mso-bidi-font-family:Times-Italic;color:black'>first </span></i><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>sets<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;mso-layout-grid-align:none;
text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier'>-J </span><span style='font-size:11.5pt;
font-family:Times-Roman;mso-bidi-font-family:Times-Roman'>list the ANY and SYNC
sets used in error recovery<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;mso-layout-grid-align:none;
text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'>-P </span><span style='font-size:
11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;color:black'>print
statistics about the run of Coco/R<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;mso-layout-grid-align:none;
text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'>-S </span><span style='font-size:
11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;color:black'>print
the symbol table and the list of declared literals<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;mso-layout-grid-align:none;
text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'>-X </span><span style='font-size:
11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;color:black'>print
a cross reference list of all terminals and nonterminals<o:p></o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman'>Further
letters may be introduced to the </span><span class=SpellE><span
style='font-size:9.5pt;font-family:Courier;mso-bidi-font-family:Courier'>optionString</span></span><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman'>:<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;mso-layout-grid-align:none;
text-autospace:none'><span style='font-size:9.5pt;font-family:Courier;
mso-bidi-font-family:Courier'>-C </span><span style='font-size:11.5pt;
font-family:Times-Roman;mso-bidi-font-family:Times-Roman'>generate code for a compiler
driver class (</span><span style='font-size:9.5pt;font-family:Courier;
mso-bidi-font-family:Courier'>Grammar.py</span><span style='font-size:11.5pt;
font-family:Times-Roman;mso-bidi-font-family:Times-Roman'>)<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;mso-layout-grid-align:none;
text-autospace:none'><span style='font-size:9.5pt;font-family:Courier;
mso-bidi-font-family:Courier'>-M </span><span style='font-size:11.5pt;
font-family:Times-Roman;mso-bidi-font-family:Times-Roman'>merge any error
messages with the source code to create a listing file<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;mso-layout-grid-align:none;
text-autospace:none'><span style='font-size:9.5pt;font-family:Courier;
mso-bidi-font-family:Courier'>-N </span><span style='font-size:11.5pt;
font-family:Times-Roman;mso-bidi-font-family:Times-Roman'>generate source code
that uses names for the tokens and terminals<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;mso-layout-grid-align:none;
text-autospace:none'><span style='font-size:9.5pt;font-family:Courier;
mso-bidi-font-family:Courier'>-T </span><span class=GramE><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman'>test</span></span><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman'>
the grammar, but do not generate any code<o:p></o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman'>With
the exception of </span><span style='font-size:9.5pt;font-family:Courier;
mso-bidi-font-family:Courier'>M</span><span style='font-size:11.5pt;font-family:
Times-Roman;mso-bidi-font-family:Times-Roman'>, these various features may also
be selected by pragmas placed within the </span><span style='font-size:9.5pt;
font-family:Courier;mso-bidi-font-family:Courier'>Grammar.ATG </span><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman'>file
(conventionally at the start). Pragmas take the form<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;mso-layout-grid-align:none;
text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier'>$<span class=SpellE>optionString</span><o:p></o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman'>This
may be exemplified by<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;mso-layout-grid-align:none;
text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier'>COMPILER Grammar $CNF<o:p></o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
class=GramE><span style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:
Times-Roman'>and</span></span><span style='font-size:11.5pt;font-family:Times-Roman;
mso-bidi-font-family:Times-Roman'> this may be the preferred route to follow for
many applications<o:p></o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>For example, the option </span><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier;color:black'>$ASX </span><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>will cause the states of the automaton, the symbol table and a
cross reference list to be printed to the file </span><span style='font-size:
8.5pt;font-family:Courier;mso-bidi-font-family:Courier;color:black'>trace.txt</span><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>.<o:p></o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><b><span
style='font-size:11.5pt;font-family:Times-Bold;mso-bidi-font-family:Times-Bold;
color:black'>Output files</span></b><span style='font-size:11.5pt;font-family:
Times-Roman;mso-bidi-font-family:Times-Roman;color:black'>. Coco/R translates
an attributed grammar into the following files:<o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:.5in;text-indent:-.5in;mso-list:l3 level1 lfo9;
tab-stops:list .25in .5in;mso-layout-grid-align:none;text-autospace:none'><![if !supportLists]><span
style='font-size:11.5pt;font-family:Symbol;mso-fareast-font-family:Symbol;
mso-bidi-font-family:Symbol'><span style='mso-list:Ignore'>·<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></span><![endif]><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier'>Scanner.py </span><span style='font-size:11.5pt;
font-family:Times-Roman;mso-bidi-font-family:Times-Roman'>containing the
classes </span><span style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:
Courier'>Scanner</span><span style='font-size:11.5pt;font-family:Times-Roman;
mso-bidi-font-family:Times-Roman'>, </span><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier'>Token,</span><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman'>
</span><span style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:
Courier'>Buffer and Position</span><span style='font-size:11.5pt;font-family:
Times-Roman;mso-bidi-font-family:Times-Roman'>.<o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:.5in;text-indent:-.5in;mso-list:l3 level1 lfo9;
tab-stops:list .25in .5in;mso-layout-grid-align:none;text-autospace:none'><![if !supportLists]><span
style='font-size:11.5pt;font-family:Symbol;mso-fareast-font-family:Symbol;
mso-bidi-font-family:Symbol'><span style='mso-list:Ignore'>·<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></span><![endif]><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier'>Parser.py </span><span style='font-size:11.5pt;
font-family:Times-Roman;mso-bidi-font-family:Times-Roman'>containing the class </span><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier'>Parser</span><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman'>.<o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:.5in;text-indent:-.5in;mso-list:l3 level1 lfo9;
tab-stops:list .25in .5in;mso-layout-grid-align:none;text-autospace:none'><![if !supportLists]><span
style='font-size:11.5pt;font-family:Symbol;mso-fareast-font-family:Symbol;
mso-bidi-font-family:Symbol'><span style='mso-list:Ignore'>·<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></span><![endif]><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier'>Grammar.py </span><span style='font-size:11.5pt;
font-family:Times-Roman;mso-bidi-font-family:Times-Roman'>containing the driver
class (if requested).<o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:.5in;text-indent:-.5in;mso-list:l3 level1 lfo9;
tab-stops:list .25in .5in;mso-layout-grid-align:none;text-autospace:none'><![if !supportLists]><span
style='font-size:11.5pt;font-family:Symbol;mso-fareast-font-family:Symbol;
mso-bidi-font-family:Symbol'><span style='mso-list:Ignore'>·<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></span><![endif]><span class=GramE><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier'>trace.txt</span></span><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier'> </span><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman'>containing
trace output (if any).<o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:.5in;text-indent:-.5in;mso-list:l3 level1 lfo9;
tab-stops:list .25in .5in;mso-layout-grid-align:none;text-autospace:none'><![if !supportLists]><span
style='font-size:11.5pt;font-family:Symbol;mso-fareast-font-family:Symbol;
mso-bidi-font-family:Symbol'><span style='mso-list:Ignore'>·<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></span><![endif]><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier'>listing.txt </span><span style='font-size:11.5pt;
font-family:Times-Roman;mso-bidi-font-family:Times-Roman'>containing a source
listing with merged error message (if requested)<o:p></o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>All files are generated in the directory that contains the
attributed grammar.<o:p></o:p></span></p>

<h2>3.3 Interfaces of the Generated Classes</h2>

<h3>3.3.1 Scanner</h3>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>The generated scanner has the following interface:<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in;mso-layout-grid-align:
none;text-autospace:none'><span class=GramE><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier;color:black'>class</span></span><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier;
color:black'> </span><b><span style='font-size:8.5pt;font-family:Courier-Bold;
mso-bidi-font-family:Courier-Bold;color:black'>Scanner( object ):<o:p></o:p></span></b></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'><span style='mso-tab-count:1'>       </span>@staticmethod<span
style='mso-tab-count:1'> </span><o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'><span style='mso-tab-count:1'>       </span><span
class=GramE>def</span> </span><b><span style='font-size:8.5pt;font-family:Courier-Bold;
mso-bidi-font-family:Courier-Bold;color:black'>Init</span></b><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier;
color:black'>(<span class=SpellE>sourceFileName</span>)<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'><span style='mso-tab-count:1'>       </span>@<span
class=SpellE>staticmethod</span><span style='mso-tab-count:1'> </span><o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'><span style='mso-tab-count:1'>       </span><span
class=GramE>def</span> </span><span class=SpellE><b><span style='font-size:
8.5pt;font-family:Courier-Bold;mso-bidi-font-family:Courier-Bold;color:black'>InitStream</span></b></span><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier;
color:black'>(<span class=SpellE>FileLikeObject</span>)<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'><span style='mso-tab-count:1'>       </span>@<span
class=SpellE>staticmethod</span><o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'><span style='mso-tab-count:1'>       </span><span
class=GramE>def</span> </span><b><span style='font-size:8.5pt;font-family:Courier-Bold;
mso-bidi-font-family:Courier-Bold;color:black'>Scan</span></b><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier;
color:black'>()<span style='mso-spacerun:yes'>            </span># returns a
Token<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'><span style='mso-tab-count:1'>       </span>@staticmethod<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'><span style='mso-tab-count:1'>       </span><span
class=GramE>def</span> </span><b><span style='font-size:8.5pt;font-family:Courier-Bold;
mso-bidi-font-family:Courier-Bold;color:black'>Peek</span></b><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier;
color:black'>()<span style='mso-spacerun:yes'>            </span># returns a
Token<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'><span style='mso-tab-count:1'>       </span>@staticmethod<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'><span style='mso-tab-count:1'>       </span><span
class=GramE>def</span> </span><span class=SpellE><b><span style='font-size:
8.5pt;font-family:Courier-Bold;mso-bidi-font-family:Courier-Bold;color:black'>ResetPeek</span></b></span><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier;
color:black'>()<o:p></o:p></span></p>

<p class=MsoNormal style='tab-stops:1.0in;mso-layout-grid-align:none;
text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
class=GramE><span style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:
Courier;color:black'>Init(</span></span><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier;color:black'>) </span><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>initializes the scanner. <span class=GramE>Its parameter the name
of a file from where the tokens should be read.</span> It has to be called from
the main class of the compiler (see Section 3.4) before scanning and parsing
starts.<span style='mso-spacerun:yes'>  </span></span><span class=SpellE><span
class=GramE><span style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:
Courier;color:black'>InitStream</span></span></span><span class=GramE><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier;
color:black'>(</span></span><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'>)</span><span style='font-size:11.5pt;
font-family:Times-Roman;mso-bidi-font-family:Times-Roman;color:black'> is the
same as </span><span style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:
Courier;color:black'>Init() </span><span style='font-size:11.5pt;font-family:
Times-Roman;mso-bidi-font-family:Times-Roman;color:black'>but takes a file-like
object as its parameter.<o:p></o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>The method </span><span class=GramE><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier;color:black'>Scan(</span></span><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier;
color:black'>) </span><span style='font-size:11.5pt;font-family:Times-Roman;
mso-bidi-font-family:Times-Roman;color:black'>is the actual scanner. The parser
calls it whenever it needs the next token. Once the input is exhausted </span><span
class=GramE><span style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:
Courier;color:black'>Scan(</span></span><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier;color:black'>) </span><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>returns the end-of-file token, which has the token number </span><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier;
color:black'>0</span><span style='font-size:11.5pt;font-family:Times-Roman;
mso-bidi-font-family:Times-Roman;color:black'>. For invalid tokens (caused by
illegal token syntax or by invalid characters) </span><span class=GramE><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier;
color:black'>Scan(</span></span><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'>) </span><span style='font-size:11.5pt;
font-family:Times-Roman;mso-bidi-font-family:Times-Roman;color:black'>returns a
special token kind, which normally causes the parser to report an error.<o:p></o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
class=GramE><span style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:
Courier;color:black'>Peek(</span></span><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier;color:black'>) </span><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>can be used to read one or several tokens ahead without removing
them from the input stream. With every call of </span><span class=GramE><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier;
color:black'>Scan(</span></span><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'>) </span><span style='font-size:11.5pt;
font-family:Times-Roman;mso-bidi-font-family:Times-Roman;color:black'>(i.e. every
time a token has been recognized) the peek position is set to the scan
position, so that the first </span><span style='font-size:8.5pt;font-family:
Courier;mso-bidi-font-family:Courier;color:black'>Peek() </span><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>after a </span><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'>Scan() </span><span style='font-size:
11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;color:black'>will
return the first yet unscanned token. The method </span><span class=SpellE><span
class=GramE><span style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:
Courier;color:black'>ResetPeek</span></span></span><span class=GramE><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier;
color:black'>(</span></span><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'>) </span><span style='font-size:11.5pt;
font-family:Times-Roman;mso-bidi-font-family:Times-Roman;color:black'>can be
used to reset the peek position to the scan position after several calls of </span><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier;
color:black'>Peek()</span><span style='font-size:11.5pt;font-family:Times-Roman;
mso-bidi-font-family:Times-Roman;color:black'>.<o:p></o:p></span></p>

<h3>3.3.2 Token</h3>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>Every token returned by the scanner is an object of the following
class:<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in 2.5in;mso-layout-grid-align:
none;text-autospace:none'><span class=GramE><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier;color:black'>class</span></span><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier;
color:black'> </span><b><span style='font-size:8.5pt;font-family:Courier-Bold;
mso-bidi-font-family:Courier-Bold;color:black'>Token( object ):<o:p></o:p></span></b></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in 2.5in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'><span style='mso-tab-count:1'>       </span></span><span
class=GramE><b><span style='font-size:8.5pt;font-family:Courier-Bold;
mso-bidi-font-family:Courier-Bold;color:black'>kind</span></b></span><b><span
style='font-size:8.5pt;font-family:Courier-Bold;mso-bidi-font-family:Courier-Bold;
color:black'><span style='mso-spacerun:yes'>   </span>= 0<span
style='mso-tab-count:1'>           </span>#</span></b><span style='font-size:
8.5pt;font-family:Courier;mso-bidi-font-family:Courier;color:black'> token code
(EOF has the code 0)<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in 2.5in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'><span style='mso-tab-count:1'>       </span></span><span
class=SpellE><span class=GramE><b><span style='font-size:8.5pt;font-family:
Courier-Bold;mso-bidi-font-family:Courier-Bold;color:black'>val</span></b></span></span><b><span
style='font-size:8.5pt;font-family:Courier-Bold;mso-bidi-font-family:Courier-Bold;
color:black'><span style='mso-spacerun:yes'>    </span>= ‘’<span
style='mso-tab-count:1'>          </span>#</span></b><span style='font-size:
8.5pt;font-family:Courier;mso-bidi-font-family:Courier;color:black'> token
value<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in 2.5in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'><span style='mso-tab-count:1'>       </span></span><span
class=GramE><b><span style='font-size:8.5pt;font-family:Courier-Bold;
mso-bidi-font-family:Courier-Bold;color:black'>pos</span></b></span><b><span
style='font-size:8.5pt;font-family:Courier-Bold;mso-bidi-font-family:Courier-Bold;
color:black'><span style='mso-spacerun:yes'>    </span>= 0<span
style='mso-tab-count:1'>           </span>#</span></b><span style='font-size:
8.5pt;font-family:Courier;mso-bidi-font-family:Courier;color:black'> position in
the source stream (starting at 0)<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in 2.5in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'><span style='mso-tab-count:1'>       </span></span><span
class=GramE><b><span style='font-size:8.5pt;font-family:Courier-Bold;
mso-bidi-font-family:Courier-Bold;color:black'>line</span></b></span><b><span
style='font-size:8.5pt;font-family:Courier-Bold;mso-bidi-font-family:Courier-Bold;
color:black'><span style='mso-spacerun:yes'>   </span>= 1<span
style='mso-tab-count:1'>           </span>#</span></b><span style='font-size:
8.5pt;font-family:Courier;mso-bidi-font-family:Courier;color:black'> line
number (starting at 1)<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in 2.5in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'><span style='mso-tab-count:1'>       </span></span><span
class=SpellE><span class=GramE><b><span style='font-size:8.5pt;font-family:
Courier-Bold;mso-bidi-font-family:Courier-Bold;color:black'>col</span></b></span></span><b><span
style='font-size:8.5pt;font-family:Courier-Bold;mso-bidi-font-family:Courier-Bold;
color:black'><span style='mso-spacerun:yes'>    </span>= 1<span
style='mso-tab-count:1'>           </span>#</span></b><span style='font-size:
8.5pt;font-family:Courier;mso-bidi-font-family:Courier;color:black'> column
number (starting at 0)<o:p></o:p></span></p>

<h3>3.3.3 Buffer</h3>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>This is an auxiliary class that is used by the scanner (and
possibly by other classes) to read the source stream into a buffer and retrieve
portions of it:<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in 3.0in;mso-layout-grid-align:
none;text-autospace:none'><span class=GramE><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier;color:black'>class</span></span><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier;
color:black'> </span><b><span style='font-size:8.5pt;font-family:Courier-Bold;
mso-bidi-font-family:Courier-Bold;color:black'>Buffer( object ):<o:p></o:p></span></b></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in 3.0in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'><span style='mso-tab-count:1'>       </span>@staticmethod<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in 3.0in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'><span style='mso-tab-count:1'>       </span><span
class=GramE>def</span> </span><b><span style='font-size:8.5pt;font-family:Courier-Bold;
mso-bidi-font-family:Courier-Bold;color:black'>Fill</span></b><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier;
color:black'>(Stream s)<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in 3.0in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in 3.0in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'><span style='mso-tab-count:1'>       </span>@staticmethod<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in 3.0in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'><span style='mso-tab-count:1'>       </span><span
class=GramE>def</span> </span><b><span style='font-size:8.5pt;font-family:Courier-Bold;
mso-bidi-font-family:Courier-Bold;color:black'>Read</span></b><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier;
color:black'>()<span style='mso-tab-count:1'>                 </span># returns
int<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in 3.0in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in 3.0in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'><span style='mso-tab-count:1'>       </span>@staticmethod<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in 3.0in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'><span style='mso-tab-count:1'>       </span><span
class=GramE>def</span> </span><b><span style='font-size:8.5pt;font-family:Courier-Bold;
mso-bidi-font-family:Courier-Bold;color:black'>Peek</span></b><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier;
color:black'>()<span style='mso-tab-count:1'>                 </span># returns
int<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in 3.0in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in 3.0in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'><span style='mso-tab-count:1'>       </span>@staticmethod<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in 3.0in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'><span style='mso-tab-count:1'>       </span><span
class=GramE>def</span> </span><span class=SpellE><b><span style='font-size:
8.5pt;font-family:Courier-Bold;mso-bidi-font-family:Courier-Bold;color:black'>getPos</span></b></span><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier;
color:black'>()<span style='mso-tab-count:1'>               </span># returns
int<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in 3.0in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in 3.0in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'><span style='mso-tab-count:1'>       </span>@staticmethod<o:p></o:p></span></p>

<p class=MsoNormal style='tab-stops:1.0in 3.0in;mso-layout-grid-align:none;
text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'><span style='mso-tab-count:1'>              </span><span
class=GramE>def</span> </span><span class=SpellE><b><span style='font-size:
8.5pt;font-family:Courier-Bold;mso-bidi-font-family:Courier-Bold;color:black'>setPos</span></b></span><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier;
color:black'>()<o:p></o:p></span></p>

<p class=MsoNormal style='tab-stops:1.0in 3.0in;mso-layout-grid-align:none;
text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in 3.0in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'><span style='mso-tab-count:1'>       </span>@<span
class=SpellE>staticmethod</span><o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in 3.0in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'><span style='mso-tab-count:1'>       </span>def
</span><span class=SpellE><b><span style='font-size:8.5pt;font-family:Courier-Bold;
mso-bidi-font-family:Courier-Bold;color:black'>getString</span></b></span><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier;
color:black'>(beg, end)<span style='mso-tab-count:1'>    </span># returns
string<o:p></o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier;
color:black'>Fill(s) </span><span style='font-size:11.5pt;font-family:Times-Roman;
mso-bidi-font-family:Times-Roman;color:black'>fills the buffer with the source
stream. </span><span style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:
Courier;color:black'>s</span><span style='font-size:11.5pt;font-family:Times-Roman;
mso-bidi-font-family:Times-Roman;color:black'>. </span><span class=GramE><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier;
color:black'>Read(</span></span><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'>) </span><span style='font-size:11.5pt;
font-family:Times-Roman;mso-bidi-font-family:Times-Roman;color:black'>returns
the next </span><span style='font-size:11.5pt;font-family:Times-Roman;
mso-bidi-font-family:Times-Roman'>character, or </span><span style='font-size:
8.5pt;font-family:Courier;mso-bidi-font-family:Courier'>256 </span><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman'>if
the input is exhausted. </span><span class=GramE><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier'>Peek(</span></span><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier'>) </span><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman'>allows
the scanner to read characters ahead without consuming them. </span><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier'>Pos </span><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman'>allows
the scanner to get or set the readin<span style='color:black'>g position, which
is initially </span></span><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'>0</span><span style='font-size:11.5pt;
font-family:Times-Roman;mso-bidi-font-family:Times-Roman;color:black'>. </span><span
class=SpellE><span class=GramE><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'>GetString</span></span></span><span
class=GramE><span style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:
Courier;color:black'>(</span></span><span class=SpellE><span style='font-size:
8.5pt;font-family:Courier;mso-bidi-font-family:Courier;color:black'>a,b</span></span><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier;
color:black'>) </span><span style='font-size:11.5pt;font-family:Times-Roman;
mso-bidi-font-family:Times-Roman;color:black'>can be used to retrieve the text
interval </span><span style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:
Courier;color:black'>[<span class=SpellE>a..b</span>] </span><span class=GramE><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>from</span></span><span style='font-size:11.5pt;font-family:Times-Roman;
mso-bidi-font-family:Times-Roman;color:black'> the input stream.<o:p></o:p></span></p>

<h3>3.3.4 Parser</h3>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>The generated parser has the following interface:<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in 3.5in;mso-layout-grid-align:
none;text-autospace:none'><span class=GramE><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier'>class</span></span><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier'> </span><b><span
style='font-size:8.5pt;font-family:Courier-Bold;mso-bidi-font-family:Courier-Bold'>Parser(
object ):<o:p></o:p></span></b></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in 3.5in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier'><span style='mso-tab-count:1'>       </span></span><span
class=GramE><b><span style='font-size:8.5pt;font-family:Courier-Bold;
mso-bidi-font-family:Courier-Bold'>token</span></b></span><b><span
style='font-size:8.5pt;font-family:Courier-Bold;mso-bidi-font-family:Courier-Bold'>
= Token( )<span style='mso-tab-count:1'>                  </span># </span></b><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier'>most
recently recognized token<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in 3.5in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier'><span style='mso-tab-count:1'>       </span></span><span
class=GramE><b><span style='font-size:8.5pt;font-family:Courier-Bold;
mso-bidi-font-family:Courier-Bold'>la</span></b></span><b><span
style='font-size:8.5pt;font-family:Courier-Bold;mso-bidi-font-family:Courier-Bold'><span
style='mso-spacerun:yes'>    </span>= Token( )</span></b><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier'><span
style='mso-tab-count:1'>                  </span># lookahead token<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in 3.5in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in 3.5in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier'><span style='mso-tab-count:1'>       </span>@staticmethod<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in 3.5in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier'><span style='mso-tab-count:1'>       </span><span
class=GramE>def</span> </span><b><span style='font-size:8.5pt;font-family:Courier-Bold;
mso-bidi-font-family:Courier-Bold'>Parse</span></b><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier'>()<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in 3.5in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in 3.5in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier'><span style='mso-tab-count:1'>       </span>@staticmethod<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in 3.5in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier'><span style='mso-tab-count:1'>       </span><span
class=GramE>def</span> </span><span class=SpellE><b><span style='font-size:
8.5pt;font-family:Courier-Bold;mso-bidi-font-family:Courier-Bold'>SynErr</span></b></span><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier'>(<span
class=SpellE>errorMessage</span>)<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in 3.5in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in 3.5in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier'><span style='mso-tab-count:1'>       </span>@<span
class=SpellE>staticmethod</span><o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in 3.5in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier'><span style='mso-tab-count:1'>       </span><span
class=GramE>def</span> </span><span class=SpellE><b><span style='font-size:
8.5pt;font-family:Courier-Bold;mso-bidi-font-family:Courier-Bold'>SemErr</span></b></span><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier'>(<span
class=SpellE>errorMessage</span>)<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in 3.5in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in 3.5in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier'><span style='mso-tab-count:1'>       </span>@<span
class=SpellE>staticmethod</span><o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in 3.5in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier'><span style='mso-tab-count:1'>       </span><span
class=GramE>def</span> </span><b><span style='font-size:8.5pt;font-family:Courier-Bold;
mso-bidi-font-family:Courier-Bold'>Warning</span></b><span style='font-size:
8.5pt;font-family:Courier;mso-bidi-font-family:Courier'>(<span class=SpellE>errorMessage</span>)<span
style='mso-tab-count:1'>         </span># Warning message only<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in 3.5in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in 3.5in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier'><span style='mso-tab-count:1'>       </span>@<span
class=SpellE>staticmethod</span><o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in 3.5in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier'><span style='mso-tab-count:1'>       </span><span
class=GramE>def</span> </span><b><span style='font-size:8.5pt;font-family:Courier-Bold;
mso-bidi-font-family:Courier-Bold'>Successful</span></b><span style='font-size:
8.5pt;font-family:Courier;mso-bidi-font-family:Courier'>()<span
style='mso-tab-count:1'>                  </span># True if no errors occurred<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in 3.5in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in 3.5in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier'><span style='mso-tab-count:1'>       </span>@<span
class=SpellE>staticmethod</span><o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in 3.5in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier'><span style='mso-tab-count:1'>       </span><span
class=GramE>def</span> </span><span class=SpellE><b><span style='font-size:
8.5pt;font-family:Courier-Bold;mso-bidi-font-family:Courier-Bold'>LexString</span></b></span><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier'>()<span
style='mso-tab-count:1'>                   </span># Returns <span class=SpellE>Parser.token.val</span><o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in 3.5in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in 3.5in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier'><span style='mso-tab-count:1'>       </span>@<span
class=SpellE>staticmethod</span><o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in 3.5in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier'><span style='mso-tab-count:1'>       </span><span
class=GramE>def</span> </span><span class=SpellE><b><span style='font-size:
8.5pt;font-family:Courier-Bold;mso-bidi-font-family:Courier-Bold'>LookAheadString</span></b></span><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier'>()<span
style='mso-tab-count:1'>             </span># Returns <span class=SpellE>Parser.la.val</span><o:p></o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>The </span><span style='font-size:11.5pt;font-family:Times-Roman;
mso-bidi-font-family:Times-Roman'>variable </span><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier'>token<span style='color:red'>
</span></span><span style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:
Times-Roman;color:black'>holds the most recently recognized token. It can be
used in semantic actions to access the token value or the token position. The
variable </span><span style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:
Courier;color:black'>la </span><span style='font-size:11.5pt;font-family:Times-Roman;
mso-bidi-font-family:Times-Roman;color:black'>holds the lookahead token, i.e.
the first token </span><span style='font-size:11.5pt;font-family:Times-Roman;
mso-bidi-font-family:Times-Roman'>after </span><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier'>token</span><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman'>,
which<span style='color:black'> has not yet been recognized by the parser.<o:p></o:p></span></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>The method </span><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'>Parse </span><span style='font-size:
11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;color:black'>is
the actual parser. It has to be called by the main class of the compiler (see
Section 3.4) after initializing the scanner.<o:p></o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>The method </span><span class=SpellE><span class=GramE><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier;
color:black'>SemErr</span></span></span><span class=GramE><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier;
color:black'>(</span></span><span class=SpellE><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier;color:black'>msg</span></span><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier;
color:black'>) </span><span style='font-size:11.5pt;font-family:Times-Roman;
mso-bidi-font-family:Times-Roman;color:black'>can be used to report semantic
errors during parsing. It calls </span><span class=SpellE><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier;
color:black'>Errors.Error</span></span><span style='font-size:8.5pt;font-family:
Courier;mso-bidi-font-family:Courier;color:black'> </span><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>(see Section 3.3.5) and suppresses error messages that are too
close to the position of the previous error, thus avoiding spurious error
messages (see Section 2.4.7).<o:p></o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman'>The
remaining methods – found only in the extended version of Coco/R – provide
compatibility with earlier versions of Coco/R, which were not object oriented. <o:p></o:p></span></p>

<h3>3.3.5 Errors</h3>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman'>This
class, defined in the file <span class=SpellE>Parser.frame</span> (and
consequently <span class=SpellE>Parser.py</span>), is used to print error
messages. Coco/R distinguishes four kinds of errors: syntax errors, semantic
errors, warnings and runtime exceptions. The interface of </span><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier'>Errors</span><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman'>,
given below, is of little direct interest, as calls to the methods involved
with syntactic errors are incorporated automatically by Coco/R, while semantic
errors are best dealt with by using by using the method <span class=SpellE>Parser.SemErr</span>()
the methods are equivalent and both are provided simply for compatibility with
other versions of Coco/R<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in;mso-layout-grid-align:
none;text-autospace:none'><span class=GramE><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier'>class</span></span><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier'> </span><b><span
style='font-size:8.5pt;font-family:Courier-Bold;mso-bidi-font-family:Courier-Bold'>Errors:<o:p></o:p></span></b></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier'><span style='mso-tab-count:1'>       </span></span><span
class=GramE><b><span style='font-size:8.5pt;font-family:Courier-Bold;
mso-bidi-font-family:Courier-Bold'>count</span></b></span><b><span
style='font-size:8.5pt;font-family:Courier-Bold;mso-bidi-font-family:Courier-Bold'>
</span></b><span style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:
Courier'>= 0<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier'><span style='mso-tab-count:1'>       </span></span><span
class=SpellE><b><span style='font-size:8.5pt;font-family:Courier-Bold;
mso-bidi-font-family:Courier-Bold'>errMsgFormat</span></b></span><b><span
style='font-size:8.5pt;font-family:Courier-Bold;mso-bidi-font-family:Courier-Bold'>
</span></b><span style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:
Courier'>= &quot;file %(file)s : (%(line)d, %(<span class=SpellE>col</span>)d)
%(<span class=SpellE>msg</span>)s&quot;<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier'><span style='mso-tab-count:1'>       </span>@<span
class=SpellE>staticmethod</span><o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier'><span style='mso-tab-count:1'>       </span><span
class=GramE>def</span> </span><b><span style='font-size:8.5pt;font-family:Courier-Bold;
mso-bidi-font-family:Courier-Bold;color:black'>Init</span></b><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier'>(<span
class=SpellE>fileName</span>, <span class=SpellE>dirName</span>, merge, <span
class=SpellE>getParsingPos</span>, <span class=SpellE>errorMessages</span>)<span
style='mso-spacerun:yes'>   </span># merge is a <span class=SpellE>bool</span><o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier'><span style='mso-tab-count:1'>       </span>@<span
class=SpellE>staticmethod</span><o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier'><span style='mso-tab-count:1'>       </span><span
class=GramE>def</span> </span><span class=SpellE><span style='font-size:8.5pt;
font-family:Courier-Bold;mso-bidi-font-family:Courier-Bold;color:black;
mso-bidi-font-weight:bold'>StoreError</span></span><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier'>(line, <span class=SpellE>col</span>,
<span class=SpellE>errorMsg</span>)<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier'><span style='mso-tab-count:1'>       </span>@<span
class=SpellE>staticmethod</span><o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier'><span style='mso-tab-count:1'>       </span><span
class=GramE>def</span> </span><span class=SpellE><span style='font-size:8.5pt;
font-family:Courier-Bold;mso-bidi-font-family:Courier-Bold;color:black;
mso-bidi-font-weight:bold'>SynErr</span></span><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier'>(<span class=SpellE>errorNum</span>)<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier'><span style='mso-tab-count:1'>       </span>@<span
class=SpellE>staticmethod</span><o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier'><span style='mso-tab-count:1'>       </span><span
class=GramE>def</span> </span><span class=SpellE><span style='font-size:8.5pt;
font-family:Courier-Bold;mso-bidi-font-family:Courier-Bold;color:black;
mso-bidi-font-weight:bold'>SemErr</span></span><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier'>(<span class=SpellE>errorMessage</span>)<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier'><span style='mso-tab-count:1'>       </span>@<span
class=SpellE>staticmethod</span><o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier'><span style='mso-tab-count:1'>       </span><span
class=GramE>def</span> <span style='color:black'>Warn</span>(<span
class=SpellE>errorMessage</span>)<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier'><span style='mso-tab-count:1'>       </span>@<span
class=SpellE>staticmethod</span><o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier'><span style='mso-tab-count:1'>       </span><span
class=GramE>def</span> </span><b><span style='font-size:8.5pt;font-family:Courier-Bold;
mso-bidi-font-family:Courier-Bold;color:black'>Exception</span></b><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier'>(<span
class=SpellE>errorMsg</span>)<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier'><span style='mso-tab-count:1'>       </span>@<span
class=SpellE>staticmethod</span><o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier'><span style='mso-tab-count:1'>       </span><span
class=GramE>def</span> </span><b><span style='font-size:8.5pt;font-family:Courier-Bold;
mso-bidi-font-family:Courier-Bold;color:black'>Summarize</span></b><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier'>(<span
class=SpellE>sourceBuffer</span>)<o:p></o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman'>The
variable </span><span style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:
Courier'>count </span><span style='font-size:11.5pt;font-family:Times-Roman;
mso-bidi-font-family:Times-Roman'>holds the number of errors reported by </span><span
class=SpellE><span style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:
Courier'>SynErr</span></span><span style='font-size:11.5pt;font-family:Times-Roman;
mso-bidi-font-family:Times-Roman'> <span class=GramE>and<span
style='mso-spacerun:yes'>  </span><span class=SpellE><span style='font-size:
8.5pt;font-family:Courier;mso-bidi-font-family:Courier'>SemErr</span></span></span>.<o:p></o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman'>Errors
can either be reported with an error number or with an error message. Syntax
errors are automatically reported by the generated parser, which calls the
method </span><span class=SpellE><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier'>SynErr</span></span><span style='font-size:11.5pt;
font-family:Times-Roman;mso-bidi-font-family:Times-Roman'>. Semantic errors
should be reported by the user by calling </span><span class=SpellE><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier'>SemErr</span></span><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier'> </span><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman'>from
the semantic actions of the attributed grammar.<o:p></o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman'>Unless
a source listing is required, error messages are simply reflected to the
console using the format <span class=SpellE>Errors.<span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier'>errMsgFormat</span></span></span><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier'>, </span><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman'>which
can be changed by the user to obtain some custom format of error messages.<o:p></o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman'>If
a source listing is required with merged error messages, methods </span><span
class=SpellE><span style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:
Courier'>SynErr</span></span><span style='font-size:11.5pt;font-family:Times-Roman;
mso-bidi-font-family:Times-Roman'>, </span><span class=SpellE><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier'>SemErr</span></span><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier'> and
Warn </span><span style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:
Times-Roman'>store error messages in an internal data structure. The production
of the listing is initiated, after parsing is completed, by calling the method </span><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier'>Summarize</span><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman'>.<o:p></o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman'>The
method </span><span style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:
Courier'>Exception </span><span style='font-size:11.5pt;font-family:Times-Roman;
mso-bidi-font-family:Times-Roman'>can be called for errors from which the
compiler cannot recover. In Coco/R it is called, for example, if the frame
files cannot be found or are corrupt. It prints an error message to the console
and terminates the compiler.<o:p></o:p></span></p>

<h2>3.4 Main Class of the Compiler</h2>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman'>The
main class of a compiler that is generated with Coco/R has also to be provided
in some manner. It has to initialize the scanner, call the parser and possibly
print a message about the success of the compilation. In its simplest form it
might look like this:<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in 1.5in 2.0in;
mso-layout-grid-align:none;text-autospace:none'><span class=GramE><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier'>class</span></span><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier'>
Compiler( object ):<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in 1.5in 2.0in;
mso-layout-grid-align:none;text-autospace:none'><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier'><span style='mso-tab-count:
1'>       </span>@staticmethod<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in 1.5in 2.0in;
mso-layout-grid-align:none;text-autospace:none'><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier'><span style='mso-tab-count:
1'>       </span><span class=GramE>def</span> </span><st1:place><span
 style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier'>Main</span></st1:place><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier'>( ):<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in 1.5in 2.0in;
mso-layout-grid-align:none;text-autospace:none'><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier'><span style='mso-tab-count:
2'>              </span><span class=SpellE>ATGName</span> = . . .<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in 1.5in 2.0in;
mso-layout-grid-align:none;text-autospace:none'><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier'><span style='mso-tab-count:
2'>              </span><span class=SpellE><span class=GramE>Scanner.Init</span></span><span
class=GramE>(</span><span class=SpellE>ATGName</span>)<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in 1.5in 2.0in;
mso-layout-grid-align:none;text-autospace:none'><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier'><span style='mso-tab-count:
2'>              </span><span class=SpellE><span class=GramE>Parser.Parse</span></span><span
class=GramE>()</span><o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in 1.5in 2.0in;
mso-layout-grid-align:none;text-autospace:none'><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier'><span style='mso-tab-count:
2'>              </span><span class=GramE>print</span> &quot;%d errors
detected&quot; % <span class=SpellE>Errors.count</span><o:p></o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman'>As
mentioned previously, in this implementation of Coco/R a compiler driver class
can be generated from an appropriate driver frame file. For very simple
applications the default </span><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier'>Driver.frame </span><span style='font-size:11.5pt;
font-family:Times-Roman;mso-bidi-font-family:Times-Roman'>file supplied in the
distribution might suffice, but for serious applications a customized frame
file should be created in the same directory as the </span><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier'>Grammar.ATG
</span><span style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:
Times-Roman'>file and given the name </span><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier'>Grammar.frame</span><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman'>.
It is suggested that this file can be derived fairly simply from the simple </span><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier'>Driver.frame</span><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman'>.<o:p></o:p></span></p>

<h2>3.5 Grammar Tests</h2>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>Coco/R checks if the grammar in the compiler specification is
well-formed. This includes the following tests:<o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:.25in;text-indent:-.25in;mso-list:l4 level1 lfo15;
tab-stops:list .25in .5in;mso-layout-grid-align:none;text-autospace:none'><![if !supportLists]><span
style='font-size:11.5pt;font-family:Symbol;mso-fareast-font-family:Symbol;
mso-bidi-font-family:Symbol;color:black;mso-bidi-font-weight:bold'><span
style='mso-list:Ignore'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></span><![endif]><b><span style='font-size:11.5pt;font-family:
Times-Bold;mso-bidi-font-family:Times-Bold;color:black'>Completeness<o:p></o:p></span></b></p>

<p class=MsoNormal style='margin-left:.25in;mso-layout-grid-align:none;
text-autospace:none'><span style='font-size:11.5pt;font-family:Times-Roman;
mso-bidi-font-family:Times-Roman;color:black'>For every nonterminal symbol
there must be a production. If a nonterminal </span><span style='font-size:
8.5pt;font-family:Courier;mso-bidi-font-family:Courier;color:black'>X </span><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>does not have a production Coco/R prints the message<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;mso-layout-grid-align:none;
text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'>No production for X<o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:.25in;text-indent:-.25in;mso-list:l4 level1 lfo15;
tab-stops:list .25in .5in;mso-layout-grid-align:none;text-autospace:none'><![if !supportLists]><span
style='font-size:11.5pt;font-family:Symbol;mso-fareast-font-family:Symbol;
mso-bidi-font-family:Symbol;color:black;mso-bidi-font-weight:bold'><span
style='mso-list:Ignore'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></span><![endif]><b><span style='font-size:11.5pt;font-family:
Times-Bold;mso-bidi-font-family:Times-Bold;color:black'>Lack of redundancy<o:p></o:p></span></b></p>

<p class=MsoNormal style='margin-left:.25in;mso-layout-grid-align:none;
text-autospace:none'><span style='font-size:11.5pt;font-family:Times-Roman;
mso-bidi-font-family:Times-Roman;color:black'>If the grammar contains
productions for a nonterminal </span><span style='font-size:8.5pt;font-family:
Courier;mso-bidi-font-family:Courier;color:black'>X </span><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>that does not occur in any other productions derived from the
start symbol Coco/R prints the message<o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:.25in;text-indent:.25in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'>X cannot be reached<o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:.25in;text-indent:-.25in;mso-list:l4 level1 lfo15;
tab-stops:list .25in .5in;mso-layout-grid-align:none;text-autospace:none'><![if !supportLists]><span
style='font-size:11.5pt;font-family:Symbol;mso-fareast-font-family:Symbol;
mso-bidi-font-family:Symbol;color:black;mso-bidi-font-weight:bold'><span
style='mso-list:Ignore'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></span><![endif]><b><span style='font-size:11.5pt;font-family:
Times-Bold;mso-bidi-font-family:Times-Bold;color:black'>Derivability<o:p></o:p></span></b></p>

<p class=MsoNormal style='margin-left:.25in;mso-layout-grid-align:none;
text-autospace:none'><span style='font-size:11.5pt;font-family:Times-Roman;
mso-bidi-font-family:Times-Roman;color:black'>If the grammar contains
nonterminals that cannot be derived into a sequence of terminals, such as in<o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:.5in;mso-layout-grid-align:none;
text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'>X = Y ';'.<o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:.5in;mso-outline-level:1;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'>Y = '(' X ')'.<o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:.25in;mso-outline-level:1;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:11.5pt;font-family:Times-Roman;
mso-bidi-font-family:Times-Roman;color:black'>Coco/R prints the messages<o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:.5in;mso-layout-grid-align:none;
text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'>X cannot be derived to terminals<o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:.5in;mso-layout-grid-align:none;
text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'>Y cannot be derived to terminals<o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:.25in;text-indent:-.25in;mso-list:l4 level1 lfo15;
tab-stops:list .25in .5in;mso-layout-grid-align:none;text-autospace:none'><![if !supportLists]><span
style='font-size:11.5pt;font-family:Symbol;mso-fareast-font-family:Symbol;
mso-bidi-font-family:Symbol;color:black;mso-bidi-font-weight:bold'><span
style='mso-list:Ignore'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></span><![endif]><b><span style='font-size:11.5pt;font-family:
Times-Bold;mso-bidi-font-family:Times-Bold;color:black'>Lack of circularity<o:p></o:p></span></b></p>

<p class=MsoNormal style='margin-left:.25in;mso-layout-grid-align:none;
text-autospace:none'><span style='font-size:11.5pt;font-family:Times-Roman;
mso-bidi-font-family:Times-Roman;color:black'>If the grammar contains circular
productions, i.e. if nonterminals can be derived into themselves (directly or
indirectly) such as in<o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:.5in;mso-layout-grid-align:none;
text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'>A = <span class=GramE>[ a</span> ] B.<o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:.5in;mso-layout-grid-align:none;
text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'>B = <span class=GramE>( C</span>| b
).<o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:.5in;mso-layout-grid-align:none;
text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'>C = A <span class=GramE>{ c</span> }.<o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:.25in;mso-layout-grid-align:none;
text-autospace:none'><span style='font-size:11.5pt;font-family:Times-Roman;
mso-bidi-font-family:Times-Roman;color:black'>Coco/R prints the messages<o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:.5in;mso-layout-grid-align:none;
text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'>A --&gt; B<o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:.5in;mso-layout-grid-align:none;
text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'>B --&gt; C<o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:.5in;mso-layout-grid-align:none;
text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'>C --&gt; A<o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:.25in;text-indent:-.25in;mso-list:l4 level1 lfo15;
tab-stops:list .25in .5in;mso-layout-grid-align:none;text-autospace:none'><![if !supportLists]><span
style='font-size:11.5pt;font-family:Symbol;mso-fareast-font-family:Symbol;
mso-bidi-font-family:Symbol;color:black;mso-bidi-font-weight:bold'><span
style='mso-list:Ignore'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></span><![endif]><b><span style='font-size:11.5pt;font-family:
Times-Bold;mso-bidi-font-family:Times-Bold;color:black'>Lack of ambiguity<o:p></o:p></span></b></p>

<p class=MsoNormal style='margin-left:.25in;mso-layout-grid-align:none;
text-autospace:none'><span style='font-size:11.5pt;font-family:Times-Roman;
mso-bidi-font-family:Times-Roman;color:black'>If two or more tokens are
declared so that they can have the same structure and thus cannot be
distinguished by the scanner, as in the following example, where the input </span><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier;
color:black'>123 </span><span style='font-size:11.5pt;font-family:Times-Roman;
mso-bidi-font-family:Times-Roman;color:black'>could either be recognized as an </span><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier;
color:black'>integer </span><span style='font-size:11.5pt;font-family:Times-Roman;
mso-bidi-font-family:Times-Roman;color:black'>or as a </span><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier;
color:black'>float</span><span style='font-size:11.5pt;font-family:Times-Roman;
mso-bidi-font-family:Times-Roman;color:black'>:<o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:.5in;mso-outline-level:1;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'>TOKENS<o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:1.0in;mso-layout-grid-align:none;
text-autospace:none'><span class=GramE><span style='font-size:8.5pt;font-family:
Courier;mso-bidi-font-family:Courier;color:black'>integer</span></span><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier;
color:black'> = digit { digit }.<o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:1.0in;mso-layout-grid-align:none;
text-autospace:none'><span class=GramE><span style='font-size:8.5pt;font-family:
Courier;mso-bidi-font-family:Courier;color:black'>float</span></span><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier;
color:black'> = digit { digit } [ '.' <span class=GramE>{ digit</span> } ].<o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:.25in;mso-layout-grid-align:none;
text-autospace:none'><span style='font-size:11.5pt;font-family:Times-Roman;
mso-bidi-font-family:Times-Roman;color:black'>Coco/R prints the message<o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:.25in;text-indent:.25in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'>Tokens integer and float cannot be
distinguished<o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:.25in;text-indent:.25in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>In all these cases the compiler specification is erroneous and no
scanner and parser <span class=GramE>is</span> generated.<o:p></o:p></span></p>

<p class=MsoNormal style='mso-outline-level:1;mso-layout-grid-align:none;
text-autospace:none'><b><span style='font-size:11.5pt;font-family:Helvetica-Bold;
mso-bidi-font-family:Helvetica-Bold;color:black'>Warnings<o:p></o:p></span></b></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>There are also situations in grammars that - although legal -
might lead to problems. In such cases Coco/R prints a warning, </span><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman'>but
still generates<span style='color:black'> a scanner and a parser. The user
should carefully check if these situations are acceptable and, if not, repair the
grammar.<o:p></o:p></span></span></p>

<p class=MsoNormal style='margin-left:.25in;text-indent:-.25in;mso-list:l4 level1 lfo15;
tab-stops:list .25in .5in;mso-layout-grid-align:none;text-autospace:none'><![if !supportLists]><span
style='font-size:11.5pt;font-family:Symbol;mso-fareast-font-family:Symbol;
mso-bidi-font-family:Symbol;color:black;mso-bidi-font-weight:bold'><span
style='mso-list:Ignore'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></span><![endif]><b><span style='font-size:11.5pt;font-family:
Times-Bold;mso-bidi-font-family:Times-Bold;color:black'>Deletable symbols<o:p></o:p></span></b></p>

<p class=MsoNormal style='margin-left:.25in;mso-layout-grid-align:none;
text-autospace:none'><span style='font-size:11.5pt;font-family:Times-Roman;
mso-bidi-font-family:Times-Roman;color:black'>Sometimes, nonterminals can be
derived into the empty string, such as in the following grammar:<o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:.5in;mso-layout-grid-align:none;
text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'>A = B <span class=GramE>[ a</span> ].<o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:.5in;mso-layout-grid-align:none;
text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'>B = <span class=GramE>{ b</span> }.<o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:.25in;mso-layout-grid-align:none;
text-autospace:none'><span style='font-size:11.5pt;font-family:Times-Roman;
mso-bidi-font-family:Times-Roman;color:black'>In such cases Coco/R prints the
warnings<o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:.5in;mso-layout-grid-align:none;
text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'>A deletable<o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:.5in;mso-layout-grid-align:none;
text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'>B deletable<o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:.25in;text-indent:-.25in;mso-list:l4 level1 lfo15;
tab-stops:list .25in .5in;mso-layout-grid-align:none;text-autospace:none'><![if !supportLists]><span
style='font-size:11.5pt;font-family:Symbol;mso-fareast-font-family:Symbol;
mso-bidi-font-family:Symbol;color:black;mso-bidi-font-weight:bold'><span
style='mso-list:Ignore'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></span><![endif]><b><span style='font-size:11.5pt;font-family:
Times-Bold;mso-bidi-font-family:Times-Bold;color:black'>LL(1) conflicts<o:p></o:p></span></b></p>

<p class=MsoNormal style='margin-left:.25in;mso-layout-grid-align:none;
text-autospace:none'><span style='font-size:11.5pt;font-family:Times-Roman;
mso-bidi-font-family:Times-Roman;color:black'>If two or more alternatives start
with the same token such as in<o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:.5in;mso-layout-grid-align:none;
text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'>Statement = ident '=' Expression ';'<o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:.5in;text-indent:.5in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'>| <span class=GramE>ident</span> '('
Parameters ')' ';'.<o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:.25in;mso-layout-grid-align:none;
text-autospace:none'><span style='font-size:11.5pt;font-family:Times-Roman;
mso-bidi-font-family:Times-Roman;color:black'>Coco/R prints the warning<o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:.25in;text-indent:.25in;mso-layout-grid-align:
none;text-autospace:none'><span class=GramE><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier;color:black'>LL(</span></span><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier;
color:black'>1) warning in Statement: ident is the start of several
alternatives<o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:.25in;mso-layout-grid-align:none;
text-autospace:none'><span style='font-size:11.5pt;font-family:Times-Roman;
mso-bidi-font-family:Times-Roman;color:black'>If the start symbols and the
successors of a deletable EBNF expression </span><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier;color:black'>{...} </span><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>or </span><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'>[...] </span><span style='font-size:
11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;color:black'>are
not disjoint, as <span class=SpellE>as</span> in<o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:.5in;mso-layout-grid-align:none;
text-autospace:none'><span class=SpellE><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier;color:black'>QualId</span></span><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier;
color:black'> = <span class=GramE>[ id</span> '.' ] id.<o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:.5in;mso-layout-grid-align:none;
text-autospace:none'><span class=SpellE><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier;color:black'>IdList</span></span><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier;
color:black'> = id { ',' <span class=GramE>id }</span> [ ',' ].<o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:.25in;mso-layout-grid-align:none;
text-autospace:none'><span style='font-size:11.5pt;font-family:Times-Roman;
mso-bidi-font-family:Times-Roman;color:black'>Coco/R prints the warnings<o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:.5in;mso-layout-grid-align:none;
text-autospace:none'><span class=GramE><span style='font-size:8.5pt;font-family:
Courier;mso-bidi-font-family:Courier;color:black'>LL(</span></span><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier;
color:black'>1) warning in <span class=SpellE>QualId</span>: id is the start
&amp; successor of deletable structure<o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:.5in;mso-layout-grid-align:none;
text-autospace:none'><span class=GramE><span style='font-size:8.5pt;font-family:
Courier;mso-bidi-font-family:Courier;color:black'>LL(</span></span><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier;
color:black'>1) warning in <span class=SpellE>IdList</span>: ',' is the start
&amp; successor of deletable structure<o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:.25in;mso-layout-grid-align:none;
text-autospace:none'><span style='font-size:11.5pt;font-family:Times-Roman;
mso-bidi-font-family:Times-Roman;color:black'>The resolution of <span
class=GramE>LL(</span>1) conflicts is discussed in Section 2.4.5.<o:p></o:p></span></p>

<h1>5. Applications of Coco/R</h1>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>Coco/R can be used not only to write proper compilers, but also to
build many kinds of tools that process structured input data. Various people
have used Coco/R for the following applications:<o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:.25in;text-indent:-.25in;mso-list:l4 level1 lfo15;
tab-stops:list .25in .5in;mso-layout-grid-align:none;text-autospace:none'><![if !supportLists]><span
style='font-size:11.5pt;font-family:Symbol;mso-fareast-font-family:Symbol;
mso-bidi-font-family:Symbol;color:black'><span style='mso-list:Ignore'>·<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></span><![endif]><span style='font-size:11.5pt;font-family:Times-Roman;
mso-bidi-font-family:Times-Roman;color:black'>An analyzer for the static
complexity of programs. The analyzer evaluates the kind of operators and
statements, the nesting of statements and expressions as well as the use of
local and global variables to obtain a measure of the program complexity and an
indication if the program is well structured.<o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:.25in;text-indent:-.25in;mso-list:l4 level1 lfo15;
tab-stops:list .25in .5in;mso-layout-grid-align:none;text-autospace:none'><![if !supportLists]><span
style='font-size:11.5pt;font-family:Symbol;mso-fareast-font-family:Symbol;
mso-bidi-font-family:Symbol;color:black'><span style='mso-list:Ignore'>·<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></span><![endif]><span style='font-size:11.5pt;font-family:Times-Roman;
mso-bidi-font-family:Times-Roman;color:black'>A cross reference generator which
lists all occurrences of the objects in a program according to their scope
together with information where the objects have been assigned a value and
where they have been referenced.<o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:.25in;text-indent:-.25in;mso-list:l4 level1 lfo15;
tab-stops:list .25in .5in;mso-layout-grid-align:none;text-autospace:none'><![if !supportLists]><span
style='font-size:11.5pt;font-family:Symbol;mso-fareast-font-family:Symbol;
mso-bidi-font-family:Symbol;color:black'><span style='mso-list:Ignore'>·<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></span><![endif]><span style='font-size:11.5pt;font-family:Times-Roman;
mso-bidi-font-family:Times-Roman;color:black'>A pretty </span><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman'>printer
that uses<span style='color:black'> the structure and the length of statements
for proper indentation.<o:p></o:p></span></span></p>

<p class=MsoNormal style='margin-left:.25in;text-indent:-.25in;mso-list:l4 level1 lfo15;
tab-stops:list .25in .5in;mso-layout-grid-align:none;text-autospace:none'><![if !supportLists]><span
style='font-size:11.5pt;font-family:Symbol;mso-fareast-font-family:Symbol;
mso-bidi-font-family:Symbol;color:black'><span style='mso-list:Ignore'>·<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></span><![endif]><span style='font-size:11.5pt;font-family:Times-Roman;
mso-bidi-font-family:Times-Roman;color:black'>A </span><span style='font-size:
11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman'>program that
generates<span style='color:black'> an index for books and reports. The index
is generated from a little language that describes page numbers and the
keywords occurring on those pages.<o:p></o:p></span></span></p>

<p class=MsoNormal style='margin-left:.25in;text-indent:-.25in;mso-list:l4 level1 lfo15;
tab-stops:list .25in .5in;mso-layout-grid-align:none;text-autospace:none'><![if !supportLists]><span
style='font-size:11.5pt;font-family:Symbol;mso-fareast-font-family:Symbol;
mso-bidi-font-family:Symbol;color:black'><span style='mso-list:Ignore'>·<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></span><![endif]><span style='font-size:11.5pt;font-family:Times-Roman;
mso-bidi-font-family:Times-Roman;color:black'>The front end of a
syntax-oriented editor. A program is translated into a tree representation
which is the internal data structure of the editor.<o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:.25in;text-indent:-.25in;mso-list:l4 level1 lfo15;
tab-stops:list .25in .5in;mso-layout-grid-align:none;text-autospace:none'><![if !supportLists]><span
style='font-size:11.5pt;font-family:Symbol;mso-fareast-font-family:Symbol;
mso-bidi-font-family:Symbol;color:black'><span style='mso-list:Ignore'>·<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></span><![endif]><span style='font-size:11.5pt;font-family:Times-Roman;
mso-bidi-font-family:Times-Roman;color:black'>A program that builds a
repository of symbols and their relations in a program. The repository is
accessed by a case tool.<o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:.25in;text-indent:-.25in;mso-list:l4 level1 lfo15;
tab-stops:list .25in .5in;mso-layout-grid-align:none;text-autospace:none'><![if !supportLists]><span
style='font-size:11.5pt;font-family:Symbol;mso-fareast-font-family:Symbol;
mso-bidi-font-family:Symbol;color:black'><span style='mso-list:Ignore'>·<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></span><![endif]><span style='font-size:11.5pt;font-family:Times-Roman;
mso-bidi-font-family:Times-Roman;color:black'>A profiler that inserts counters
and timers into the source code of a program and evaluates them after the
program has been run.<o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:.25in;text-indent:-.25in;mso-list:l4 level1 lfo15;
tab-stops:list .25in .5in;mso-layout-grid-align:none;text-autospace:none'><![if !supportLists]><span
style='font-size:11.5pt;font-family:Symbol;mso-fareast-font-family:Symbol;
mso-bidi-font-family:Symbol;color:black'><span style='mso-list:Ignore'>·<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></span><![endif]><span style='font-size:11.5pt;font-family:Times-Roman;
mso-bidi-font-family:Times-Roman;color:black'>A white-box test tool that
inserts counters into the source code of a program to find out which paths of
the programs have been executed.<o:p></o:p></span></p>

<h1>6. Acknowledgements</h1>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:11.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>The author gratefully acknowledges the help of the following
people, who contributed ideas and improvements to Coco/R or ported it to other
programming languages: Frankie <span class=SpellE>Arzu</span>, John Gough,
Markus <span class=SpellE>Löberbauer</span>, Peter <span class=SpellE>Rechenberg</span>,
Josef <span class=SpellE>Templ</span>, Pat Terry, and Albrecht <span
class=SpellE>Wöß</span>.<o:p></o:p></span></p>

<h2>References</h2>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:9.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>[Möss90] <span class=SpellE>Mössenböck</span>, H.: A Generator for
Production Quality Compilers. 3rd Intl. Workshop on<o:p></o:p></span></p>

<p class=MsoNormal style='mso-outline-level:1;mso-layout-grid-align:none;
text-autospace:none'><span style='font-size:9.5pt;font-family:Times-Roman;
mso-bidi-font-family:Times-Roman;color:black'>Compiler Compilers (CC'90), </span><st1:City
st="on"><st1:place st="on"><span class=SpellE><span style='font-size:9.5pt;
  font-family:Times-Roman;mso-bidi-font-family:Times-Roman;color:black'>Schwerin</span></span></st1:place></st1:City><span
style='font-size:9.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>, LNCS 477, Springer-<span class=SpellE>Verlag</span> 1990<o:p></o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:9.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>[Terry97] Terry, P.D.: Compilers and Compiler Generators – An
Introduction Using C++. International<o:p></o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:9.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>Thomson Computer Press, 1997.<o:p></o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:9.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>[Terry04] Terry, P.D.: Compiling with C# and Java. <span
class=GramE>Pearson, 2004.</span><o:p></o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:9.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>[Wirth77] Wirth, N.: What Can We Do about the Unnecessary
Diversity of Notation for Syntactic<o:p></o:p></span></p>

<p class=MsoNormal style='mso-outline-level:1;mso-layout-grid-align:none;
text-autospace:none'><span class=GramE><span style='font-size:9.5pt;font-family:
Times-Roman;mso-bidi-font-family:Times-Roman;color:black'>Definitions?</span></span><span
style='font-size:9.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'> Communications of the ACM, November 1977<o:p></o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:9.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>[WLM03] <span class=SpellE>Wöß</span> A., <span class=SpellE>Löberbauer</span>
M., <span class=SpellE>Mössenböck</span> H.: <span class=GramE>LL(</span>1)
Conflict Resolution in a Recursive Descent<o:p></o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:9.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>Compiler Generator, Joint Modular Languages Conference (JMLC'03), </span><st1:City
st="on"><st1:place st="on"><span class=SpellE><span style='font-size:9.5pt;
  font-family:Times-Roman;mso-bidi-font-family:Times-Roman;color:black'>Klagenfurt</span></span></st1:place></st1:City><span
style='font-size:9.5pt;font-family:Times-Roman;mso-bidi-font-family:Times-Roman;
color:black'>, 2003<o:p></o:p></span></p>

<p class=MsoNormal style='mso-outline-level:1;mso-layout-grid-align:none;
text-autospace:none'><span style='font-size:11.5pt;font-family:Times-Roman;
mso-bidi-font-family:Times-Roman;color:black'>33<o:p></o:p></span></p>

<h1>A. Syntax of Cocol/R</h1>

<p class=MsoNormal style='text-indent:.5in;mso-outline-level:1;tab-stops:.75in 1.0in 1.25in 1.5in 153.0pt;
mso-layout-grid-align:none;text-autospace:none'><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier'>Cocol =<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:.75in 1.0in 1.25in 1.5in 153.0pt;
mso-layout-grid-align:none;text-autospace:none'><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier'><span style='mso-tab-count:
1'>   </span><span class=GramE>{ ANY</span> } <span style='mso-tab-count:2'>           </span>/*
<span class=GramE>Any</span> global python code */<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:.75in 1.0in 1.25in 1.5in 153.0pt;
mso-layout-grid-align:none;text-autospace:none'><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier'><span style='mso-tab-count:
1'>   </span>&quot;COMPILER&quot; ident<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:.75in 1.0in 1.25in 1.5in 153.0pt;
mso-layout-grid-align:none;text-autospace:none'><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier'><span style='mso-tab-count:
1'>   </span><span class=GramE>{ ANY</span> }<span style='mso-tab-count:2'>            </span>/*
Parser class member fields and methods */<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:.75in 1.0in 1.25in 1.5in 153.0pt;
mso-layout-grid-align:none;text-autospace:none'><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier'><span style='mso-tab-count:
1'>   </span><span class=SpellE>ScannerSpecification</span><o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:.75in 1.0in 1.25in 1.5in 153.0pt;
mso-layout-grid-align:none;text-autospace:none'><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier'><span style='mso-tab-count:
1'>   </span><span class=SpellE>ParserSpecification</span><o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:.75in 1.0in 1.25in 1.5in 153.0pt;
mso-layout-grid-align:none;text-autospace:none'><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier'><span style='mso-tab-count:
1'>   </span><span class=GramE>&quot;END&quot; ident '.'.</span><o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:.75in 1.0in 1.25in 1.5in 153.0pt;
mso-layout-grid-align:none;text-autospace:none'><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:.75in 1.0in 1.25in 1.5in 153.0pt;
mso-layout-grid-align:none;text-autospace:none'><span class=SpellE><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier'>ScannerSpecification</span></span><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier'> =<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:.75in 1.0in 1.25in 1.5in 153.0pt;
mso-layout-grid-align:none;text-autospace:none'><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier'><span style='mso-tab-count:
1'>   </span>[&quot;IGNORECASE&quot;]<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:.75in 1.0in 1.25in 1.5in 153.0pt;
mso-layout-grid-align:none;text-autospace:none'><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier'><span style='mso-tab-count:
1'>   </span>[&quot;CHARACTERS&quot; {<span class=SpellE>SetDecl</span>}]<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:.75in 1.0in 1.25in 1.5in 153.0pt;
mso-layout-grid-align:none;text-autospace:none'><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier'><span style='mso-tab-count:
1'>   </span>[&quot;TOKENS&quot; {<span class=SpellE>TokenDecl</span>}]<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:.75in 1.0in 1.25in 1.5in 153.0pt;
mso-layout-grid-align:none;text-autospace:none'><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier'><span style='mso-tab-count:
1'>   </span>[&quot;NAMES&quot; {<span class=SpellE>NameDecl</span>}]<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:.75in 1.0in 1.25in 1.5in 153.0pt;
mso-layout-grid-align:none;text-autospace:none'><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier'><span style='mso-tab-count:
1'>   </span>[&quot;PRAGMAS&quot; {<span class=SpellE>PragmaDecl</span>}]<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:.75in 1.0in 1.25in 1.5in 153.0pt;
mso-layout-grid-align:none;text-autospace:none'><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier'><span style='mso-tab-count:
1'>   </span>{<span class=SpellE>CommentDecl</span>}<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:.75in 1.0in 1.25in 1.5in 153.0pt;
mso-layout-grid-align:none;text-autospace:none'><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier'><span style='mso-tab-count:
1'>   </span><span class=GramE>{<span class=SpellE>WhiteSpaceDecl</span>}.</span><o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:.75in 1.0in 1.25in 1.5in 153.0pt;
mso-layout-grid-align:none;text-autospace:none'><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:.75in 1.0in 1.25in 1.5in 153.0pt;
mso-layout-grid-align:none;text-autospace:none'><span class=SpellE><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier'>SetDecl</span></span><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier'> =
ident '=' Set.<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:.75in 1.0in 1.25in 1.5in 153.0pt;
mso-layout-grid-align:none;text-autospace:none'><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:.75in 1.0in 1.25in 1.5in 153.0pt;
mso-layout-grid-align:none;text-autospace:none'><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier'>Set = <span class=SpellE>BasicSet</span>
<span class=GramE>{ (</span>'+'|'-') <span class=SpellE>BasicSet</span> }.<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:.75in 1.0in 1.25in 1.5in 153.0pt;
mso-layout-grid-align:none;text-autospace:none'><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:.75in 1.0in 1.25in 1.5in 153.0pt;
mso-layout-grid-align:none;text-autospace:none'><span class=SpellE><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier'>BasicSet</span></span><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier'> =
string | ident | Char [&quot;<span class=GramE>..&quot;</span> Char] |
&quot;ANY&quot;.<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:.75in 1.0in 1.25in 1.5in 153.0pt;
mso-layout-grid-align:none;text-autospace:none'><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:.75in 1.0in 1.25in 1.5in 153.0pt;
mso-layout-grid-align:none;text-autospace:none'><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier'>Char = char | &quot;CHR&quot;
'(' number ')'.<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:.75in 1.0in 1.25in 1.5in 153.0pt;
mso-layout-grid-align:none;text-autospace:none'><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:.75in 1.0in 1.25in 1.5in 153.0pt;
mso-layout-grid-align:none;text-autospace:none'><span class=SpellE><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier'>TokenDecl</span></span><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier'> =
Symbol ['=' <span class=SpellE>TokenExpr</span> '.'].<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:.75in 1.0in 1.25in 1.5in 153.0pt;
mso-layout-grid-align:none;text-autospace:none'><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:.75in 1.0in 1.25in 1.5in 153.0pt;
mso-layout-grid-align:none;text-autospace:none'><span class=SpellE><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier'>TokenExpr</span></span><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier'> = <span
class=SpellE>TokenTerm</span> {'|' <span class=SpellE>TokenTerm</span>}.<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:.75in 1.0in 1.25in 1.5in 153.0pt;
mso-layout-grid-align:none;text-autospace:none'><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:.75in 1.0in 1.25in 1.5in 153.0pt;
mso-layout-grid-align:none;text-autospace:none'><span class=SpellE><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier'>TokenTerm</span></span><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier'> = <span
class=SpellE>TokenFactor</span> {<span class=SpellE>TokenFactor</span>}
[&quot;CONTEXT&quot; '(' <span class=SpellE>TokenExpr</span> ')'].<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:.75in 1.0in 1.25in 1.5in 153.0pt;
mso-layout-grid-align:none;text-autospace:none'><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:.75in 1.0in 1.25in 1.5in 153.0pt;
mso-layout-grid-align:none;text-autospace:none'><span class=SpellE><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier'>TokenFactor</span></span><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier'> =
Symbol<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:.75in 1.0in 1.25in 1.5in 153.0pt;
mso-layout-grid-align:none;text-autospace:none'><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier'><span style='mso-tab-count:
1'>   </span>| '(' <span class=SpellE>TokenExpr</span> ')'<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:.75in 1.0in 1.25in 1.5in 153.0pt;
mso-layout-grid-align:none;text-autospace:none'><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier'><span style='mso-tab-count:
1'>   </span>| '[' <span class=SpellE>TokenExpr</span> ']'<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:.75in 1.0in 1.25in 1.5in 153.0pt;
mso-layout-grid-align:none;text-autospace:none'><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier'><span style='mso-tab-count:
1'>   </span><span class=GramE>| '{' <span class=SpellE>TokenExpr</span> '}'.</span><o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:.75in 1.0in 1.25in 1.5in 153.0pt;
mso-layout-grid-align:none;text-autospace:none'><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:.75in 1.0in 1.25in 1.5in 153.0pt;
mso-layout-grid-align:none;text-autospace:none'><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier'>Symbol = ident | string |
char.<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:.75in 1.0in 1.25in 1.5in 153.0pt;
mso-layout-grid-align:none;text-autospace:none'><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:.75in 1.0in 1.25in 1.5in 153.0pt;
mso-layout-grid-align:none;text-autospace:none'><span class=SpellE><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier'>NameDecl</span></span><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier'> = <span
class=SpellE>ident</span> &quot;=&quot; <span class=GramE>( ident</span> |
string ) &quot;.&quot; .<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:.75in 1.0in 1.25in 1.5in 153.0pt;
mso-layout-grid-align:none;text-autospace:none'><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:.75in 1.0in 1.25in 1.5in 153.0pt;
mso-layout-grid-align:none;text-autospace:none'><span class=SpellE><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier'>PragmaDecl</span></span><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier'> = <span
class=SpellE>TokenDecl</span> [<span class=SpellE>SemAction</span>].<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:.75in 1.0in 1.25in 1.5in 153.0pt;
mso-layout-grid-align:none;text-autospace:none'><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:.75in 1.0in 1.25in 1.5in 153.0pt;
mso-layout-grid-align:none;text-autospace:none'><span class=SpellE><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier'>CommentDecl</span></span><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier'> =
&quot;COMMENTS&quot; &quot;FROM&quot; <span class=SpellE>TokenExpr</span>
&quot;TO&quot; <span class=SpellE>TokenExpr</span> <span class=GramE>[ &quot;</span>NESTED&quot;
].<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:.75in 1.0in 1.25in 1.5in 153.0pt;
mso-layout-grid-align:none;text-autospace:none'><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:.75in 1.0in 1.25in 1.5in 153.0pt;
mso-layout-grid-align:none;text-autospace:none'><span class=SpellE><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier'>WhiteSpaceDecl</span></span><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier'> =
&quot;IGNORE&quot; Set.<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:.75in 1.0in 1.25in 1.5in 153.0pt;
mso-layout-grid-align:none;text-autospace:none'><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:.75in 1.0in 1.25in 1.5in 153.0pt;
mso-layout-grid-align:none;text-autospace:none'><span class=SpellE><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier'>ParserSpecification</span></span><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier'> =
&quot;PRODUCTIONS&quot; {Production}.<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:.75in 1.0in 1.25in 1.5in 153.0pt;
mso-layout-grid-align:none;text-autospace:none'><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:.75in 1.0in 1.25in 1.5in 153.0pt;
mso-layout-grid-align:none;text-autospace:none'><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier'>Production = ident
[Attributes] [<span class=SpellE>SemAction</span>] '=' Expression '.'.<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:.75in 1.0in 1.25in 1.5in 153.0pt;
mso-layout-grid-align:none;text-autospace:none'><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:.75in 1.0in 1.25in 1.5in 153.0pt;
mso-layout-grid-align:none;text-autospace:none'><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier'>Expression = Term {'|' Term}.<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:.75in 1.0in 1.25in 1.5in 153.0pt;
mso-layout-grid-align:none;text-autospace:none'><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:.75in 1.0in 1.25in 1.5in 153.0pt;
mso-layout-grid-align:none;text-autospace:none'><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier'>Term = [[Resolver] Factor
{Factor}].<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:.75in 1.0in 1.25in 1.5in 153.0pt;
mso-layout-grid-align:none;text-autospace:none'><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:.75in 1.0in 1.25in 1.5in 153.0pt;
mso-layout-grid-align:none;text-autospace:none'><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier'>Factor = [&quot;WEAK&quot;]
Symbol [Attributes]<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:.75in 1.0in 1.25in 1.5in 153.0pt;
mso-layout-grid-align:none;text-autospace:none'><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier'><span style='mso-tab-count:
1'>   </span>| '(' Expression ')'<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:.75in 1.0in 1.25in 1.5in 153.0pt;
mso-layout-grid-align:none;text-autospace:none'><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier'><span style='mso-tab-count:
1'>   </span>| '[' Expression ']'<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:.75in 1.0in 1.25in 1.5in 153.0pt;
mso-layout-grid-align:none;text-autospace:none'><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier'><span style='mso-tab-count:
1'>   </span>| '{' Expression '}'<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:.75in 1.0in 1.25in 1.5in 153.0pt;
mso-layout-grid-align:none;text-autospace:none'><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier'><span style='mso-tab-count:
1'>   </span>| &quot;ANY&quot;<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:.75in 1.0in 1.25in 1.5in 153.0pt;
mso-layout-grid-align:none;text-autospace:none'><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier'><span style='mso-tab-count:
1'>   </span>| &quot;SYNC&quot;<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:.75in 1.0in 1.25in 1.5in 153.0pt;
mso-layout-grid-align:none;text-autospace:none'><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier'><span style='mso-tab-count:
1'>   </span>| <span class=SpellE>SemAction</span>.<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:.75in 1.0in 1.25in 1.5in 153.0pt;
mso-layout-grid-align:none;text-autospace:none'><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:.75in 1.0in 1.25in 1.5in 153.0pt;
mso-layout-grid-align:none;text-autospace:none'><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier'>Attributes = '&lt;' {ANY}
'&gt;' | '&lt;.' {ANY} '.&gt;'.<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:.75in 1.0in 1.25in 1.5in 153.0pt;
mso-layout-grid-align:none;text-autospace:none'><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:.75in 1.0in 1.25in 1.5in 153.0pt;
mso-layout-grid-align:none;text-autospace:none'><span class=SpellE><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier'>SemAction</span></span><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier'> =
&quot;(.&quot; {ANY} &quot;.)&quot;.<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:.75in 1.0in 1.25in 1.5in 153.0pt;
mso-layout-grid-align:none;text-autospace:none'><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:.75in 1.0in 1.25in 1.5in 153.0pt;
mso-layout-grid-align:none;text-autospace:none'><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier'>Resolver = &quot;IF&quot; '('
{ANY} ')'.<o:p></o:p></span></p>

<h1>B. Interface Specifications</h1>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in 2.5in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in 2.5in;mso-layout-grid-align:
none;text-autospace:none'><span class=GramE><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier;color:black'>class</span></span><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier;
color:black'> </span><b><span style='font-size:8.5pt;font-family:Courier-Bold;
mso-bidi-font-family:Courier-Bold;color:black'>Token( object ):<o:p></o:p></span></b></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in 2.5in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'><span style='mso-tab-count:1'>       </span></span><span
class=GramE><b><span style='font-size:8.5pt;font-family:Courier-Bold;
mso-bidi-font-family:Courier-Bold;color:black'>kind</span></b></span><b><span
style='font-size:8.5pt;font-family:Courier-Bold;mso-bidi-font-family:Courier-Bold;
color:black'><span style='mso-spacerun:yes'>   </span>= 0<span
style='mso-tab-count:1'>           </span>#</span></b><span style='font-size:
8.5pt;font-family:Courier;mso-bidi-font-family:Courier;color:black'> token code
(EOF has the code 0)<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in 2.5in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'><span style='mso-tab-count:1'>       </span></span><span
class=SpellE><span class=GramE><b><span style='font-size:8.5pt;font-family:
Courier-Bold;mso-bidi-font-family:Courier-Bold;color:black'>val</span></b></span></span><b><span
style='font-size:8.5pt;font-family:Courier-Bold;mso-bidi-font-family:Courier-Bold;
color:black'><span style='mso-spacerun:yes'>    </span>= ‘’<span
style='mso-tab-count:1'>          </span>#</span></b><span style='font-size:
8.5pt;font-family:Courier;mso-bidi-font-family:Courier;color:black'> token
value<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in 2.5in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'><span style='mso-tab-count:1'>       </span></span><span
class=GramE><b><span style='font-size:8.5pt;font-family:Courier-Bold;
mso-bidi-font-family:Courier-Bold;color:black'>pos</span></b></span><b><span
style='font-size:8.5pt;font-family:Courier-Bold;mso-bidi-font-family:Courier-Bold;
color:black'><span style='mso-spacerun:yes'>    </span>= 0<span
style='mso-tab-count:1'>           </span>#</span></b><span style='font-size:
8.5pt;font-family:Courier;mso-bidi-font-family:Courier;color:black'> position
in the source stream (starting at 0)<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in 2.5in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'><span style='mso-tab-count:1'>       </span></span><span
class=GramE><b><span style='font-size:8.5pt;font-family:Courier-Bold;
mso-bidi-font-family:Courier-Bold;color:black'>line</span></b></span><b><span
style='font-size:8.5pt;font-family:Courier-Bold;mso-bidi-font-family:Courier-Bold;
color:black'><span style='mso-spacerun:yes'>   </span>= 1<span
style='mso-tab-count:1'>           </span>#</span></b><span style='font-size:
8.5pt;font-family:Courier;mso-bidi-font-family:Courier;color:black'> line
number (starting at 1)<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in 2.5in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'><span style='mso-tab-count:1'>       </span></span><span
class=SpellE><span class=GramE><b><span style='font-size:8.5pt;font-family:
Courier-Bold;mso-bidi-font-family:Courier-Bold;color:black'>col</span></b></span></span><b><span
style='font-size:8.5pt;font-family:Courier-Bold;mso-bidi-font-family:Courier-Bold;
color:black'><span style='mso-spacerun:yes'>    </span>= 1<span
style='mso-tab-count:1'>           </span>#</span></b><span style='font-size:
8.5pt;font-family:Courier;mso-bidi-font-family:Courier;color:black'> column
number (starting at 0)<o:p></o:p></span></p>

<p class=MsoNormal style='tab-stops:1.0in;mso-layout-grid-align:none;
text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal style='tab-stops:1.0in;mso-layout-grid-align:none;
text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in 3.0in;mso-layout-grid-align:
none;text-autospace:none'><span class=GramE><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier;color:black'>class</span></span><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier;
color:black'> </span><b><span style='font-size:8.5pt;font-family:Courier-Bold;
mso-bidi-font-family:Courier-Bold;color:black'>Buffer( object ):<o:p></o:p></span></b></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in 3.0in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'><span style='mso-tab-count:1'>       </span>@staticmethod<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in 3.0in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'><span style='mso-tab-count:1'>       </span><span
class=GramE>def</span> </span><b><span style='font-size:8.5pt;font-family:Courier-Bold;
mso-bidi-font-family:Courier-Bold;color:black'>Fill</span></b><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier;
color:black'>(Stream s)<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in 3.0in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in 3.0in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'><span style='mso-tab-count:1'>       </span>@staticmethod<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in 3.0in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'><span style='mso-tab-count:1'>       </span><span
class=GramE>def</span> </span><b><span style='font-size:8.5pt;font-family:Courier-Bold;
mso-bidi-font-family:Courier-Bold;color:black'>Read</span></b><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier;
color:black'>()<span style='mso-tab-count:1'>                 </span># returns
int<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in 3.0in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in 3.0in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'><span style='mso-tab-count:1'>       </span>@staticmethod<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in 3.0in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'><span style='mso-tab-count:1'>       </span><span
class=GramE>def</span> </span><b><span style='font-size:8.5pt;font-family:Courier-Bold;
mso-bidi-font-family:Courier-Bold;color:black'>Peek</span></b><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier;
color:black'>()<span style='mso-tab-count:1'>                 </span># returns
int<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in 3.0in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in 3.0in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'><span style='mso-tab-count:1'>       </span>@staticmethod<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in 3.0in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'><span style='mso-tab-count:1'>       </span><span
class=GramE>def</span> </span><span class=SpellE><b><span style='font-size:
8.5pt;font-family:Courier-Bold;mso-bidi-font-family:Courier-Bold;color:black'>getPos</span></b></span><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier;
color:black'>()<span style='mso-tab-count:1'>               </span># returns
int<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in 3.0in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in 3.0in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'><span style='mso-tab-count:1'>       </span>@staticmethod<o:p></o:p></span></p>

<p class=MsoNormal style='tab-stops:1.0in 3.0in;mso-layout-grid-align:none;
text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'><span style='mso-tab-count:1'>              </span><span
class=GramE>def</span> </span><span class=SpellE><b><span style='font-size:
8.5pt;font-family:Courier-Bold;mso-bidi-font-family:Courier-Bold;color:black'>setPos</span></b></span><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier;
color:black'>()<o:p></o:p></span></p>

<p class=MsoNormal style='tab-stops:1.0in 3.0in;mso-layout-grid-align:none;
text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in 3.0in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'><span style='mso-tab-count:1'>       </span>@<span
class=SpellE>staticmethod</span><o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in 3.0in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'><span style='mso-tab-count:1'>       </span><span
class=GramE>def</span> </span><span class=SpellE><b><span style='font-size:
8.5pt;font-family:Courier-Bold;mso-bidi-font-family:Courier-Bold;color:black'>GetString</span></b></span><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier;
color:black'>(beg, end)<span style='mso-tab-count:1'>    </span># returns
string<o:p></o:p></span></p>

<p class=MsoNormal style='tab-stops:1.0in;mso-layout-grid-align:none;
text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal style='tab-stops:1.0in;mso-layout-grid-align:none;
text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in;mso-layout-grid-align:
none;text-autospace:none'><span class=GramE><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier;color:black'>class</span></span><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier;
color:black'> </span><b><span style='font-size:8.5pt;font-family:Courier-Bold;
mso-bidi-font-family:Courier-Bold;color:black'>Scanner( object ):<o:p></o:p></span></b></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'><span style='mso-tab-count:1'>       </span>@staticmethod<span
style='mso-tab-count:1'> </span><o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'><span style='mso-tab-count:1'>       </span><span
class=GramE>def</span> </span><b><span style='font-size:8.5pt;font-family:Courier-Bold;
mso-bidi-font-family:Courier-Bold;color:black'>Init</span></b><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier;
color:black'>(<span class=SpellE>sourceFileName</span>)<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'><span style='mso-tab-count:1'>       </span>@<span
class=SpellE>staticmethod</span><span style='mso-tab-count:1'> </span><o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'><span style='mso-tab-count:1'>       </span><span
class=GramE>def</span> </span><span class=SpellE><b><span style='font-size:
8.5pt;font-family:Courier-Bold;mso-bidi-font-family:Courier-Bold;color:black'>InitStream</span></b></span><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier;
color:black'>(<span class=SpellE>FileLikeObject</span>)<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'><span style='mso-tab-count:1'>       </span>@<span
class=SpellE>staticmethod</span><o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'><span style='mso-tab-count:1'>       </span><span
class=GramE>def</span> </span><b><span style='font-size:8.5pt;font-family:Courier-Bold;
mso-bidi-font-family:Courier-Bold;color:black'>Scan</span></b><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier;
color:black'>()<span style='mso-spacerun:yes'>            </span># returns a
Token<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'><span style='mso-tab-count:1'>       </span>@staticmethod<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'><span style='mso-tab-count:1'>       </span><span
class=GramE>def</span> </span><b><span style='font-size:8.5pt;font-family:Courier-Bold;
mso-bidi-font-family:Courier-Bold;color:black'>Peek</span></b><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier;
color:black'>()<span style='mso-spacerun:yes'>            </span># returns a Token<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'><span style='mso-tab-count:1'>       </span>@staticmethod<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier;color:black'><span style='mso-tab-count:1'>       </span><span
class=GramE>def</span> </span><span class=SpellE><b><span style='font-size:
8.5pt;font-family:Courier-Bold;mso-bidi-font-family:Courier-Bold;color:black'>ResetPeek</span></b></span><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier;
color:black'>()<o:p></o:p></span></p>

<p class=MsoNormal style='tab-stops:.75in 1.0in 1.25in 1.5in 153.0pt;
mso-layout-grid-align:none;text-autospace:none'><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal style='tab-stops:.75in 1.0in 1.25in 1.5in 153.0pt;
mso-layout-grid-align:none;text-autospace:none'><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in 3.5in;mso-layout-grid-align:
none;text-autospace:none'><span class=GramE><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier'>class</span></span><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier'> </span><b><span
style='font-size:8.5pt;font-family:Courier-Bold;mso-bidi-font-family:Courier-Bold'>Parser(
object ):<o:p></o:p></span></b></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in 3.5in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier'><span style='mso-tab-count:1'>       </span></span><span
class=GramE><b><span style='font-size:8.5pt;font-family:Courier-Bold;
mso-bidi-font-family:Courier-Bold'>token</span></b></span><b><span
style='font-size:8.5pt;font-family:Courier-Bold;mso-bidi-font-family:Courier-Bold'>
= Token( )<span style='mso-tab-count:1'>                  </span># </span></b><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier'>most
recently recognized token<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in 3.5in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier'><span style='mso-tab-count:1'>       </span></span><span
class=GramE><b><span style='font-size:8.5pt;font-family:Courier-Bold;
mso-bidi-font-family:Courier-Bold'>la</span></b></span><b><span
style='font-size:8.5pt;font-family:Courier-Bold;mso-bidi-font-family:Courier-Bold'><span
style='mso-spacerun:yes'>    </span>= Token( )</span></b><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier'><span
style='mso-tab-count:1'>                  </span># lookahead token<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in 3.5in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in 3.5in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier'><span style='mso-tab-count:1'>       </span>@staticmethod<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in 3.5in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier'><span style='mso-tab-count:1'>       </span><span
class=GramE>def</span> </span><b><span style='font-size:8.5pt;font-family:Courier-Bold;
mso-bidi-font-family:Courier-Bold'>Parse</span></b><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier'>()<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in 3.5in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in 3.5in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier'><span style='mso-tab-count:1'>       </span>@staticmethod<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in 3.5in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier'><span style='mso-tab-count:1'>       </span><span
class=GramE>def</span> </span><span class=SpellE><b><span style='font-size:
8.5pt;font-family:Courier-Bold;mso-bidi-font-family:Courier-Bold'>SemErr</span></b></span><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier'>(<span
class=SpellE>errorMessage</span>)<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in 3.5in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in 3.5in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier'><span style='mso-tab-count:1'>       </span>@<span
class=SpellE>staticmethod</span><o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in 3.5in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier'><span style='mso-tab-count:1'>       </span><span
class=GramE>def</span> </span><b><span style='font-size:8.5pt;font-family:Courier-Bold;
mso-bidi-font-family:Courier-Bold'>Successful</span></b><span style='font-size:
8.5pt;font-family:Courier;mso-bidi-font-family:Courier'>()<span
style='mso-tab-count:1'>                  </span># True if no errors occurred<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in 3.5in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in 3.5in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier'><span style='mso-tab-count:1'>       </span>@staticmethod<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in 3.5in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier'><span style='mso-tab-count:1'>       </span><span
class=GramE>def</span> </span><span class=SpellE><b><span style='font-size:
8.5pt;font-family:Courier-Bold;mso-bidi-font-family:Courier-Bold'>SemError</span></b></span><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier'>(<span
class=SpellE>errorMessage</span>)<span style='mso-tab-count:1'>        </span>#
same as <span class=SpellE>SemErr</span><o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in 3.5in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in 3.5in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier'><span style='mso-tab-count:1'>       </span>@<span
class=SpellE>staticmethod</span><o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in 3.5in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier'><span style='mso-tab-count:1'>       </span><span
class=GramE>def</span> </span><b><span style='font-size:8.5pt;font-family:Courier-Bold;
mso-bidi-font-family:Courier-Bold'>Warning</span></b><span style='font-size:
8.5pt;font-family:Courier;mso-bidi-font-family:Courier'>(<span class=SpellE>errorMessage</span>)<span
style='mso-tab-count:1'>         </span># Warning message only<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in 3.5in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in 3.5in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier'><span style='mso-tab-count:1'>       </span>@staticmethod<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in 3.5in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier'><span style='mso-tab-count:1'>       </span><span
class=GramE>def</span> </span><span class=SpellE><b><span style='font-size:
8.5pt;font-family:Courier-Bold;mso-bidi-font-family:Courier-Bold'>LexString</span></b></span><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier'>()<span
style='mso-tab-count:1'>                   </span># Returns <span class=SpellE>Parser.token.val</span><o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in 3.5in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in 3.5in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier'><span style='mso-tab-count:1'>       </span>@<span
class=SpellE>staticmethod</span><o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in;tab-stops:1.0in 3.5in;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:8.5pt;font-family:Courier;
mso-bidi-font-family:Courier'><span style='mso-tab-count:1'>       </span><span
class=GramE>def</span> </span><span class=SpellE><b><span style='font-size:
8.5pt;font-family:Courier-Bold;mso-bidi-font-family:Courier-Bold'>LookAheadString</span></b></span><span
style='font-size:8.5pt;font-family:Courier;mso-bidi-font-family:Courier'>()<span
style='mso-tab-count:1'>             </span># Returns <span class=SpellE>Parser.la.val</span><o:p></o:p></span></p>

<p class=MsoNormal style='tab-stops:.75in 1.0in 1.25in 1.5in 153.0pt;
mso-layout-grid-align:none;text-autospace:none'><span style='font-size:8.5pt;
font-family:Courier;mso-bidi-font-family:Courier'><o:p>&nbsp;</o:p></span></p>

</div>

</body>

</html>
