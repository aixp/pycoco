__copyright__ = """
Compiler Generator Coco/R,
Copyright (c) 1990, 2004 Hanspeter Moessenboeck, University of Linz
extended by M. Loeberbauer & A. Woess, Univ. of Linz
ported from Java to Python by Ronald Longo
improved and refactored by KOLANICH

This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2, or (at your option) any later version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with this program.  If not, see <https://www.gnu.org/licenses/>.

As an exception, it is allowed to write an extension of Coco/R that is used as a plugin in non-free software.

If not otherwise stated, any source code generated by Coco/R (other than Coco/R itself) does not fall under the GNU General Public License.
"""  # pylint: disable=duplicate-code


import typing

import plumbum.cli


class ApplicationWithArgsParsing(plumbum.cli.Application):
	@classmethod
	def parseArgs(cls, args: typing.List[str]) -> "CocoArgs":
		s = cls("")
		validators, restOfArgs = s._validate_args(*s._parse_args(args))
		for validator, args in validators:
			validator(s, *args)
		return s


class CocoArgs(ApplicationWithArgsParsing):
	traceAutomaton = plumbum.cli.Flag(("a", "A", "traceAutomaton"), help="Include automaton tracing in the trace file.", default=False)
	firstAndFollow = plumbum.cli.Flag(("f", "F", "firstAndFollow"), default=False, help="Include first & follow sets in the trace file.")
	syntaxGraph = plumbum.cli.Flag(("g", "G", "syntaxGraph"), default=False, help="Include syntax graph in the trace file.")
	traceComputations = plumbum.cli.Flag(("i", "I", "traceComputations"), default=False, help="Include a trace of the computations for first sets in the trace file.")
	listAnyAndSync = plumbum.cli.Flag(("j", "J", "listAnyAndSync"), default=False, help="Include a listing of the ANY and SYNC sets in the trace file.")
	mergeErrors = plumbum.cli.Flag(("m", "M", "mergeErrors"), default=False, help="Merge error messages in the source listing.")
	tokenNames = plumbum.cli.Flag(("n", "N", "tokenNames"), default=False, help="Generate token names in the source listing.")
	statistics = plumbum.cli.Flag(("-p", "-P", "statistics"), default=False, help="Include a listing of statistics in the trace file.")
	symbolTable = plumbum.cli.Flag(("-s", "-S", "symbolTable"), default=False, help="Include the symbol table listing in the trace file.")
	testOnly = plumbum.cli.Flag(("-t", "-T", "testOnly"), default=False, help="Test the grammar only, don't generate any files.")
	crossReferences = plumbum.cli.Flag(("-x", "-X", "xref"), default=False, help="Include a cross reference listing in the trace file.")

	def main(self, *args, **kwargs):
		return self


parseArgs = CocoArgs.parseArgs
