__copyright__ = """
Compiler Generator Coco/R,
Copyright (c) 1990, 2004 Hanspeter Moessenboeck, University of Linz
extended by M. Loeberbauer & A. Woess, Univ. of Linz
ported from Java to Python by Ronald Longo
improved and refactored by KOLANICH

This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2, or (at your option) any later version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with this program.  If not, see <https://www.gnu.org/licenses/>.

As an exception, it is allowed to write an extension of Coco/R that is used as a plugin in non-free software.

If not otherwise stated, any source code generated by Coco/R (other than Coco/R itself) does not fall under the GNU General Public License.
"""  # pylint: disable=duplicate-code

from CoCoRuntime.errors import Errors

from .CharClass import charSetSize


def ReportCh(ch):
	if isinstance(ch, str):
		ch = ord(ch)
	if ch < ord(" ") or ch >= 127 or ch == ord("'") or ch == ord("\\"):
		return str(ch)
	return "".join(["'", chr(ch), "'"])


def Hex2Char(s: str, errors: Errors) -> str:
	assert isinstance(s, str)
	val = 0  # int
	for ch in s:
		if "0" <= ch <= "9":
			val = 16 * val + (ord(ch) - ord("0"))
		elif "a" <= ch <= "f":
			val = 16 * val + (10 + ord(ch) - ord("a"))
		elif "A" <= ch <= "F":
			val = 16 * val + (10 + ord(ch) - ord("A"))
		else:
			errors.storeError(-1, -1, "bad escape sequence in string or character")
	if val > charSetSize:
		errors.storeError(-1, -1, "bad escape sequence in string or character")
	return chr(val % charSetSize)


def Char2Hex(ch):
	assert isinstance(ch, str)
	hx = hex(ord(ch))
	return "\\u" + "0" * (4 - len(hx)) + hx


def Unescape(s: str, errors: Errors) -> str:
	# replaces escape sequences in s by their Unicode values.
	assert isinstance(s, str)
	buf = ""
	i = 0
	while i < len(s):
		if s[i] == "\\":
			ch = s[i + 1]
			if ch in ("u", "x"):
				if i + 4 <= len(s):
					buf += Hex2Char(s[i + 2 : i + 6], errors)
					i += 6
				else:
					errors.storeError(-1, -1, "bad escape sequence in string or character")
					i = len(s)
			elif ch in ("\\", "'", '"', "r", "n", "t", "0", "a", "b", "f"):
				buf += {"\\": "\\", "'": "'", '"': '"', "r": "\r", "n": "\n", "t": "\t", "0": "\0", "a": "\a", "b": "\b", "f": "\f"}[s[i + 1]]
				i += 2
			else:
				errors.storeError(-1, -1, "bad escape sequence in string or character")
				i += 2
		else:
			buf += s[i]
			i += 1
	return buf


def Escape(s: str) -> str:  # not used?
	assert isinstance(s, str)
	buf = ""
	for ch in s:
		if ch in ("\\", "'", '"', "\t", "\r", "\n"):
			buf += {"\\": "\\\\", "'": "\\'", '"': '\\"', "\t": "\\t", "\r": "\\r", "\n": "\\n"}[ch]
		elif ch < " " or ch > chr(127):  # '\x7f'
			buf += Char2Hex(ch)
		else:
			buf += ch
	return buf
